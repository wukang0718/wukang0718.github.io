<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端武康</title>
  
  
  <link href="https://wukang0718.com/atom.xml" rel="self"/>
  
  <link href="https://wukang0718.com/"/>
  <updated>2021-09-04T10:48:50.902Z</updated>
  <id>https://wukang0718.com/</id>
  
  <author>
    <name>武康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-router中query参数做自动加密、解密</title>
    <link href="https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/"/>
    <id>https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/</id>
    <published>2021-09-04T10:46:27.000Z</published>
    <updated>2021-09-04T10:48:50.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router-插件，对vue-router使用中query参数做自动加密、解密"><a href="#vue-router-插件，对vue-router使用中query参数做自动加密、解密" class="headerlink" title="vue-router 插件，对vue-router使用中query参数做自动加密、解密"></a>vue-router 插件，对vue-router使用中query参数做自动加密、解密</h2><h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><p>​    github: <a href="https://github.com/wukang0718/vueRouterEncryption">https://github.com/wukang0718/vueRouterEncryption</a></p><p>​    gitee: <a href="https://gitee.com/wu_kang0718/vueRouterEncryption">https://gitee.com/wu_kang0718/vueRouterEncryption</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>加密需要依赖 <code>crypto-js</code> 库，安装：</li></ol><p>npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js --save</span><br></pre></td></tr></table></figure><p>yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add crypto-js</span><br></pre></td></tr></table></figure><ol start="2"><li><p>将<code>utils</code>文件夹放入项目 <strong>（最好是放在router目录下 ）</strong> 中，在router的初始化文件中，引入<code>utils/query.js</code>的<code>stringifyQuery</code>和<code>parseQuery</code>方法，在<code>new VueRouter</code>是时候传递参数，</p></li><li><p>修改<code>utils/encryption.js</code>中的<code>baseCryptoCode</code>设置每个项目唯一的值</p></li></ol><p>例：（参考<a href="https://github.com/wukang0718/vueRouterEncryption/blob/master/index.js">index.js</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import VueRouter from &quot;vue-router&quot;;</span><br><span class="line">import &#123; stringifyQuery, parseQuery &#125; from &quot;./utils/query&quot;;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">const routes = [];</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  stringifyQuery: stringifyQuery, // 序列化query参数</span><br><span class="line">  parseQuery: parseQuery, // 反序列化query参数</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li><p>utils/encryption.js</p><p>文件提供加密和解密算法（默认在index.html中已经引入了crypto-js.js）</p><ul><li>getEncrypt 加密 对应的解密方法（getDecrypt）</li><li>getEncryptToBase64 加密后转base64 对应的解密方法（getDecryptByBase64）</li><li>getDecrypt 解密 对应的加密方法（getEncrypt）</li><li>getDecryptByBase64 对base64数据解密 先解析base64，在做解密 对应的加密方法（getEncryptToBase64）</li></ul></li><li><p>utils/query.js</p><p>文件提供了序列化和反序列化的方法</p><ul><li>stringifyQuery 序列化对象并 加密</li><li>parseQuery 解密 反序列化对象</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>在创建路由的时候，添加两个方法</p></blockquote><ul><li><p>stringifyQuery: 序列化传入的query参数，方法可以接收一个对象参数</p><p>在<code>new Router</code>的时候传递这个属性，在序列化<code>query</code>参数的就执行这个方法，不会执行默认的方法，序列化后在地址栏显示序列化之后的参数</p></li><li><p>parseQuery: 解析地址栏参数，方法接收一个字符串参数</p><p>在<code>new Router</code>的时候传递这个属性，在解析<code>query</code>参数的时候，回执行这个方法，不会在执行默认的方法，</p><p><strong>注：</strong> 这个方法只解析<code>path</code>中的参数，或者浏览器刷新的时候的地址栏的参数，不会对在<code>query</code>参数对处理，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;foo?a=123&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在执行这段代码的时候，<code>parseQuery</code>方法不会对<code>query:&#123;b: 345&#125;</code>进行解析,会解析<code>path:&quot;foo?a=123&quot;</code>中的<code>a=123</code>的字符串</p></li><li><p>序列化</p><p>vue-router在执行<code>createRoute</code>的时候，获取<code>fullPath</code>会执行<code>getFullPath</code>方法</p><p>createRouter 方法 会获取在 <code>new VueRouter</code>的时候传递的<code>stringifyQuery</code>方法，如果没有这个方法，就会在<code>getFullPath</code>的时候，使用默认的方法</p><p><strong>源码位置：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/route.js">“/vue-router/src/utils/route.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    record: ?RouteRecord,</span></span></span><br><span class="line"><span class="params"><span class="function">    location: Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    redirectedFrom?: ?Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    router?: VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringifyQuery = router &amp;&amp; router.options.stringifyQuery</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> query: any = location.query || &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        query = clone(query)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">        <span class="attr">name</span>: location.name || (record &amp;&amp; record.name),</span><br><span class="line">        <span class="attr">meta</span>: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">        <span class="attr">path</span>: location.path || <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">hash</span>: location.hash || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        query,</span><br><span class="line">        <span class="attr">params</span>: location.params || &#123;&#125;,</span><br><span class="line">        <span class="attr">fullPath</span>: getFullPath(location, stringifyQuery),</span><br><span class="line">        <span class="attr">matched</span>: record ? formatMatch(record) : []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redirectedFrom) &#123;</span><br><span class="line">        route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(route)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getFullPath 方法接收两个参数（路由对象， 序列化query的方法） 源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullPath</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">&#123; path, query = &#123;&#125;, hash = <span class="string">&#x27;&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">   _stringifyQuery</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringify = _stringifyQuery || stringifyQuery</span><br><span class="line">    <span class="keyword">return</span> (path || <span class="string">&#x27;/&#x27;</span>) + stringify(query) + hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化</p><p>在调用<code>push</code>的时候，会执行<code>this.router.match</code>方法，<code>match</code>方法会执行<code>normalizeLocation</code></p><p><code>normalizeLocation</code>通过<code>resolveQuery</code>方法解析path中的query，传入的三个参数（path中的?之后的参数数据字符串，使用push或replace方法传递的query参数，反序列化参数的方法）</p><p>反序列化方法会通过<code>router &amp;&amp; router.options.parseQuery</code>获取，如果在<code>new VueRouter</code>的时候传递了<code>parseQuery</code>方法，就是用该方法，如果没有就在<code>resolveQuery</code>方法中使用默认的方法</p><p><strong>源码地址：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/location.js">“/vue-router/src/utils/location.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeLocation</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  raw: RawLocation,</span></span></span><br><span class="line"><span class="params"><span class="function">  current: ?Route,</span></span></span><br><span class="line"><span class="params"><span class="function">  append: ?boolean,</span></span></span><br><span class="line"><span class="params"><span class="function">  router: ?VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> next: Location = <span class="keyword">typeof</span> raw === <span class="string">&#x27;string&#x27;</span> ? &#123; <span class="attr">path</span>: raw &#125; : raw</span><br><span class="line">  <span class="comment">// named target</span></span><br><span class="line">  <span class="keyword">if</span> (next._normalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next.name) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, raw)</span><br><span class="line">    <span class="keyword">const</span> params = next.params</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; <span class="keyword">typeof</span> params === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      next.params = extend(&#123;&#125;, params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative params</span></span><br><span class="line">  <span class="keyword">if</span> (!next.path &amp;&amp; next.params &amp;&amp; current) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, next)</span><br><span class="line">    next._normalized = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> params: any = extend(extend(&#123;&#125;, current.params), next.params)</span><br><span class="line">    <span class="keyword">if</span> (current.name) &#123;</span><br><span class="line">      next.name = current.name</span><br><span class="line">      next.params = params</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.matched.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> rawPath = current.matched[current.matched.length - <span class="number">1</span>].path</span><br><span class="line">      next.path = fillParams(rawPath, params, <span class="string">`path <span class="subst">$&#123;current.path&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`relative params navigation requires a current route.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedPath = parsePath(next.path || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> basePath = (current &amp;&amp; current.path) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> path = parsedPath.path</span><br><span class="line">  ? resolvePath(parsedPath.path, basePath, append || next.append)</span><br><span class="line">  : basePath</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> query = resolveQuery(</span><br><span class="line">    parsedPath.query,</span><br><span class="line">    next.query,</span><br><span class="line">    router &amp;&amp; router.options.parseQuery</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hash = next.hash || parsedPath.hash</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.charAt(<span class="number">0</span>) !== <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    hash = <span class="string">`#<span class="subst">$&#123;hash&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">_normalized</span>: <span class="literal">true</span>,</span><br><span class="line">    path,</span><br><span class="line">    query,</span><br><span class="line">    hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot;&gt;&lt;a href=&quot;#vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot; class=&quot;headerlink&quot; title=&quot;vue-ro</summary>
      
    
    
    
    <category term="Vue插件" scheme="https://wukang0718.com/categories/Vue%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="vue" scheme="https://wukang0718.com/tags/vue/"/>
    
    <category term="vue-router" scheme="https://wukang0718.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>为什么微任务比宏任务执行快</title>
    <link href="https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/"/>
    <id>https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/</id>
    <published>2021-09-04T07:49:41.000Z</published>
    <updated>2021-09-04T07:55:37.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么微任务比宏任务执行快"><a href="#为什么微任务比宏任务执行快" class="headerlink" title="为什么微任务比宏任务执行快"></a>为什么微任务比宏任务执行快</h2><ol><li>微任务叫 <code>microtask</code> 称为 <code>jobs</code>，是由JavaScript自身发起的</li><li>宏任务叫 <code>macrotask</code> 称为 <code>task</code>，是由宿主环境发起的</li></ol><blockquote><p>Event Loop中，每一次循环称为tick</p></blockquote><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table><thead><tr><th></th><th>宏任务（macrotask）</th><th>微任务（microtask）</th></tr></thead><tbody><tr><td>谁发起的</td><td>Nodejs/浏览器</td><td>JavaScript自身</td></tr><tr><td>具体事件</td><td>script 标签<br />setTimeout/setInterval<br />UiRendering<br />postMessage/messageChannel<br />setImmediate/IO</td><td>Promise<br />MutationObserver<br />process.nextTick</td></tr><tr><td>谁先执行</td><td>后执行</td><td>先执行</td></tr><tr><td>会触发新一轮的tick吗</td><td>会</td><td>不会</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;a href=&quot;#为什么微任务比宏任务执行快&quot; class=&quot;headerlink&quot; title=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;/a&gt;为什么微任务比宏任务执行快&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;微任务叫 &lt;code&gt;microtask</summary>
      
    
    
    
    <category term="面试题" scheme="https://wukang0718.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="EventLoop" scheme="https://wukang0718.com/tags/EventLoop/"/>
    
    <category term="微任务" scheme="https://wukang0718.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="宏任务" scheme="https://wukang0718.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
