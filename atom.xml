<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端武康</title>
  
  
  <link href="https://wukang0718.com/atom.xml" rel="self"/>
  
  <link href="https://wukang0718.com/"/>
  <updated>2021-09-07T12:39:21.313Z</updated>
  <id>https://wukang0718.com/</id>
  
  <author>
    <name>武康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二篇-Vue3 项目中集成 element-plus</title>
    <link href="https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/"/>
    <id>https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/</id>
    <published>2021-09-07T11:06:07.000Z</published>
    <updated>2021-09-07T12:39:21.313Z</updated>
    
    <content type="html"><![CDATA[<p>基于上次使用 cli 搭建的 vue3 的项目来添加 element-plus，<a href="https://wukang0718.com/2021/09/06/%E4%BD%BF%E7%94%A8vue-cli-%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/">cli搭建vue3项目</a></p><h3 id="安装element-plus"><a href="#安装element-plus" class="headerlink" title="安装element-plus"></a>安装element-plus</h3><p>在项目所在目录打开命令行工具，执行以下命令安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure><p>我这里安装的最新版本是 <code>1.1.0-beta.9</code></p><h3 id="升级sass、sass-loader"><a href="#升级sass、sass-loader" class="headerlink" title="升级sass、sass-loader"></a>升级sass、sass-loader</h3><p>为什么要升级 <code>sass</code>、 <code>sass-loader</code>?</p><p>使用脚手架安装的 <code>sass</code> 的版本是 <code>1.26.5</code> ， <code>sass-loader</code> 的版本是 <code>8.0.2</code>，而 <code>element-plus@1.1.0-beta.9</code> 版本的源码中使用的 <code>sass</code> 的版本是 <code>1.39.0</code>, <code>sass-loader</code> 的版本是 <code>10.1.1</code></p><p>那我们就需要安装一下这两个版本，命令行执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install sass@1.39.0 sass-loader@10.1.1 --save-dev</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add sass@1.39.0 sass-loader@10.1.1 --dev</span><br></pre></td></tr></table></figure><h3 id="使用按需引入"><a href="#使用按需引入" class="headerlink" title="使用按需引入"></a>使用按需引入</h3><p>为什么要使用按需引入?</p><p><code>element-plus</code> 的组件比较多，而我们的项目开发中并不一定会用到所有的组件，如果我们直接引入所有的组件，那么项目打包之后的文件体积较大，会导致浏览器的加载时间长，从而导致一些白屏时间长等的问题。</p><p>使用按需引入之后，在项目打包的时候，只会把我们引入的组件进行打包，其他我们没有引入使用的组件，不会打包我们的项目中，减少我们项目的体积，加快浏览器的加载效率。</p><h4 id="配置按需引入"><a href="#配置按需引入" class="headerlink" title="配置按需引入"></a>配置按需引入</h4><ol><li>首先需要下载一个 babel 的插件 <code>babel-plugin-import</code>，命令行执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn add babel-plugin-import --dev</span><br></pre></td></tr></table></figure><ol start="2"><li>找到项目根目录下的 <code>babel.config.js</code> 文件</li></ol><p>添加 <code>babel.config.js</code> 配置，将文件内容修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;import&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&quot;element-plus&quot;</span>,</span><br><span class="line">        <span class="comment">// 引入组件</span></span><br><span class="line">        <span class="attr">customName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          name = name.slice(<span class="number">3</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/components/<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不引入样式，因为之后会做主题定制，所以需要引入所有样式的scss文件</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="测试按需引入是否正确"><a href="#测试按需引入是否正确" class="headerlink" title="测试按需引入是否正确"></a>测试按需引入是否正确</h4><p>在 <code>src/main.ts</code> 中，引入 <code>element-plus</code> 的样式文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/App.vue</code> 中，添加 <code>script</code> 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>template</code> 中添加一个 <code>el-button</code> 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  // ... 省略css代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行项目，浏览器访问</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906220507547.png" alt="image-20210906220500007"></p><p><code>el-button</code> 组件就很好的显示在了页面上</p><h4 id="把按需引入提取到单独的目录"><a href="#把按需引入提取到单独的目录" class="headerlink" title="把按需引入提取到单独的目录"></a>把按需引入提取到单独的目录</h4><p>为什么要提取到单独的目录来，有一个好处就是只需要在这里引入一次，并注册成全局的组件之后，就不需要在每个需要用到 element-plus 的组件里面再次引入了。</p><p>我一般会在 <code>src</code> 目录下，创建一个 <code>theme</code> 文件夹，专门做按需加载和主题定制</p><p>创建一个 <code>theme</code> 文件夹，并在目录下创建一个 <code>index.ts</code> 的文件</p><p>将刚才引入 <code>el-button</code> 的代码放到这个文件中，并将组件注册为全局的组件，在这里文件里，我们将导出一个函数，这个函数会作为 <code>Vue</code> 的一个插件，在 <code>main.ts</code> 中通过 <code>app.use()</code> 的方式注册到全局</p><p>index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;./theme&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(store);</span><br><span class="line">app.use(router);</span><br><span class="line">app.use(Element);</span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试一下我们的提取的按需引入是否正确</p><p>删掉刚才在 <code>App.vue</code> 中添加的 <code>script</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新浏览器，发现 <code>el-button</code> 的组件渲染的和之前一样，没有问题</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906221753197.png" alt="image-20210906221751777"></p><h4 id="配置-element-plus-的全局属性"><a href="#配置-element-plus-的全局属性" class="headerlink" title="配置 element-plus 的全局属性"></a>配置 element-plus 的全局属性</h4><p><code>element-plus</code> 还为我们提供了两个可以全局配置的属性， <code>size</code> 和 <code>zIndex</code>，还是在我们的 <code>theme/index.ts</code> 文件中配置，修改导出的函数，给 <code>app.config.globalProperties.$ELEMENT</code> 属性赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后打开浏览器，可以发现 <code>el-button</code> 的按钮，比刚才小了很多了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906222203900.png" alt="image-20210906222202680"></p><h4 id="配置-i18n"><a href="#配置-i18n" class="headerlink" title="配置 i18n"></a>配置 i18n</h4><p>ElementPlus 组件内部默认使用英语，如果我们希望我们的项目中默认使用中文，就需要对 <code>element-plus</code> 配置 <code>i18n</code>，先来看一个默认英文的例子</p><p>在 <code>theme/index.ts</code> 文件中引入 <code>ElCalendar</code> 组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/App.vue</code> 中使用 <code>ElCalendar</code> 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-calendar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器会发现日历的头部和按钮都是显示的英文</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906222946766.png" alt="image-20210906222945434"></p><p>接下来我们配置 <code>i18n</code>，还是在我们的 <code>theme/index.ts</code> 文件中，引入 <code>ElConfigProvider</code> 组件，并在 <code>src/App.vue</code> 中使用</p><p>theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar, ElConfigProvider &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">  app.use(ElConfigProvider);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-calendar</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  // ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次打开浏览器，就可以看到日历的按钮已经变成中文了，但是日历的头部还是英文的展示，这是因为 <code>element-plus</code> 的中的时间和日期相关的组件，都使用了 <code>dayjs</code> 格式化，所以我们这里想把日历的头部 改成中文还需要引入一下 <code>dayjs</code> 的中文包</p><p>在 <code>theme/index.ts</code>  中添加引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;dayjs/locale/zh-cn&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="配置主题定制"><a href="#配置主题定制" class="headerlink" title="配置主题定制"></a>配置主题定制</h3><p>element-plus 给我们提供了一套默认的主题，同时给我们提供了四种方法，可以进行不同程度的样式自定义。这里只说其中的一种，其他的方式，感兴趣的可以前往<a href="https://element-plus.org/#/zh-CN/component/custom-theme">官网查阅</a></p><h4 id="通过修改scss变量的方式，替换主题的样式"><a href="#通过修改scss变量的方式，替换主题的样式" class="headerlink" title="通过修改scss变量的方式，替换主题的样式"></a>通过修改scss变量的方式，替换主题的样式</h4><p>在我们的 <code>src/theme</code> 目录下新建一个 <code>element-variables.scss</code> 的文件，之后我们需要定制的 <code>element-plus</code> 主题的 <code>scss</code> 变量都会在这个文件重写。</p><blockquote><p>不要使用官网推荐的 <code>element-theme</code> 工具，已经很久没有人维护了，在最新版本的node环境下使用会报错。</p></blockquote><p>在我们项目的根目录下找到 <code>node_modules/element-plus/theme-chalk/src/common/var.scss</code> 这个文件，这里面所有后面带有 <code>!default</code> 的就是我们可以修改的所有的 <code>scss</code> 的变量了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907132211742.png" alt="image-20210907132210264"></p><p>比如说我们想要修改一下 <code>primary</code> 的样式，我们查找 <code>var.scss</code> 文件发现，关于 <code>primary</code> 颜色的定义就在第 21 行，<code>$--colors</code> 的初始值就是带有 <code>!default</code> 的， 我们在 <code>element-variables.scss</code> 文件中对 <code>$--colors</code> 重新赋值就可以修改 <code>primary</code> 的颜色</p><p>src/theme/element-variables.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$--colors</span>: (</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>: (</span><br><span class="line">    <span class="string">&#x27;base&#x27;</span>: <span class="number">#000</span>,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意：要通过修改scss变量的方式自定义主题，必须重新设置 font 文件路径</p><p>引入 element-plus/packages/theme-chalk/src/index.scss 之后，就可以修改 scss 的变量了</p></blockquote><p>所以我们在 <code>src/theme </code>  文件夹下在新建一个 <code>index.scss</code> 文件，用来引入自定义的主题并处理 font 路径和 <code>element-plus </code> 的 scss 文件</p><p>src/theme/index.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./element-variables.scss&quot;</span>;</span><br><span class="line"><span class="variable">$--font-path</span>: <span class="string">&quot;~element-plus/theme-chalk/fonts&quot;</span>; </span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;~element-plus/packages/theme-chalk/src/index&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/theme/index.ts</code> 文件中引入这个文件 <code>import &quot;./index.scss&quot;;</code></p><p>src/theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dayjs/locale/zh-cn&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar, ElConfigProvider &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">  app.use(ElConfigProvider);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>删除 <code>src.main.ts</code> 中引入样式的代码 <code>import &quot;element-plus/dist/index.css&quot;;</code></p><p>刷新浏览器就可以看到我们修改的主题的样式了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907174923042.png" alt="image-20210907174921543"></p><h3 id="配置-scss-全局变量文件"><a href="#配置-scss-全局变量文件" class="headerlink" title="配置 scss 全局变量文件"></a>配置 scss 全局变量文件</h3><p>在我们的项目开发过程中，不可能只使用 <code>element-plus</code> 的组件和样式，所以我们会需要维护一套我们自己的 <code>scss</code> ，为了样式的统一和以后的好维护，我们应该使用和 <code>element-plus</code> 类似的这种全局变量的方式，定义我们的统一的颜色、边框等等</p><p>在 <code>src/assets</code> 目录下新建一个 <code>scss</code> 文件夹，在其中新建以下文件</p><ul><li>var.scss 定义全局的变量</li><li>mixin.scss 定义全局的混入</li><li>fun.scss 定义全局的函数</li><li>common.scss 全局的样式，这个文件会定义一些具体的选择器的样式，上面的其他文件中定义都是不会被直接编译出 css 代码的</li></ul><h4 id="在-sass-loader中配置成全局scss文件"><a href="#在-sass-loader中配置成全局scss文件" class="headerlink" title="在 sass-loader中配置成全局scss文件"></a>在 sass-loader中配置成全局scss文件</h4><p>在项目根目录下创建 <code>vue.config.js</code> 文件，并添加 <code>css</code> 配置</p><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          @import &quot;~@/assets/scss/var.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;~@/assets/scss/mixin.scss&quot;;</span></span><br><span class="line"><span class="string">          @import &quot;~@/assets/scss/fun.scss&quot;;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>验证一下全局的 scss 文件是否配置成功</p><p>在 <code>src/assets/scss/var.sass</code> 中添加变量 <code>$primary-color: red;</code>，把刚才修改的 <code>src/theme/element-variables</code>  文件中的 <code>primary</code> 的颜色设置成 <code>$primary-color</code></p><p>src/assets/scss/var.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: red;</span><br></pre></td></tr></table></figure><p>src/theme/element-variables.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$--colors</span>: (</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>: (</span><br><span class="line">    <span class="string">&#x27;base&#x27;</span>: <span class="variable">$primary-color</span>,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 <code>src/assets/scss/fun.scss</code> 文件中添加一个 <code>toRem</code> 函数，在 <code>src/App.vue</code> 中调用这个函数</p><p>在 <code>src/App.vue</code> 中添加一个标签 <code>&lt;div class=&quot;bg-red&quot;&gt;&lt;/div&gt;</code>，在 <code>style</code> 标签里给 div 定义一个样式，使用 <code>$primary-color </code> 变量和 <code>toRem</code> 函数</p><p>src/assets/scss/fun.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> toRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="number">75px</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际开发中，如果有需要 px 转 rem 的操作，建议可以使用 <code>postcss</code> 的插件 <code>pxtorem</code> ，可以不用每次都要都要写 toRem()，这里只是用来做一下演示</p></blockquote><p>src/App.vue</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-config-provider :locale=<span class="string">&quot;zhCn&quot;</span>&gt;</span><br><span class="line">&lt;!-- 省略其余代码 --&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;bg-red&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// ... 省略js代码</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span>&gt;</span><br><span class="line">.bg-red &#123;</span><br><span class="line">  width: toRem(<span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">height</span>: toRem(<span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器可以看到红色的按钮，和 div 的样式，宽高已经是 <code>rem</code> 的单位，并且背景也红色</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907185539501.png" alt="image-20210907185538057"></p><p>最后，在 <code>src/main.ts</code> 中引入 <code>common.scss</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/scss/common.scss&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;基于上次使用 cli 搭建的 vue3 的项目来添加 element-plus，&lt;a href=&quot;https://wukang0718.com/2021/09/06/%E4%BD%BF%E7%94%A8vue-cli-%E5%88%9B%E5%BB%BAVue3%E9%A1</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>第一篇-使用vue-cli 创建Vue3项目</title>
    <link href="https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%94%A8vue-cli%20%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/"/>
    <id>https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%94%A8vue-cli%20%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-09-06T06:24:36.000Z</published>
    <updated>2021-09-07T12:40:00.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步：安装-nodejs"><a href="#第一步：安装-nodejs" class="headerlink" title="第一步：安装 nodejs"></a>第一步：安装 <code>nodejs</code></h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>已经安装可以跳过到 <a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%AE%89%E8%A3%85vue-cli">下一步</a></p><p><code>nodejs</code> 官网地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906093128780.png" alt="image-20210906093127268"></p><p>长期维护版（即稳定版）下选择对应的操作系统点击即可下载，之后一直点击下一步，即可完成安装</p><h4 id="安装完成后检查是否安装成功"><a href="#安装完成后检查是否安装成功" class="headerlink" title="安装完成后检查是否安装成功"></a>安装完成后检查是否安装成功</h4><p>打开命令行窗口</p><ul><li>windows系统使用<code>win+R</code>，之后输入 <code>cmd</code></li><li>mac 用户，打开 <code>terminal</code> / <code>终端</code></li></ul><p>输入 <code>node -v</code> 查看 <code>nodejs</code> 版本，输入 <code>npm -v</code> 查看 <code>npm</code> 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment"># v14.17.4</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># 7.21.1</span></span><br></pre></td></tr></table></figure><p>显示对应的版本就表示安装成功</p><h3 id="第二步：安装vue-cli"><a href="#第二步：安装vue-cli" class="headerlink" title="第二步：安装vue-cli"></a>第二步：安装vue-cli</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>已经安装可以跳过到 <a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE">下一步</a></p><p><code>vue-cli</code> 官网：<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a></p><p>建议全局安装</p><p>在命令行执行以下命令，mac用户需要 <code>sudo</code> 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="安装完成后检查是否安装成功-1"><a href="#安装完成后检查是否安装成功-1" class="headerlink" title="安装完成后检查是否安装成功"></a>安装完成后检查是否安装成功</h4><p>命令行执行 <code>vue --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line"><span class="comment"># @vue/cli 4.5.13</span></span><br></pre></td></tr></table></figure><p>看到正确的版本号，表示安装成功</p><h3 id="第三步：使用脚手架创建项目"><a href="#第三步：使用脚手架创建项目" class="headerlink" title="第三步：使用脚手架创建项目"></a>第三步：使用脚手架创建项目</h3><p>在命令行执行 <code>vue create &lt;app-name&gt;</code> 命令创建项目，例如，我现在创建一个名叫 <code>cli-create-project</code> 的项目，在命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create cli-create-project</span><br></pre></td></tr></table></figure><ol><li>选择 preset</li></ol><p>命令行窗口会提示请选择一个 preset，建议选择第三个 <code>Manually select features</code>，选择第一个或者第二个，创建的项目会比较简陋，只有 <code>babel</code> 和 <code>eslint</code> ，项目中必备的 <code>vue-router</code> 等的不会被创建，选择第三项（手动选择功能）,按上下键选择，回车键确认，进入下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906131902143.png" alt="image-20210906131900957"></p><ol start="2"><li><p>选择功能</p><p>回车之后，命令行窗口就到了选择功能，按上下键切换功能，空格选中和取消选中，回车会进入到下一步。</p></li></ol><ul><li><p>Choose Vue version  必选，之后会选择使用Vue2还是Vue3</p></li><li><p>Babel   必选</p></li><li><p>TypeScript  选中之后，项目会安装typescript的依赖，建议是Vue2的话，就不用选了，Vue3的还是可以使用TypeScript的</p></li><li><p>Progressive Web App (PWA) Support 可选可不选，在项目中添加pwa支持， 会在项目中添加  <code>Service Workers</code></p></li><li><p>Router  必选，在项目中安装 <code>vue-router</code></p></li><li><p>Vuex 按照项目的需求来，会在项目中安装 <code>vuex</code>，一般不是很小的项目的话，都会用到的</p></li><li><p>CSS Pre-processors 一般都选，安装css的预处理器</p></li><li><p>Linter / Formatter 必选，安装 <code>eslint</code>  和一个格式化代码的工具会校验和格式化代码</p></li><li><p>Unit Testing  集成单元测试，看自己情况安装吧</p></li><li><p>E2E Testing   集成端到端测试，也是看自己情况安装吧</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906132942128.png" alt="image-20210906132940985"></p></li></ul><p>回车进入下一步</p><ol start="3"><li><p>选择 vue 版本，这里选择3.x</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133106123.png" alt="image-20210906133105077"></p></li></ol><p>回车进入下一步</p><ol start="4"><li><p>选择是否使用类组件语法，Vue3的话就使用不了，输入 n 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133257131.png" alt="image-20210906133256064"></p></li><li><p>选择是否使用Babel与TypeScript一起用于自动检测的填充，使用，输入 Y 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133500237.png" alt="image-20210906133459216"></p></li><li><p>选择是否使用 history 模式的路由，是否都是可以的，我就选择使用，输入 Y 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133606102.png" alt="image-20210906133604983"></p></li><li><p>选择一个 css 的预处理器，这里按照个人的喜好选择吧，我后续要添加 element-plus 的UI框架，所以就选择 <code>Sass/SCSS (with dart-sass)</code>，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134122504.png" alt="image-20210906134121436"></p></li><li><p>选择一个 lint 和 一个格式化代码的工具，我比较喜欢用 <code>ESLint + Prettier</code> ，就选择这个了,回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134326954.png" alt="image-20210906134325968"></p></li><li><p>选择 lint 执行的时机，在保存时执行，或者是在代码提交的时候，需要自动修复，我不需要自动修复，就选择 <code>Lint on save</code> 了，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134617867.png" alt="image-20210906134616771"></p></li><li><p>选择一个单元测试的工具，我用 <code>Jest</code> 比较多，这里就选择 jest，如果在第二步的时候，没有选择 <code>Unit Testing </code>，就没有这一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134836641.png" alt="image-20210906134800340"></p></li><li><p>选择一个端到端的测试框架，同样我用 <code>Cypress</code>，比较多，我就选择这个了，同样的，如果在第二步的时候，没有选择 <code>E2E Testing</code>，就没有这一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135110221.png" alt="image-20210906135025225"></p></li><li><p>选择一个存放插件（eslint、postcss、babel…）配置文件的位置</p></li></ol><ul><li>In dedicated config files  存放在单独的配置文件中，会在项目目录下生成 <code>babel.config.js</code> 之类的文件</li><li>In package.json    把插件的配置都写在 packgae.json 文件中</li></ul><p>个人喜欢单独文件存放，就选择 <code>In dedicated config files</code> 了，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135354389.png" alt="image-20210906135353240"></p><ol start="13"><li>是否要把这些配置保存为一个将来可复用的 preset。</li></ol><p>选择 Y 的话，会把 preset 保存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 preset / 选项，可以编辑这个文件。</p><p>不想保存的话就输入n，回车开始下载项目模版并安装依赖</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135728121.png" alt="image-20210906135726969"></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140107612.png" alt="image-20210906140106508"></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140551585.png" alt="image-20210906140547185"></p><ol start="14"><li><p>安装完成，进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cli- create-project</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140802792.png" alt="image-20210906140801601"></p></li></ol><p>这里默认安装的 <code>vue</code>、<code>vue-router</code> 、<code>vuex</code> 的版本都比较低，先升级一下版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@next vue-router@next vuex@next --save</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add vue@next vue-router@next vuex@next --save</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141300225.png" alt="image-20210906141259069"></p><ol start="15"><li>升级完版本之后，运行项目看一下是否可以成功运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>启动成功</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141416410.png" alt="image-20210906141415245"></p><p>在浏览器访问</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141514808.png" alt="image-20210906141513680"></p><p>使用 <code>vue-cli</code> 创建 vue3 项目就成功了</p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/">在项目中添加 <code>element-plus</code></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一步：安装-nodejs&quot;&gt;&lt;a href=&quot;#第一步：安装-nodejs&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装 nodejs&quot;&gt;&lt;/a&gt;第一步：安装 &lt;code&gt;nodejs&lt;/code&gt;&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>vue-router中query参数做自动加密、解密</title>
    <link href="https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/"/>
    <id>https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/</id>
    <published>2021-09-04T10:46:27.000Z</published>
    <updated>2021-09-07T12:50:21.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router-插件，对vue-router使用中query参数做自动加密、解密"><a href="#vue-router-插件，对vue-router使用中query参数做自动加密、解密" class="headerlink" title="vue-router 插件，对vue-router使用中query参数做自动加密、解密"></a>vue-router 插件，对vue-router使用中query参数做自动加密、解密</h2><h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><p>​    github: <a href="https://github.com/wukang0718/vueRouterEncryption">https://github.com/wukang0718/vueRouterEncryption</a></p><p>​    gitee: <a href="https://gitee.com/wu_kang0718/vueRouterEncryption">https://gitee.com/wu_kang0718/vueRouterEncryption</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>加密需要依赖 <code>crypto-js</code> 库，安装：</li></ol><p>npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js --save</span><br></pre></td></tr></table></figure><p>yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add crypto-js</span><br></pre></td></tr></table></figure><ol start="2"><li><p>将<code>utils</code>文件夹放入项目 <strong>（最好是放在router目录下 ）</strong> 中，在router的初始化文件中，引入<code>utils/query.js</code>的<code>stringifyQuery</code>和<code>parseQuery</code>方法，在<code>new VueRouter</code>是时候传递参数，</p></li><li><p>修改<code>utils/encryption.js</code>中的<code>baseCryptoCode</code>设置每个项目唯一的值</p></li></ol><p>例：（参考<a href="https://github.com/wukang0718/vueRouterEncryption/blob/master/index.js">index.js</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import VueRouter from &quot;vue-router&quot;;</span><br><span class="line">import &#123; stringifyQuery, parseQuery &#125; from &quot;./utils/query&quot;;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">const routes = [];</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  stringifyQuery: stringifyQuery, // 序列化query参数</span><br><span class="line">  parseQuery: parseQuery, // 反序列化query参数</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li><p>utils/encryption.js</p><p>文件提供加密和解密算法（默认在index.html中已经引入了crypto-js.js）</p><ul><li>getEncrypt 加密 对应的解密方法（getDecrypt）</li><li>getEncryptToBase64 加密后转base64 对应的解密方法（getDecryptByBase64）</li><li>getDecrypt 解密 对应的加密方法（getEncrypt）</li><li>getDecryptByBase64 对base64数据解密 先解析base64，在做解密 对应的加密方法（getEncryptToBase64）</li></ul></li><li><p>utils/query.js</p><p>文件提供了序列化和反序列化的方法</p><ul><li>stringifyQuery 序列化对象并 加密</li><li>parseQuery 解密 反序列化对象</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>在创建路由的时候，添加两个方法</p></blockquote><ul><li><p>stringifyQuery: 序列化传入的query参数，方法可以接收一个对象参数</p><p>在<code>new Router</code>的时候传递这个属性，在序列化<code>query</code>参数的就执行这个方法，不会执行默认的方法，序列化后在地址栏显示序列化之后的参数</p></li><li><p>parseQuery: 解析地址栏参数，方法接收一个字符串参数</p><p>在<code>new Router</code>的时候传递这个属性，在解析<code>query</code>参数的时候，回执行这个方法，不会在执行默认的方法，</p><p><strong>注：</strong> 这个方法只解析<code>path</code>中的参数，或者浏览器刷新的时候的地址栏的参数，不会对在<code>query</code>参数对处理，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;foo?a=123&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在执行这段代码的时候，<code>parseQuery</code>方法不会对<code>query:&#123;b: 345&#125;</code>进行解析,会解析<code>path:&quot;foo?a=123&quot;</code>中的<code>a=123</code>的字符串</p></li><li><p>序列化</p><p>vue-router在执行<code>createRoute</code>的时候，获取<code>fullPath</code>会执行<code>getFullPath</code>方法</p><p>createRouter 方法 会获取在 <code>new VueRouter</code>的时候传递的<code>stringifyQuery</code>方法，如果没有这个方法，就会在<code>getFullPath</code>的时候，使用默认的方法</p><p><strong>源码位置：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/route.js">“/vue-router/src/utils/route.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    record: ?RouteRecord,</span></span></span><br><span class="line"><span class="params"><span class="function">    location: Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    redirectedFrom?: ?Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    router?: VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringifyQuery = router &amp;&amp; router.options.stringifyQuery</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> query: any = location.query || &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        query = clone(query)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">        <span class="attr">name</span>: location.name || (record &amp;&amp; record.name),</span><br><span class="line">        <span class="attr">meta</span>: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">        <span class="attr">path</span>: location.path || <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">hash</span>: location.hash || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        query,</span><br><span class="line">        <span class="attr">params</span>: location.params || &#123;&#125;,</span><br><span class="line">        <span class="attr">fullPath</span>: getFullPath(location, stringifyQuery),</span><br><span class="line">        <span class="attr">matched</span>: record ? formatMatch(record) : []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redirectedFrom) &#123;</span><br><span class="line">        route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(route)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getFullPath 方法接收两个参数（路由对象， 序列化query的方法） 源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullPath</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">&#123; path, query = &#123;&#125;, hash = <span class="string">&#x27;&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">   _stringifyQuery</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringify = _stringifyQuery || stringifyQuery</span><br><span class="line">    <span class="keyword">return</span> (path || <span class="string">&#x27;/&#x27;</span>) + stringify(query) + hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化</p><p>在调用<code>push</code>的时候，会执行<code>this.router.match</code>方法，<code>match</code>方法会执行<code>normalizeLocation</code></p><p><code>normalizeLocation</code>通过<code>resolveQuery</code>方法解析path中的query，传入的三个参数（path中的?之后的参数数据字符串，使用push或replace方法传递的query参数，反序列化参数的方法）</p><p>反序列化方法会通过<code>router &amp;&amp; router.options.parseQuery</code>获取，如果在<code>new VueRouter</code>的时候传递了<code>parseQuery</code>方法，就是用该方法，如果没有就在<code>resolveQuery</code>方法中使用默认的方法</p><p><strong>源码地址：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/location.js">“/vue-router/src/utils/location.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeLocation</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  raw: RawLocation,</span></span></span><br><span class="line"><span class="params"><span class="function">  current: ?Route,</span></span></span><br><span class="line"><span class="params"><span class="function">  append: ?boolean,</span></span></span><br><span class="line"><span class="params"><span class="function">  router: ?VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> next: Location = <span class="keyword">typeof</span> raw === <span class="string">&#x27;string&#x27;</span> ? &#123; <span class="attr">path</span>: raw &#125; : raw</span><br><span class="line">  <span class="comment">// named target</span></span><br><span class="line">  <span class="keyword">if</span> (next._normalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next.name) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, raw)</span><br><span class="line">    <span class="keyword">const</span> params = next.params</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; <span class="keyword">typeof</span> params === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      next.params = extend(&#123;&#125;, params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative params</span></span><br><span class="line">  <span class="keyword">if</span> (!next.path &amp;&amp; next.params &amp;&amp; current) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, next)</span><br><span class="line">    next._normalized = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> params: any = extend(extend(&#123;&#125;, current.params), next.params)</span><br><span class="line">    <span class="keyword">if</span> (current.name) &#123;</span><br><span class="line">      next.name = current.name</span><br><span class="line">      next.params = params</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.matched.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> rawPath = current.matched[current.matched.length - <span class="number">1</span>].path</span><br><span class="line">      next.path = fillParams(rawPath, params, <span class="string">`path <span class="subst">$&#123;current.path&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`relative params navigation requires a current route.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedPath = parsePath(next.path || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> basePath = (current &amp;&amp; current.path) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> path = parsedPath.path</span><br><span class="line">  ? resolvePath(parsedPath.path, basePath, append || next.append)</span><br><span class="line">  : basePath</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> query = resolveQuery(</span><br><span class="line">    parsedPath.query,</span><br><span class="line">    next.query,</span><br><span class="line">    router &amp;&amp; router.options.parseQuery</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hash = next.hash || parsedPath.hash</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.charAt(<span class="number">0</span>) !== <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    hash = <span class="string">`#<span class="subst">$&#123;hash&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">_normalized</span>: <span class="literal">true</span>,</span><br><span class="line">    path,</span><br><span class="line">    query,</span><br><span class="line">    hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot;&gt;&lt;a href=&quot;#vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot; class=&quot;headerlink&quot; title=&quot;vue-ro</summary>
      
    
    
    
    <category term="Vue插件" scheme="https://wukang0718.com/categories/Vue%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="vue" scheme="https://wukang0718.com/tags/vue/"/>
    
    <category term="vue-router" scheme="https://wukang0718.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>为什么微任务比宏任务执行快</title>
    <link href="https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/"/>
    <id>https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/</id>
    <published>2021-09-04T07:49:41.000Z</published>
    <updated>2021-09-07T12:50:13.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么微任务比宏任务执行快"><a href="#为什么微任务比宏任务执行快" class="headerlink" title="为什么微任务比宏任务执行快"></a>为什么微任务比宏任务执行快</h2><ol><li>微任务叫 <code>microtask</code> 称为 <code>jobs</code>，是由JavaScript自身发起的</li><li>宏任务叫 <code>macrotask</code> 称为 <code>task</code>，是由宿主环境发起的</li></ol><blockquote><p>Event Loop中，每一次循环称为tick</p></blockquote><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table><thead><tr><th></th><th>宏任务（macrotask）</th><th>微任务（microtask）</th></tr></thead><tbody><tr><td>谁发起的</td><td>Nodejs/浏览器</td><td>JavaScript自身</td></tr><tr><td>具体事件</td><td>script 标签<br />setTimeout/setInterval<br />UiRendering<br />postMessage/messageChannel<br />setImmediate/IO</td><td>Promise<br />MutationObserver<br />process.nextTick</td></tr><tr><td>谁先执行</td><td>后执行</td><td>先执行</td></tr><tr><td>会触发新一轮的tick吗</td><td>会</td><td>不会</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;a href=&quot;#为什么微任务比宏任务执行快&quot; class=&quot;headerlink&quot; title=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;/a&gt;为什么微任务比宏任务执行快&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;微任务叫 &lt;code&gt;microtask</summary>
      
    
    
    
    <category term="面试题" scheme="https://wukang0718.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="EventLoop" scheme="https://wukang0718.com/tags/EventLoop/"/>
    
    <category term="微任务" scheme="https://wukang0718.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="宏任务" scheme="https://wukang0718.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
