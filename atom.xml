<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端武康</title>
  
  
  <link href="https://wukang0718.com/atom.xml" rel="self"/>
  
  <link href="https://wukang0718.com/"/>
  <updated>2022-09-02T09:00:57.125Z</updated>
  <id>https://wukang0718.com/</id>
  
  <author>
    <name>武康</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ref源码</title>
    <link href="https://wukang0718.com/2022/09/02/ref%E6%BA%90%E7%A0%81/"/>
    <id>https://wukang0718.com/2022/09/02/ref%E6%BA%90%E7%A0%81/</id>
    <published>2022-09-02T09:00:25.000Z</published>
    <updated>2022-09-02T09:00:57.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ref-方法"><a href="#ref-方法" class="headerlink" title="ref 方法"></a>ref 方法</h2><blockquote><p>源码地址：<a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/ref.ts">https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/ref.ts</a></p></blockquote><p>接收一个参数，返回参数的深代理，如果参数是对象，<code>.value</code> 是 <code>reactive</code> 的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">value?: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createRef(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="shallowRef-方法"><a href="#shallowRef-方法" class="headerlink" title="shallowRef 方法"></a>shallowRef 方法</h2><p>接收一个参数，返回 对参数 浅代理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shallowRef</span>(<span class="params">value?: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createRef(value, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>createRef</code> 方法</p><h4 id="createRef-方法"><a href="#createRef-方法" class="headerlink" title="createRef 方法"></a>createRef 方法</h4><p>判断如果已经是 <code>ref</code> 对象，直接返回这个对象</p><p>否则，返回一个 <code>RefImpl</code> 类型的实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRef</span>(<span class="params">rawValue: unknown, shallow = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isRef(rawValue)) &#123; <span class="comment">// 判断是否已经是 ref 对象</span></span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RefImpl(rawValue, shallow)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RefImpl-类"><a href="#RefImpl-类" class="headerlink" title="RefImpl 类"></a>RefImpl 类</h4><p><code>new</code> 接收两个参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>_rawValue</td><td>原始值</td></tr><tr><td>_shallow</td><td>是否只做浅层的代理，默认值 false 做 深层 的代理</td></tr></tbody></table><p>实例属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>_value</td><td>原始值</td></tr><tr><td>__v_isRef</td><td>ref 对象的表示，在判断对象是不是 ref 对象的时候，会用到</td></tr><tr><td>_rawValue</td><td>原始值 或 修改后的原始值</td></tr><tr><td>_shallow</td><td>是否只做浅层的监听</td></tr><tr><td>value</td><td>暴露给外层访问的属性，会调用 get、set 方法</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefImpl</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> _value: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> _rawValue: T, <span class="keyword">public</span> <span class="keyword">readonly</span> _shallow = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = _shallow ? _rawValue : convert(_rawValue) <span class="comment">// convert 函数做深层的代理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    track(toRaw(<span class="built_in">this</span>), TrackOpTypes.GET, <span class="string">&#x27;value&#x27;</span>) <span class="comment">// track 函数收集依赖，后续描述</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// hasChanged 方法会对 NaN 做处理</span></span><br><span class="line">    <span class="keyword">if</span> (hasChanged(toRaw(newVal), <span class="built_in">this</span>._rawValue)) &#123; <span class="comment">// 如果修改后的值，和当前值不一致</span></span><br><span class="line">      <span class="built_in">this</span>._rawValue = newVal</span><br><span class="line">      <span class="built_in">this</span>._value = <span class="built_in">this</span>._shallow ? newVal : convert(newVal)</span><br><span class="line">      trigger(toRaw(<span class="built_in">this</span>), TriggerOpTypes.SET, <span class="string">&#x27;value&#x27;</span>, newVal) <span class="comment">// trigger 函数触发依赖，后续描述</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="convert-函数"><a href="#convert-函数" class="headerlink" title="convert 函数"></a>convert 函数</h4><p>接收一个参数，如果参数是<code>对象/数组</code>类型，调用 reactive 方法，否则返回参数本身</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> convert = <span class="xml"><span class="tag">&lt;<span class="name">T</span> <span class="attr">extends</span> <span class="attr">unknown</span>&gt;</span>(val: T): T =&gt;</span></span><br><span class="line"><span class="xml">  isObject(val) ? reactive(val) : val</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> ref0 = Vue.ref(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> ref1 = Vue.shallowRef(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(ref0); <span class="comment">// &#123;..., value: Proxy&#123;a: 1&#125;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(ref1); <span class="comment">// &#123;..., value: Object&#123;a: 1&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isRef-方法"><a href="#isRef-方法" class="headerlink" title="isRef 方法"></a>isRef 方法</h2><p>方法接收一个参数，返回 <code>boolean</code>，判断参数是不是 <code>ref</code> 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isRef</span>(<span class="params">r: <span class="built_in">any</span></span>): <span class="title">r</span> <span class="title">is</span> <span class="title">Ref</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(r &amp;&amp; r.__v_isRef === <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> ref = Vue.ref(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(isRef(ref)); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(isRef(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(isRef(&#123;<span class="attr">__v_isRef</span>: <span class="literal">true</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="triggerRef-方法"><a href="#triggerRef-方法" class="headerlink" title="triggerRef 方法"></a>triggerRef 方法</h2><p>方法接收一个 <code>ref</code> 对象，触发这个 <code>ref</code> 对象上收集的依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">triggerRef</span>(<span class="params">ref: Ref</span>) </span>&#123;</span><br><span class="line">  trigger(toRaw(ref), TriggerOpTypes.SET, <span class="string">&#x27;value&#x27;</span>, __DEV__ ? ref.value : <span class="built_in">void</span> <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = Vue.ref(<span class="number">0</span>)</span><br><span class="line">    Vue.watchEffect(<span class="function">() =&gt;</span> &#123; <span class="comment">// watchEffect 默认会收集依赖</span></span><br><span class="line">        <span class="built_in">console</span>.log(ref.value); <span class="comment">// 0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.triggerRef(ref) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unref-方法"><a href="#unref-方法" class="headerlink" title="unref 方法"></a>unref 方法</h2><p>方法接收一个参数，如果参数是 <code>ref</code> 类型，返回 <code>.value</code> 的值，否则返回参数自己</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unref</span>&lt;<span class="title">T</span>&gt;(<span class="params">ref: T</span>): <span class="title">T</span> <span class="title">extends</span> <span class="title">Ref</span>&lt;<span class="title">infer</span> <span class="title">V</span>&gt; ? <span class="title">V</span> : <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isRef(ref) ? (ref.value <span class="keyword">as</span> <span class="built_in">any</span>) : ref</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = Vue.ref(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(Vue.unref(ref)) <span class="comment">// 0</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.unref(<span class="number">0</span>)) <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="proxyRefs-方法"><a href="#proxyRefs-方法" class="headerlink" title="proxyRefs 方法"></a>proxyRefs 方法</h2><p>方法接收一个参数，返回一个 <code>proxy</code> 对象</p><blockquote><p>这个方法返回的 <code>proxy</code> 对象，不会触发依赖的收集和触发</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxyRefs</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  objectWithRefs: T</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">ShallowUnwrapRef</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isReactive(objectWithRefs)</span><br><span class="line">    ? objectWithRefs</span><br><span class="line">    : <span class="keyword">new</span> <span class="built_in">Proxy</span>(objectWithRefs, shallowUnwrapHandlers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>proxy</code> 的 <code>handle</code> 是 <code>shallowUnwrapHandlers</code></p><p><code>get</code> 返回数据的原值</p><p><code>set</code> 方法针对代理对象的类型做修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowUnwrapHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">target, key, receiver</span>) =&gt;</span> unref(<span class="built_in">Reflect</span>.get(target, key, receiver)),</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">    <span class="keyword">if</span> (isRef(oldValue) &amp;&amp; !isRef(value)) &#123;</span><br><span class="line">      oldValue.value = value</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(Vue.proxyRefs(&#123;<span class="attr">a</span>: <span class="number">12</span>&#125;)) <span class="comment">// Proxy&#123;a: 12&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="customRef-方法"><a href="#customRef-方法" class="headerlink" title="customRef 方法"></a>customRef 方法</h2><p>自定义 <code>ref</code> 类型，接收一个函数，函数可以接收两个参数</p><ul><li>track <code>Function</code> 调用可以收集依赖</li><li>trigger <code>Function</code> 调用可以派发依赖</li></ul><p>函数需要返回一个对象，对象需要包含 <code>get</code> 和 <code>set</code> 方法，如果需要响应式，应该在 <code>get</code> 方法中调用 <code>track </code>，在 <code>set</code> 方法中调用 <code>trigger</code></p><ul><li>get <code>Function</code> 在获取返回值的 .<code>value</code> 时调用</li><li>set <code>Function</code> 在设置返回值的 <code>.value</code> 时调用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">customRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">factory: CustomRefFactory&lt;T&gt;</span>): <span class="title">Ref</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CustomRefImpl(factory) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回了一个 <code>CustomRefImpl</code> 实例</p><h3 id="CustomRefImpl-类"><a href="#CustomRefImpl-类" class="headerlink" title="CustomRefImpl 类"></a>CustomRefImpl 类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomRefImpl</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> _get: ReturnType&lt;CustomRefFactory&lt;T&gt;&gt;[<span class="string">&#x27;get&#x27;</span>]</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> _set: ReturnType&lt;CustomRefFactory&lt;T&gt;&gt;[<span class="string">&#x27;set&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">factory: CustomRefFactory&lt;T&gt;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; get, set &#125; = factory(</span><br><span class="line">      <span class="function">() =&gt;</span> track(<span class="built_in">this</span>, TrackOpTypes.GET, <span class="string">&#x27;value&#x27;</span>),</span><br><span class="line">      <span class="function">() =&gt;</span> trigger(<span class="built_in">this</span>, TriggerOpTypes.SET, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">this</span>._get = get</span><br><span class="line">    <span class="built_in">this</span>._set = set</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._get()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._set(newVal)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;#item-template&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> text = useDebouncedRef(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        Vue.watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(text.value)</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">&quot;input&quot;</span>)</span><br><span class="line">        text.value = <span class="string">&quot;345&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).use(ElementPlus).mount(<span class="string">&quot;#app&quot;</span>)</span><br><span class="line"><span class="comment">// customRef 实现防抖函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>(<span class="params">value, delay = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> Vue.customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            track();</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">            timer &amp;&amp; <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            <span class="keyword">if</span> (value !== val) &#123;</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    value = val;</span><br><span class="line">                    trigger();</span><br><span class="line">                    timer = <span class="literal">null</span>;</span><br><span class="line">                &#125;, delay)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20201215143310027.png" alt="image-20201215143308194"></p><h2 id="toRef-方法"><a href="#toRef-方法" class="headerlink" title="toRef 方法"></a>toRef 方法</h2><p>返回对象的 key 对应的值，返回的是一个具有 <code>value</code> 属性的对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toRef</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="built_in">object</span>: T,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: K</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">ToRef</span>&lt;<span class="title">T</span>[<span class="title">K</span>]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isRef(<span class="built_in">object</span>[key])</span><br><span class="line">    ? <span class="built_in">object</span>[key]</span><br><span class="line">    : (<span class="keyword">new</span> ObjectRefImpl(<span class="built_in">object</span>, key) <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ObjectRefImpl-类"><a href="#ObjectRefImpl-类" class="headerlink" title="ObjectRefImpl 类"></a>ObjectRefImpl 类</h3><p>返回一个具有 <code>value</code> 属性的对象，这个对象不会收集依赖和触发依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectRefImpl</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">object</span>, <span class="title">K</span> <span class="keyword">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> _object: T, <span class="keyword">private</span> <span class="keyword">readonly</span> _key: K</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._object[<span class="built_in">this</span>._key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._object[<span class="built_in">this</span>._key] = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> b = Vue.ref(<span class="number">12</span>)</span><br><span class="line">   <span class="keyword">const</span> text = &#123;</span><br><span class="line">       <span class="attr">a</span>: <span class="number">12</span>,</span><br><span class="line">       <span class="attr">b</span>: Vue.ref(<span class="number">12</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(Vue.toRef(text, <span class="string">&quot;a&quot;</span>)) <span class="comment">// ObjectRefImpl</span></span><br><span class="line">   <span class="built_in">console</span>.log(Vue.toRef(text, <span class="string">&quot;b&quot;</span>)) <span class="comment">// RefImpl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toRefs-方法"><a href="#toRefs-方法" class="headerlink" title="toRefs 方法"></a>toRefs 方法</h2><p>接收一个对象，返回一个新的对象， 这个对象的每一个属性都是一个具有 <code>value</code> 属性的对象，这个方法只做一层代理，没有深度遍历，且不会收集依赖和触发依赖</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toRefs</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params"><span class="built_in">object</span>: T</span>): <span class="title">ToRefs</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !isProxy(<span class="built_in">object</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">`toRefs() expects a reactive object but received a plain one.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ret: <span class="built_in">any</span> = isArray(<span class="built_in">object</span>) ? <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">object</span>.length) : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">    ret[key] = toRef(<span class="built_in">object</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="attr">b</span>: Vue.ref(<span class="number">12</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> refs = Vue.toRefs(text);</span><br><span class="line">    <span class="built_in">console</span>.log(refs.a) <span class="comment">// ObjectRefImpl</span></span><br><span class="line">    <span class="built_in">console</span>.log(refs.b) <span class="comment">// RefImpl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ref-方法&quot;&gt;&lt;a href=&quot;#ref-方法&quot; class=&quot;headerlink&quot; title=&quot;ref 方法&quot;&gt;&lt;/a&gt;ref 方法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/vuejs/vu</summary>
      
    
    
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="ref" scheme="https://wukang0718.com/tags/ref/"/>
    
  </entry>
  
  <entry>
    <title>reactive源码</title>
    <link href="https://wukang0718.com/2022/09/02/reactive%E6%BA%90%E7%A0%81/"/>
    <id>https://wukang0718.com/2022/09/02/reactive%E6%BA%90%E7%A0%81/</id>
    <published>2022-09-02T08:59:27.000Z</published>
    <updated>2022-09-02T08:59:54.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码位置： <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/reactive.ts">https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/reactive.ts</a></p></blockquote><h2 id="reactive-方法"><a href="#reactive-方法" class="headerlink" title="reactive 方法"></a>reactive 方法</h2><p>接收一个对象，返回 对象深代理，通过 <code>createReactiveObject</code> 方法</p><ul><li>对象的 <code>reactive</code> 代理，会被缓存，所以对同一个对象执行多次 <code>reactive</code> 返回的是同一个值</li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = &#123;<span class="attr">b</span>: <span class="number">12</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> reactive1 = Vue.reactive(a)</span><br><span class="line">    <span class="keyword">const</span> reactive2 = Vue.reactive(a)</span><br><span class="line">    <span class="built_in">console</span>.log(reactive1 === reactive2) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果对象是 <code>readonly</code> 类型的，就返回对象本身</li></ul><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = &#123;<span class="attr">b</span>: <span class="number">12</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">readonly</span> = Vue.readonly(a)</span><br><span class="line">    <span class="keyword">const</span> reactive = Vue.reactive(<span class="keyword">readonly</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">readonly</span> === reactive) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target: <span class="built_in">object</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; (target <span class="keyword">as</span> Target)[ReactiveFlags.IS_READONLY]) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mutableHandlers"><a href="#mutableHandlers" class="headerlink" title="mutableHandlers"></a>mutableHandlers</h3><p>在 <code>target</code> 是一个正常的 <code>Object</code> 或者 <code>Array</code> 时，使用这个对象做 <code>proxy</code> 的 <code>handle</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> get = <span class="comment">/*#__PURE__*/</span> createGetter() <span class="comment">// 在下面</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="comment">/*#__PURE__*/</span> createSetter() <span class="comment">// 在下面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete / Reflect.deleteProperty() 操作符的时候调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteProperty</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span> | symbol</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hadKey = hasOwn(target, key) <span class="comment">// Object.prototype.hasOwnProperty</span></span><br><span class="line">  <span class="keyword">const</span> oldValue = (target <span class="keyword">as</span> <span class="built_in">any</span>)[key]</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.deleteProperty(target, key)</span><br><span class="line">  <span class="keyword">if</span> (result &amp;&amp; hadKey) &#123;</span><br><span class="line">    <span class="comment">// 如果删除成功，触发依赖更新 </span></span><br><span class="line">    trigger(target, TriggerOpTypes.DELETE, key, <span class="literal">undefined</span>, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// in / Reflect.has() 操作符调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">has</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span> | symbol</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.has(target, key)</span><br><span class="line">  <span class="keyword">if</span> (!isSymbol(key) || !builtInSymbols.has(key)) &#123;</span><br><span class="line">    <span class="comment">// key 和 value 不是 symbol 类型 收集依赖</span></span><br><span class="line">    track(target, TrackOpTypes.HAS, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 拦截下面操作</span></span><br><span class="line"><span class="comment">Object.getOwnPropertyNames()</span></span><br><span class="line"><span class="comment">    Object.getOwnPropertySymbols()</span></span><br><span class="line"><span class="comment">    Object.keys()</span></span><br><span class="line"><span class="comment">    Reflect.ownKeys()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ownKeys</span>(<span class="params">target: <span class="built_in">object</span></span>): (<span class="params"><span class="built_in">string</span> | <span class="built_in">number</span> | symbol</span>)[] </span>&#123;</span><br><span class="line">  track(target, TrackOpTypes.ITERATE, isArray(target) ? <span class="string">&#x27;length&#x27;</span> : ITERATE_KEY)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableHandlers: ProxyHandler&lt;<span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set,</span><br><span class="line">  deleteProperty,</span><br><span class="line">  has,</span><br><span class="line">  ownKeys</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createGetter"><a href="#createGetter" class="headerlink" title="createGetter"></a>createGetter</h4><p>参数接收 <code>isReadonly</code> 是否只读， <code>shallow</code> 是否只做前代理， 返回一个 <code>get</code> 函数</p><p>当返回值时一个对象，并且 <code>shallow</code>  为 false 时，会对返回值再做一次 <code>readonly</code> 或者 <code>reactive</code> 处理，实现深代理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个 get 函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 只读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>shallow 浅代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createGetter</span>(<span class="params">isReadonly = <span class="literal">false</span>, shallow = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">target: Target, key: <span class="built_in">string</span> | symbol, receiver: <span class="built_in">object</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key === ReactiveFlags.IS_REACTIVE) &#123;</span><br><span class="line">      <span class="comment">// 这个key __v_isReactive 表示对象是不是 reactive 类型</span></span><br><span class="line">      <span class="keyword">return</span> !isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.IS_READONLY) &#123;</span><br><span class="line">      <span class="comment">// 这个key __v_isReadonly 表示对象是不是只读类型</span></span><br><span class="line">      <span class="keyword">return</span> isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      key === ReactiveFlags.RAW &amp;&amp;</span><br><span class="line">      receiver === (isReadonly ? readonlyMap : reactiveMap).get(target)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 这个keym __v_raw 获取 代理的源对象</span></span><br><span class="line">      <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上面的三个 特殊值，在 is 开头的函数 和 to 开头的函数中用到</span></span><br><span class="line">    <span class="comment">// 例：isReactive / toRaw</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> targetIsArray = isArray(target)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是只读，是数组，并且调用了数组的方法，需要特殊的方法处理</span></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly &amp;&amp; targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(arrayInstrumentations, key, receiver)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// key 是 symbol 类型，并且值也是 symbol 或者 获取的是  __proto__ 或者 __v_isRef 时</span></span><br><span class="line">    <span class="comment">// 直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      isSymbol(key)</span><br><span class="line">        ? builtInSymbols.has(key <span class="keyword">as</span> symbol)</span><br><span class="line">        : key === <span class="string">`__proto__`</span> || key === <span class="string">`__v_isRef`</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是只读的数据，收集依赖</span></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly) &#123;</span><br><span class="line">      track(target, TrackOpTypes.GET, key)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 浅代理，返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (shallow) &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRef(res)) &#123;</span><br><span class="line">      <span class="comment">// ref展开-不适用于数组 和 整数键。</span></span><br><span class="line">      <span class="keyword">const</span> shouldUnwrap = !targetIsArray || !isIntegerKey(key)</span><br><span class="line">      <span class="comment">// 这里对 ref 做了 返回原始值的处理</span></span><br><span class="line">      <span class="keyword">return</span> shouldUnwrap ? res.value : res</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果结果时对象，对这个对象在做一次 reactive 处理，实现深代理</span></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="comment">// Convert returned value into a proxy as well. we do the isObject check</span></span><br><span class="line">      <span class="comment">// here to avoid invalid value warning. Also need to lazy access readonly</span></span><br><span class="line">      <span class="comment">// and reactive here to avoid circular dependency.</span></span><br><span class="line">      <span class="keyword">return</span> isReadonly ? <span class="keyword">readonly</span>(res) : reactive(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个特殊的值 <code>arrayInstrumentations</code></p><p>这个值表示需要特殊处理的 <code>Array</code> 的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组的一些方法需要做特殊的处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> arrayInstrumentations: Record&lt;<span class="built_in">string</span>, <span class="built_in">Function</span>&gt; = &#123;&#125;</span><br><span class="line">;([<span class="string">&#x27;includes&#x27;</span>, <span class="string">&#x27;indexOf&#x27;</span>, <span class="string">&#x27;lastIndexOf&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = <span class="built_in">Array</span>.prototype[key] <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  arrayInstrumentations[key] = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>: unknown[], ...args: unknown[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = toRaw(<span class="built_in">this</span>) <span class="comment">// 获取到数组的原值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="built_in">this</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="comment">// 循环对数组中的每一项添加依赖</span></span><br><span class="line">      track(arr, TrackOpTypes.GET, i + <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先不对参数做处理，直接运行方法</span></span><br><span class="line">    <span class="keyword">const</span> res = method.apply(arr, args)</span><br><span class="line">    <span class="keyword">if</span> (res === -<span class="number">1</span> || res === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果方法没有期望的返回值，在对参数做一次 toRaw（获取原始值） 转换</span></span><br><span class="line">      <span class="keyword">return</span> method.apply(arr, args.map(toRaw))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这些方法会改变 Array 的length 属性，在某种情况下，会导致依赖循环触发 #2137</span></span><br><span class="line">;([<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = <span class="built_in">Array</span>.prototype[key] <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  arrayInstrumentations[key] = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>: unknown[], ...args: unknown[]</span>) </span>&#123;</span><br><span class="line">    pauseTracking() <span class="comment">// 停止依赖收集</span></span><br><span class="line">    <span class="keyword">const</span> res = method.apply(<span class="built_in">this</span>, args) <span class="comment">// 获取到处理结果</span></span><br><span class="line">    resetTracking() <span class="comment">// 恢复依赖收集</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="createSetter"><a href="#createSetter" class="headerlink" title="createSetter"></a>createSetter</h4><p>函数接收一个参数 <code>shallow</code> ，是否只做浅代理，返回一个 <code>set</code> 函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个 set 方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>shallow 是否做浅代理操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSetter</span>(<span class="params">shallow = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    target: <span class="built_in">object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    key: <span class="built_in">string</span> | symbol,</span></span></span><br><span class="line"><span class="params"><span class="function">    value: unknown,</span></span></span><br><span class="line"><span class="params"><span class="function">    receiver: <span class="built_in">object</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>): <span class="title">boolean</span> </span>&#123; </span><br><span class="line">    <span class="keyword">const</span> oldValue = (target <span class="keyword">as</span> <span class="built_in">any</span>)[key]</span><br><span class="line">    <span class="keyword">if</span> (!shallow) &#123;</span><br><span class="line">      value = toRaw(value)</span><br><span class="line">      <span class="comment">// 深代理模式下，如果数组中的每一项都是 ref 对象，修改只修改该项的 value 值，不替换整个对象</span></span><br><span class="line">      <span class="keyword">if</span> (!isArray(target) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) &#123;</span><br><span class="line">        oldValue.value = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// in shallow mode, objects are set as-is regardless of reactive or not</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 key 是数组的下标或者 对象/数组的属性</span></span><br><span class="line">    <span class="keyword">const</span> hadKey =</span><br><span class="line">      isArray(target) &amp;&amp; isIntegerKey(key)</span><br><span class="line">        ? <span class="built_in">Number</span>(key) &lt; target.length</span><br><span class="line">        : hasOwn(target, key)</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    <span class="comment">// don&#x27;t trigger if target is something up in the prototype chain of original</span></span><br><span class="line">    <span class="comment">// 不能直接触发依赖更新，有可能是原型链上的proxy被调用</span></span><br><span class="line">    <span class="comment">// 要判断 receiver 的原始值，就是当前的target对象， 这样确保是当前的 target 的 proxy 被触发</span></span><br><span class="line">    <span class="keyword">if</span> (target === toRaw(receiver)) &#123;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="comment">// 没有 key 的情况是添加属性，或者 数组添加一项</span></span><br><span class="line">        trigger(target, TriggerOpTypes.ADD, key, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasChanged(value, oldValue)) &#123;</span><br><span class="line">        <span class="comment">// 有 key 并且 新旧值不一样，修改成功，需要触发 set 的依赖</span></span><br><span class="line">        trigger(target, TriggerOpTypes.SET, key, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mutableCollectionHandlers"><a href="#mutableCollectionHandlers" class="headerlink" title="mutableCollectionHandlers"></a>mutableCollectionHandlers</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableCollectionHandlers: ProxyHandler&lt;CollectionTypes&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: createInstrumentationGetter(<span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createInstrumentationGetter"><a href="#createInstrumentationGetter" class="headerlink" title="createInstrumentationGetter"></a>createInstrumentationGetter</h3><p>接收两个参数 <code>isReadonly</code> 是否只读和 <code>shallow</code> 是否浅代理</p><p>返回一个 <code>get</code> 方法，这里是对 <code>Map.</code> 的代理，<code>get</code> 方法中对 <code>set</code>/<code>has</code>…方法做了处理，通过 <code>instrumentations</code> 对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个 Collection 的get 函数，在 get 中，对 set/has... 方法做处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>shallow 是否浅代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstrumentationGetter</span>(<span class="params">isReadonly: <span class="built_in">boolean</span>, shallow: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instrumentations = shallow</span><br><span class="line">    ? shallowInstrumentations</span><br><span class="line">    : isReadonly</span><br><span class="line">      ? readonlyInstrumentations</span><br><span class="line">      : mutableInstrumentations</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    target: CollectionTypes,</span></span></span><br><span class="line"><span class="params"><span class="function">    key: <span class="built_in">string</span> | symbol,</span></span></span><br><span class="line"><span class="params"><span class="function">    receiver: CollectionTypes</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === ReactiveFlags.IS_REACTIVE) &#123;</span><br><span class="line">      <span class="keyword">return</span> !isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.IS_READONLY) &#123;</span><br><span class="line">      <span class="keyword">return</span> isReadonly</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === ReactiveFlags.RAW) &#123;</span><br><span class="line">      <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理三个特殊 key 在 is... 和 to... 的方法中用到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是 instrumentations 中有的方法，并且是 target 中的原始存在的方法，就使用代理，否则直接放回对象本身的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(</span><br><span class="line">      hasOwn(instrumentations, key) &amp;&amp; key <span class="keyword">in</span> target</span><br><span class="line">        ? instrumentations</span><br><span class="line">        : target,</span><br><span class="line">      key,</span><br><span class="line">      receiver</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="instrumentations-gt-mutableInstrumentations"><a href="#instrumentations-gt-mutableInstrumentations" class="headerlink" title="instrumentations  =&gt; mutableInstrumentations"></a>instrumentations  =&gt; mutableInstrumentations</h4><p>返回了一个 <code>handle</code> 的对象，对象方法中的 <code>this</code>，都是指向 <code>reactive</code> 对象 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutableInstrumentations: Record&lt;<span class="built_in">string</span>, <span class="built_in">Function</span>&gt; = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"><span class="built_in">this</span>: MapTypes, key: unknown</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> get(<span class="built_in">this</span>, key)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> size((<span class="built_in">this</span> <span class="keyword">as</span> unknown) <span class="keyword">as</span> IterableCollections)</span><br><span class="line">  &#125;,</span><br><span class="line">  has,</span><br><span class="line">  add,</span><br><span class="line">  set,</span><br><span class="line">  <span class="attr">delete</span>: deleteEntry,</span><br><span class="line">  clear,</span><br><span class="line">  <span class="attr">forEach</span>: createForEach(<span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> iteratorMethods = [<span class="string">&#x27;keys&#x27;</span>, <span class="string">&#x27;values&#x27;</span>, <span class="string">&#x27;entries&#x27;</span>, <span class="built_in">Symbol</span>.iterator]</span><br><span class="line">iteratorMethods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  mutableInstrumentations[method <span class="keyword">as</span> <span class="built_in">string</span>] = createIterableMethod(</span><br><span class="line">    method,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><p>代理 <code>get</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取值的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 获取的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isShallow 是否浅代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: MapTypes,</span></span></span><br><span class="line"><span class="params"><span class="function">  key: unknown,</span></span></span><br><span class="line"><span class="params"><span class="function">  isReadonly = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  isShallow = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  target = (target <span class="keyword">as</span> <span class="built_in">any</span>)[ReactiveFlags.RAW] <span class="comment">// 获取到原始值 （可能是 reactive 对象） #1772</span></span><br><span class="line">  <span class="keyword">const</span> rawTarget = toRaw(target) <span class="comment">// 获取到最终的原始值</span></span><br><span class="line">  <span class="keyword">const</span> rawKey = toRaw(key) <span class="comment">// 获取 key 的原始值</span></span><br><span class="line">  <span class="keyword">if</span> (key !== rawKey) &#123;</span><br><span class="line">    <span class="comment">// 如果 key 是 reactive 类型，且代理不是 readonly ，收集 key 的依赖</span></span><br><span class="line">    !isReadonly &amp;&amp; track(rawTarget, TrackOpTypes.GET, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再次收集一次依赖 ???</span></span><br><span class="line">  !isReadonly &amp;&amp; track(rawTarget, TrackOpTypes.GET, rawKey)</span><br><span class="line">  <span class="keyword">const</span> &#123; has &#125; = getProto(rawTarget)</span><br><span class="line">  <span class="keyword">const</span> wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive</span><br><span class="line">  <span class="comment">// 先获取 key 不是 reactive 的情况</span></span><br><span class="line">  <span class="keyword">if</span> (has.call(rawTarget, key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(target.get(key))</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (has.call(rawTarget, rawKey)) &#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(target.get(rawKey))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="toReactive"><a href="#toReactive" class="headerlink" title="toReactive"></a>toReactive</h6><p>获取到最终要返回的值的方法，如果是对象/数组类型，返回一个 reactive 类型，否则返回原始值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toReactive = <span class="xml"><span class="tag">&lt;<span class="name">T</span> <span class="attr">extends</span> <span class="attr">unknown</span>&gt;</span>(value: T): T =&gt;</span></span><br><span class="line"><span class="xml">  isObject(value) ? reactive(value) : value</span></span><br></pre></td></tr></table></figure><h5 id="size"><a href="#size" class="headerlink" title="size"></a>size</h5><p>拦截 <code>.size</code> 的获取</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 .size 的获取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params">target: IterableCollections, isReadonly = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">  target = (target <span class="keyword">as</span> <span class="built_in">any</span>)[ReactiveFlags.RAW]</span><br><span class="line">  <span class="comment">// 不是  只读 收集依赖</span></span><br><span class="line">  !isReadonly &amp;&amp; track(toRaw(target), TrackOpTypes.ITERATE, ITERATE_KEY)</span><br><span class="line">  <span class="comment">// 返回原始的 size 属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, <span class="string">&#x27;size&#x27;</span>, target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="has"><a href="#has" class="headerlink" title="has"></a>has</h5><p>拦截 <code>has</code> 操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 has 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 判断的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">has</span>(<span class="params"><span class="built_in">this</span>: CollectionTypes, key: unknown, isReadonly = <span class="literal">false</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = (<span class="built_in">this</span> <span class="keyword">as</span> <span class="built_in">any</span>)[ReactiveFlags.RAW] <span class="comment">// 获取原始值，可能是一个 reactive 对象</span></span><br><span class="line">  <span class="keyword">const</span> rawTarget = toRaw(target) <span class="comment">// 获取到最终的原始值</span></span><br><span class="line">  <span class="keyword">const</span> rawKey = toRaw(key) <span class="comment">// 获取到 key 的原始值</span></span><br><span class="line">  <span class="keyword">if</span> (key !== rawKey) &#123;</span><br><span class="line">    <span class="comment">// key 是 reactive 类型时，收集 key 的依赖</span></span><br><span class="line">    !isReadonly &amp;&amp; track(rawTarget, TrackOpTypes.HAS, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 收集 rawKey 的依赖</span></span><br><span class="line">  !isReadonly &amp;&amp; track(rawTarget, TrackOpTypes.HAS, rawKey)</span><br><span class="line">  <span class="comment">// 先 判断 有没有 reactive 的 key 的值，然后判断 原始值的 key 的值</span></span><br><span class="line">  <span class="keyword">return</span> key === rawKey</span><br><span class="line">    ? target.has(key)</span><br><span class="line">    : target.has(key) || target.has(rawKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><p>拦截 <code>Set</code>/<code>WeakSet</code> 的 add 操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 Set/WeakSet 的 add 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value 添加的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="built_in">this</span>: SetTypes, value: unknown</span>) </span>&#123;</span><br><span class="line">  value = toRaw(value) <span class="comment">// 获取到 value 的原始值</span></span><br><span class="line">  <span class="keyword">const</span> target = toRaw(<span class="built_in">this</span>) <span class="comment">// 获取 target 的原始值</span></span><br><span class="line">  <span class="keyword">const</span> proto = getProto(target) <span class="comment">//  获取原型</span></span><br><span class="line">  <span class="keyword">const</span> hadKey = proto.has.call(target, value)</span><br><span class="line">  target.add(value) <span class="comment">// 给 set 中添加原始值</span></span><br><span class="line">  <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">    <span class="comment">// 如果 set 中之前没有这个值，触发一次依赖</span></span><br><span class="line">    trigger(target, TriggerOpTypes.ADD, value, value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><p>拦截 <code>Map</code> 和 <code>WeakMap</code> 的操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 Map 和 WeakMap 的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>value value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="built_in">this</span>: MapTypes, key: unknown, value: unknown</span>) </span>&#123;</span><br><span class="line">  value = toRaw(value) <span class="comment">// 获取到 value 的原始值</span></span><br><span class="line">  <span class="keyword">const</span> target = toRaw(<span class="built_in">this</span>) <span class="comment">// 获取到 target 的原始值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; has, get &#125; = getProto(target)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hadKey = has.call(target, key) <span class="comment">// boolean 元数据是否存在 key</span></span><br><span class="line">  <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">    key = toRaw(key) <span class="comment">// key 的原始值</span></span><br><span class="line">    hadKey = has.call(target, key) <span class="comment">// 如果没有 reactive 的key ，尝试获取 原始类型的key 是否存在</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// 开发环境做的操作，忽略</span></span><br><span class="line">    checkIdentityKeys(target, has, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldValue = get.call(target, key)</span><br><span class="line">  target.set(key, value)</span><br><span class="line">  <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">    <span class="comment">// 触发一次 添加的依赖</span></span><br><span class="line">    trigger(target, TriggerOpTypes.ADD, key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasChanged(value, oldValue)) &#123;</span><br><span class="line">    <span class="comment">// 触发一次修改的依赖</span></span><br><span class="line">    trigger(target, TriggerOpTypes.SET, key, value, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>拦截 <code>delete</code> 操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 delete 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteEntry</span>(<span class="params"><span class="built_in">this</span>: CollectionTypes, key: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = toRaw(<span class="built_in">this</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; has, get &#125; = getProto(target)</span><br><span class="line">  <span class="keyword">let</span> hadKey = has.call(target, key)</span><br><span class="line">  <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">    key = toRaw(key)</span><br><span class="line">    hadKey = has.call(target, key)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    checkIdentityKeys(target, has, key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldValue = get ? get.call(target, key) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">const</span> result = target.delete(key)</span><br><span class="line">  <span class="keyword">if</span> (hadKey) &#123;</span><br><span class="line">    <span class="comment">// 如果删除的是之前存在的字段，触发一次 delete 依赖</span></span><br><span class="line">    trigger(target, TriggerOpTypes.DELETE, key, <span class="literal">undefined</span>, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><p>拦截 <code>clear</code> 操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 clear 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>this proxy 对象 reactive 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="built_in">this</span>: IterableCollections</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = toRaw(<span class="built_in">this</span>)</span><br><span class="line">  <span class="keyword">const</span> hadItems = target.size !== <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> oldTarget = __DEV__</span><br><span class="line">    ? isMap(target)</span><br><span class="line">      ? <span class="keyword">new</span> <span class="built_in">Map</span>(target)</span><br><span class="line">      : <span class="keyword">new</span> <span class="built_in">Set</span>(target)</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">const</span> result = target.clear()</span><br><span class="line">  <span class="keyword">if</span> (hadItems) &#123;</span><br><span class="line">    <span class="comment">// 如果之前有元素，触发一次依赖事件</span></span><br><span class="line">    trigger(target, TriggerOpTypes.CLEAR, <span class="literal">undefined</span>, <span class="literal">undefined</span>, oldTarget)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>拦截 <code>forEach</code> 操作</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截 forEach 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isShallow 是否浅代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createForEach</span>(<span class="params">isReadonly: <span class="built_in">boolean</span>, isShallow: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">this</span>: IterableCollections, <span class="comment">// proxy 对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    callback: <span class="built_in">Function</span>, <span class="comment">// 回调函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    thisArg?: unknown <span class="comment">// 改变的 this 的值</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> observed = <span class="built_in">this</span> <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">    <span class="keyword">const</span> target = observed[ReactiveFlags.RAW]</span><br><span class="line">    <span class="keyword">const</span> rawTarget = toRaw(target) <span class="comment">// 原始的值</span></span><br><span class="line">    <span class="keyword">const</span> wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive</span><br><span class="line">    <span class="comment">// 不是只读，触发一次iterate依赖</span></span><br><span class="line">    !isReadonly &amp;&amp; track(rawTarget, TrackOpTypes.ITERATE, ITERATE_KEY)</span><br><span class="line">    <span class="keyword">return</span> target.forEach(<span class="function">(<span class="params">value: unknown, key: unknown</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// forEach callback 中接收到的值，是 reactive / readonly 类型</span></span><br><span class="line">      <span class="keyword">return</span> callback.call(thisArg, wrap(value), wrap(key), observed)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keys-、values、entries"><a href="#keys-、values、entries" class="headerlink" title="keys 、values、entries"></a>keys 、values、entries</h5><h6 id="createIterableMethod"><a href="#createIterableMethod" class="headerlink" title="createIterableMethod"></a>createIterableMethod</h6><p>返回一个方法 拦截 <code>iterate</code> 操作，返回一个遍历器，<code>for of</code> 遍历就是基于遍历器实现的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个方法 拦截 iterate 操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>method 方法名称 keys values entries</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isReadonly 是否只读</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isShallow 是否浅代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIterableMethod</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  method: <span class="built_in">string</span> | symbol,</span></span></span><br><span class="line"><span class="params"><span class="function">  isReadonly: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  isShallow: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="built_in">this</span>: IterableCollections, <span class="comment">// this 是 proxy 对象</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ...args: unknown[]</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>): <span class="title">Iterable</span> &amp; <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = (<span class="built_in">this</span> <span class="keyword">as</span> <span class="built_in">any</span>)[ReactiveFlags.RAW]</span><br><span class="line">    <span class="keyword">const</span> rawTarget = toRaw(target)</span><br><span class="line">    <span class="keyword">const</span> targetIsMap = isMap(rawTarget)</span><br><span class="line">    <span class="comment">// 是否 map 遍历 iterate</span></span><br><span class="line">    <span class="keyword">const</span> isPair =</span><br><span class="line">      method === <span class="string">&#x27;entries&#x27;</span> || (method === <span class="built_in">Symbol</span>.iterator &amp;&amp; targetIsMap)</span><br><span class="line">    <span class="comment">// 是否获取map的keys</span></span><br><span class="line">    <span class="keyword">const</span> isKeyOnly = method === <span class="string">&#x27;keys&#x27;</span> &amp;&amp; targetIsMap</span><br><span class="line">    <span class="keyword">const</span> innerIterator = target[method](...args)</span><br><span class="line">    <span class="keyword">const</span> wrap = isReadonly ? toReadonly : isShallow ? toShallow : toReactive</span><br><span class="line">    <span class="comment">// 收集依赖</span></span><br><span class="line">    !isReadonly &amp;&amp;</span><br><span class="line">      track(</span><br><span class="line">        rawTarget,</span><br><span class="line">        TrackOpTypes.ITERATE,</span><br><span class="line">        isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY</span><br><span class="line">      )</span><br><span class="line">    <span class="comment">// return a wrapped iterator which returns observed versions of the</span></span><br><span class="line">    <span class="comment">// values emitted from the real iterator</span></span><br><span class="line">    <span class="comment">// 返回的是一个next函数，next函数返回 value 和 done ，这是 iterable 接口规范</span></span><br><span class="line">    <span class="comment">// value 的值还是一个 reactive / readonly / ... 的值</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// iterator protocol</span></span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, done &#125; = innerIterator.next()</span><br><span class="line">        <span class="keyword">return</span> done</span><br><span class="line">          ? &#123; value, done &#125;</span><br><span class="line">          : &#123;</span><br><span class="line">              <span class="attr">value</span>: isPair ? [wrap(value[<span class="number">0</span>]), wrap(value[<span class="number">1</span>])] : wrap(value),</span><br><span class="line">              done</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// iterable protocol</span></span><br><span class="line">      [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="shallowReactive-方法"><a href="#shallowReactive-方法" class="headerlink" title="shallowReactive 方法"></a>shallowReactive 方法</h2><p>参数接收一个对象，返回对象的浅代理，通过 <code>createReactiveObject</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shallowReactive</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params">target: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    shallowReactiveHandlers,</span><br><span class="line">    shallowCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shallowReactiveHandlers"><a href="#shallowReactiveHandlers" class="headerlink" title="shallowReactiveHandlers"></a>shallowReactiveHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReactiveHandlers: ProxyHandler&lt;<span class="built_in">object</span>&gt; = extend(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  mutableHandlers,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">get</span>: shallowGet,</span><br><span class="line">    <span class="attr">set</span>: shallowSet</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>用了新的 <code>get</code> 和 <code>set</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowGet = <span class="comment">/*#__PURE__*/</span> createGetter(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> shallowSet = <span class="comment">/*#__PURE__*/</span> createSetter(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>用了上面提到的 <code>createGetter</code> 和 <code>createSetter</code> 方法</p><h3 id="shallowCollectionHandlers"><a href="#shallowCollectionHandlers" class="headerlink" title="shallowCollectionHandlers"></a>shallowCollectionHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowCollectionHandlers: ProxyHandler&lt;CollectionTypes&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: createInstrumentationGetter(<span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用的还是上面提到的 <code>createInstrumentationGetter</code> 方法</p><h2 id="readonly-方法"><a href="#readonly-方法" class="headerlink" title="readonly 方法"></a>readonly 方法</h2><p>参数接收一个对象，返回一个只读 <code>readonly</code> 对象，通过 <code>createReactiveObject</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">readonly</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: T</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">DeepReadonly</span>&lt;<span class="title">UnwrapNestedRefs</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    readonlyHandlers,</span><br><span class="line">    readonlyCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="readonlyHandlers"><a href="#readonlyHandlers" class="headerlink" title="readonlyHandlers"></a>readonlyHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readonlyHandlers: ProxyHandler&lt;<span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: readonlyGet,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, key</span>)</span> &#123; <span class="comment">// 不做任何改变，直接返回 true</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">`Set operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">        target</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, key</span>)</span> &#123; <span class="comment">// 不做任何改变，直接返回 true</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">`Delete operation on key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>,</span><br><span class="line">        target</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get</code> 方法 <code>readonlyGet</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readonlyGet = <span class="comment">/*#__PURE__*/</span> createGetter(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>使用的是上面提到的  <code>createGetter</code> 方法</p><h3 id="readonlyCollectionHandlers"><a href="#readonlyCollectionHandlers" class="headerlink" title="readonlyCollectionHandlers"></a>readonlyCollectionHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readonlyCollectionHandlers: ProxyHandler&lt;CollectionTypes&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: createInstrumentationGetter(<span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用的 <code>createInstrumentationGetter</code> 方法，创建的 <code>handle</code> 对象</p><h2 id="shallowReadonly-方法"><a href="#shallowReadonly-方法" class="headerlink" title="shallowReadonly 方法"></a>shallowReadonly 方法</h2><p>参数接收一个对象，返回一个只读 <code>readonly</code> 的对象，这个只读，只针对对象的第一层，不做深层的代理， 通过 <code>createReactiveObject</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shallowReadonly</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: T</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Readonly</span>&lt;</span>&#123; [K <span class="keyword">in</span> keyof T]: UnwrapNestedRefs&lt;T[K]&gt; &#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    shallowReadonlyHandlers,</span><br><span class="line">    readonlyCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shallowReadonlyHandlers"><a href="#shallowReadonlyHandlers" class="headerlink" title="shallowReadonlyHandlers"></a>shallowReadonlyHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> shallowReadonlyHandlers: ProxyHandler&lt;<span class="built_in">object</span>&gt; = extend(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  readonlyHandlers,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">get</span>: shallowReadonlyGet</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>get</code> 方法 <code>shallowReadonlyGet</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowReadonlyGet = <span class="comment">/*#__PURE__*/</span> createGetter(<span class="literal">true</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="readonlyCollectionHandlers-1"><a href="#readonlyCollectionHandlers-1" class="headerlink" title="readonlyCollectionHandlers"></a>readonlyCollectionHandlers</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> readonlyCollectionHandlers: ProxyHandler&lt;CollectionTypes&gt; = &#123;</span><br><span class="line">  <span class="attr">get</span>: createInstrumentationGetter(<span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经提到过</p><h3 id="createReactiveObject-方法"><a href="#createReactiveObject-方法" class="headerlink" title="createReactiveObject 方法"></a>createReactiveObject 方法</h3><p>参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>target</td><td>需要代理的源数据（一般是对象，可以是Map/Set/WeakMap/WeakSet）</td></tr><tr><td>isReadonly</td><td>是否创建只读对象</td></tr><tr><td>baseHandlers</td><td>target 是 Object/Array 时，proxy 的 handle 对象</td></tr><tr><td>collectionHandlers</td><td>target 是 Map/Set/WeakMap/WeakSet时，proxy 的 handle 对象</td></tr></tbody></table><p>返回一个 <code>proxy</code> 对象，会对返回的 <code>proxy</code> 和 <code>target</code> 做一个缓存，如果对同一个对象多次调用该方法，获取到的是同一个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveObject</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: Target,</span></span></span><br><span class="line"><span class="params"><span class="function">  isReadonly: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  baseHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  collectionHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果不是对象类型，就直接返回 参数本身</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果target是只读对象，并且要获取只读对象的时候，就直接返回 target</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[ReactiveFlags.RAW] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[ReactiveFlags.IS_REACTIVE])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果 target 已经有了对象的代理对象，直接返回这个代理</span></span><br><span class="line">  <span class="keyword">const</span> proxyMap = isReadonly ? readonlyMap : reactiveMap</span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * targetType 指定要跳过或者不可扩展，或者不是Object/Array/Map/WeakMap/Set/WeakSet TargetType.INVALID</span></span><br><span class="line"><span class="comment">   * Object/Array TargetType.COMMON</span></span><br><span class="line"><span class="comment">   * Map/Set/WeakMap/WeakSet TargetType.COLLECTION</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> targetType = getTargetType(target)</span><br><span class="line">  <span class="keyword">if</span> (targetType === TargetType.INVALID) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === TargetType.COLLECTION ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 保存一下这个代理对象</span></span><br><span class="line">  proxyMap.set(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isReactive-方法"><a href="#isReactive-方法" class="headerlink" title="isReactive 方法"></a>isReactive 方法</h2><p>通过 <code>ReactiveFlags.IS_REACTIVE</code> / <code>__v_isReactive</code> 属性判断是不是 <code>reactive</code> 对象，这个对象的获取在 <code>proxy</code> 的 <code>handle</code> 中做了处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isReactive</span>(<span class="params">value: unknown</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isReadonly(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> isReactive((value <span class="keyword">as</span> Target)[ReactiveFlags.RAW])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> !!(value &amp;&amp; (value <span class="keyword">as</span> Target)[ReactiveFlags.IS_REACTIVE])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> b = Vue.reactive(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReactive(b)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReactive(&#123;<span class="attr">__v_isReactive</span>: <span class="literal">true</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReactive(&#123;<span class="attr">__v_isReactive</span>: <span class="number">1</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isReadonly-方法"><a href="#isReadonly-方法" class="headerlink" title="isReadonly 方法"></a>isReadonly 方法</h2><p>通过 <code>ReactiveFlags.IS_READONLY</code> / <code>__v_isReadonly</code> 判断是否是 <code>readonly</code> 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isReadonly</span>(<span class="params">value: unknown</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!(value &amp;&amp; (value <span class="keyword">as</span> Target)[ReactiveFlags.IS_READONLY])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> b = Vue.readonly(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReadonly(b)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReadonly(&#123;<span class="attr">__v_isReadonly</span>: <span class="literal">true</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isReadonly(&#123;<span class="attr">__v_isReadonly</span>: <span class="number">1</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isProxy-方法"><a href="#isProxy-方法" class="headerlink" title="isProxy 方法"></a>isProxy 方法</h2><p>判断数据是不是 <code>reactive</code> 或者 <code>readonly</code> 类型的数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isProxy</span>(<span class="params">value: unknown</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isReactive(value) || isReadonly(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = Vue.reactive(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> b = Vue.readonly(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isProxy(a)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isProxy(b)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isProxy(&#123;<span class="attr">__v_isReadonly</span>: <span class="literal">true</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isProxy(&#123;<span class="attr">__v_isReactive</span>: <span class="literal">true</span>&#125;)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toRaw-方法"><a href="#toRaw-方法" class="headerlink" title="toRaw 方法"></a>toRaw 方法</h2><p>方法接收一个参数，如果参数是 <code>reactive</code> / <code>readonly</code> 对象会返回 <code>reactive</code> 对象的原始值，如果不是 <code>reactive</code> 对象，就返回接收的参数</p><p><code>ReactiveFlags.RAW</code> 在 <code>reactive</code> 对象的 <code>get</code> 方法中做了处理 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toRaw</span>&lt;<span class="title">T</span>&gt;(<span class="params">observed: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (observed &amp;&amp; toRaw((observed <span class="keyword">as</span> Target)[ReactiveFlags.RAW])) || observed</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = Vue.reactive(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="keyword">const</span> b = Vue.readonly(&#123;<span class="attr">b</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(Vue.toRaw(a)) <span class="comment">// &#123;a: 123&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.toRaw(b)) <span class="comment">// &#123;b: 123&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.toRaw(&#123;<span class="attr">__v_isReadonly</span>: <span class="literal">true</span>&#125;)) <span class="comment">// &#123;__v_isReadonly: true&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.toRaw(&#123;<span class="attr">__v_isReactive</span>: <span class="literal">true</span>&#125;)) <span class="comment">// &#123;__v_isReactive: true&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="markRaw-方法"><a href="#markRaw-方法" class="headerlink" title="markRaw 方法"></a>markRaw 方法</h2><p>接收一个参数对象，标记这个对象是不需要代理的，通过 <code>ReactiveFlags.SKIP</code> / <code>__v_skip</code> 实现，会给对象添加一个 <code> __v_skip</code> 属性，值是  <code>true</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">markRaw</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  def(value, ReactiveFlags.SKIP, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> a = Vue.markRaw(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// &#123;a: 123, __v_skip: true&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.reactive(&#123;<span class="attr">a</span>: <span class="number">123</span>&#125;)) <span class="comment">// Proxy &#123;a: 123&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.reactive(a)) <span class="comment">// &#123;a: 123, __v_skip: true&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.reactive(&#123;<span class="attr">__v_skip</span>: <span class="literal">true</span>&#125;)) <span class="comment">// &#123;__v_skip: true&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;源码位置： &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/reactive.ts&quot;&gt;https://github.com/vuejs/v</summary>
      
    
    
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="reactive" scheme="https://wukang0718.com/tags/reactive/"/>
    
  </entry>
  
  <entry>
    <title>computed源码</title>
    <link href="https://wukang0718.com/2022/09/02/computed%E6%BA%90%E7%A0%81/"/>
    <id>https://wukang0718.com/2022/09/02/computed%E6%BA%90%E7%A0%81/</id>
    <published>2022-09-02T08:58:18.000Z</published>
    <updated>2022-09-02T08:59:04.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码位置： <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/computed.ts">https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/computed.ts</a></p></blockquote><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>接收一个参数可以是一个 <code>function</code> 或者是一个对象，对象必须有 <code>get</code> 方法，可以设置 <code>set</code> 方法，返回一个有 <code>value</code> 属性的对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算属性的方法 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>getterOrOptions get 方法 或者 是一个对象，对象中包括 get 和 set 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">computed</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  getterOrOptions: ComputedGetter&lt;T&gt; | WritableComputedOptions&lt;T&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter: ComputedGetter&lt;T&gt;</span><br><span class="line">  <span class="keyword">let</span> setter: ComputedSetter&lt;T&gt;</span><br><span class="line">  <span class="comment">// 参数是一个函数的时候，就是 getter 函数</span></span><br><span class="line">  <span class="keyword">if</span> (isFunction(getterOrOptions)) &#123;</span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    setter = __DEV__</span><br><span class="line">      ? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(<span class="string">&#x27;Write operation failed: computed value is readonly&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      : NOOP</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getter = getterOrOptions.get</span><br><span class="line">    setter = getterOrOptions.set</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ComputedRefImpl 返回这个实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ComputedRefImpl(</span><br><span class="line">    getter,</span><br><span class="line">    setter,</span><br><span class="line">    isFunction(getterOrOptions) || !getterOrOptions.set</span><br><span class="line">  ) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ComputedRefImpl-类"><a href="#ComputedRefImpl-类" class="headerlink" title="ComputedRefImpl 类"></a>ComputedRefImpl 类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个 computed 实例</span></span><br><span class="line"><span class="comment"> * getter  方法</span></span><br><span class="line"><span class="comment"> * _setter  方法</span></span><br><span class="line"><span class="comment"> * isReadonly 是否可以修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputedRefImpl</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> _value!: T</span><br><span class="line">  <span class="keyword">private</span> _dirty = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> effect: ReactiveEffect&lt;T&gt;</span><br><span class="line">  <span class="comment">// 有一个 __v_isRef 属性 为 true ，在调用 isRef 的时候，返回 true</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> [ReactiveFlags.IS_READONLY]: <span class="built_in">boolean</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    getter: ComputedGetter&lt;T&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> _setter: ComputedSetter&lt;T&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    isReadonly: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 effect 方法，收集 getter 方法中的依赖</span></span><br><span class="line">    <span class="built_in">this</span>.effect = effect(getter, &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>, <span class="comment">// 方法不会立即执行</span></span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有这个 值 被使用过，才会重新计算</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>._dirty) &#123;</span><br><span class="line">          <span class="built_in">this</span>._dirty = <span class="literal">true</span> <span class="comment">// 等下一次或者值的时候，才会调用</span></span><br><span class="line">          trigger(toRaw(<span class="built_in">this</span>), TriggerOpTypes.SET, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>[ReactiveFlags.IS_READONLY] = isReadonly</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>._dirty) &#123;</span><br><span class="line">      <span class="built_in">this</span>._value = <span class="built_in">this</span>.effect() <span class="comment">// 这个就是 getter 函数执行的结果</span></span><br><span class="line">      <span class="built_in">this</span>._dirty = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收集依赖</span></span><br><span class="line">    track(toRaw(<span class="built_in">this</span>), TrackOpTypes.GET, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">value</span>(<span class="params">newValue: T</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>._setter(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = Vue.ref(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> b = Vue.computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;computed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a.value * <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    a.value = <span class="number">2</span>;</span><br><span class="line">    a.value = <span class="number">3</span>;</span><br><span class="line">    a.value = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b.value) <span class="comment">// computed 8</span></span><br><span class="line">    a.value = <span class="number">5</span>;</span><br><span class="line">    a.value = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b.value) <span class="comment">// computed 12</span></span><br><span class="line">    <span class="built_in">console</span>.log(Vue.isRef(b)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;源码位置： &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/computed.ts&quot;&gt;https://github.com/vuejs/v</summary>
      
    
    
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="computed" scheme="https://wukang0718.com/tags/computed/"/>
    
  </entry>
  
  <entry>
    <title>effect源码</title>
    <link href="https://wukang0718.com/2022/09/02/effect%E6%BA%90%E7%A0%81/"/>
    <id>https://wukang0718.com/2022/09/02/effect%E6%BA%90%E7%A0%81/</id>
    <published>2022-09-02T08:57:22.000Z</published>
    <updated>2022-09-02T08:58:39.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码位置： <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts">https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts</a></p><p><strong>这个文件的方法暴露在 “@vue/reactivity”</strong></p></blockquote><h2 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h2><p>执行需要收集依赖的函数，又有的依赖收集的调用，都要通过这个函数执行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行需要收集依赖的函数，又有的依赖收集的调用，都要通过这个函数执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn Function 在这个函数里收集依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>options </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">effect</span>&lt;<span class="title">T</span> = <span class="title">any</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  fn: () =&gt; T,</span></span></span><br><span class="line"><span class="params"><span class="function">  options: ReactiveEffectOptions = EMPTY_OBJ</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">ReactiveEffect</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isEffect(fn)) &#123;</span><br><span class="line">    fn = fn.raw <span class="comment">// 获取到函数的原始值</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取到的是一个 加了 effect 标识的函数，并且在这个函数中处理了依赖收集需要的参数</span></span><br><span class="line">  <span class="keyword">const</span> effect = createReactiveEffect(fn, options)</span><br><span class="line">  <span class="keyword">if</span> (!options.lazy) &#123;</span><br><span class="line">    <span class="comment">// 没有配置懒执行</span></span><br><span class="line">    effect()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createReactiveEffect"><a href="#createReactiveEffect" class="headerlink" title="createReactiveEffect"></a>createReactiveEffect</h3><p>执行一个需要收集依赖的函数，返回一个 <code>effect</code> 类型的函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行一个需要收集依赖的函数，返回一个 effect 类型的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn Function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>options 配置参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveEffect</span>&lt;<span class="title">T</span> = <span class="title">any</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  fn: () =&gt; T,</span></span></span><br><span class="line"><span class="params"><span class="function">  options: ReactiveEffectOptions</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">ReactiveEffect</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 这个函数不会立即执行，是否执行，在 effect 函数中控制</span></span><br><span class="line">  <span class="comment">// 用户在 options 中配置了 lazy：true 可以让这个函数 在 effect 中不执行</span></span><br><span class="line">  <span class="keyword">const</span> effect = <span class="function"><span class="keyword">function</span> <span class="title">reactiveEffect</span>(<span class="params"></span>): <span class="title">unknown</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用了 stop 后会停止这个函数的依赖处理部分的继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (!effect.active) &#123;</span><br><span class="line">      <span class="keyword">return</span> options.scheduler ? <span class="literal">undefined</span> : fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保证函数不会重复执行</span></span><br><span class="line">    <span class="keyword">if</span> (!effectStack.includes(effect)) &#123;</span><br><span class="line">      cleanup(effect) <span class="comment">// 清除 函数的依赖相关</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        enableTracking() <span class="comment">// 启动依赖收集</span></span><br><span class="line">        effectStack.push(effect) <span class="comment">// 把当前函数 推到 effect 栈中</span></span><br><span class="line">        activeEffect = effect <span class="comment">// 这个就是依赖收集的时候，收集到的和依赖相关的函数</span></span><br><span class="line">        <span class="keyword">return</span> fn() <span class="comment">// fn 执行结束了，也就结束了依赖收集</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        effectStack.pop() <span class="comment">// 函数执行完，出栈</span></span><br><span class="line">        resetTracking() <span class="comment">// 恢复依赖收集，在 fn 中可能执行了 pauseTracking 方法，停止了依赖收集</span></span><br><span class="line">        activeEffect = effectStack[effectStack.length - <span class="number">1</span>] <span class="comment">// 下一次需要被依赖收集的函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">as</span> ReactiveEffect</span><br><span class="line">  effect.id = uid++</span><br><span class="line">  effect.allowRecurse = !!options.allowRecurse</span><br><span class="line">  effect._isEffect = <span class="literal">true</span></span><br><span class="line">  effect.active = <span class="literal">true</span></span><br><span class="line">  effect.raw = fn</span><br><span class="line">  effect.deps = []</span><br><span class="line">  effect.options = options</span><br><span class="line">  <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pauseTracking"><a href="#pauseTracking" class="headerlink" title="pauseTracking"></a>pauseTracking</h2><p>暂停依赖收集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暂停收集依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pauseTracking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  trackStack.push(shouldTrack)</span><br><span class="line">  shouldTrack = <span class="literal">false</span> <span class="comment">// shouldTrack 会停止依赖收集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="enableTracking"><a href="#enableTracking" class="headerlink" title="enableTracking"></a>enableTracking</h2><p>启动依赖收集</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enableTracking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  trackStack.push(shouldTrack)</span><br><span class="line">  shouldTrack = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="resetTracking"><a href="#resetTracking" class="headerlink" title="resetTracking"></a>resetTracking</h2><p>重置依赖收集，把依赖收集的状态恢复到上一次，默认是 <code>true</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重置依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetTracking</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> last = trackStack.pop()</span><br><span class="line">  shouldTrack = last === <span class="literal">undefined</span> ? <span class="literal">true</span> : last</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="track"><a href="#track" class="headerlink" title="track"></a>track</h2><p><strong>收集依赖</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收集依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>target 收集依赖的依赖源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 依赖的类型，可以是get、has、iterate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 依赖的哪个属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target: <span class="built_in">object</span>, <span class="keyword">type</span>: TrackOpTypes, key: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// shouldTrack 标识是否收集依赖，可以调用 pauseTracking 暂停收集依赖</span></span><br><span class="line">  <span class="comment">// activeEffect 渲染时是 当前组件的渲染任务</span></span><br><span class="line">  <span class="comment">// 在执行 effect 或者 watchEffect 时，调用了 ref.value(或者其他会获取依赖的方法)，就是当前 effect（或者其他方法）传递的函数</span></span><br><span class="line">  <span class="keyword">if</span> (!shouldTrack || activeEffect === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// targetMap 是 WeakMap 类型，在 依赖的源对象被垃圾回收后，会自动删除这个key</span></span><br><span class="line">  <span class="comment">// depsMap 是对 target 收集的依赖</span></span><br><span class="line">  <span class="comment">// depsMap 是一个 Map类型</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// dep 是 set 类型</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    <span class="comment">// 这里收集需要触发的依赖，使用set类型，保证没有重复的依赖</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * targetMap(WeakMap): &#123;</span></span><br><span class="line"><span class="comment">     *  target(Map): &#123;</span></span><br><span class="line"><span class="comment">     *    key(Set): []</span></span><br><span class="line"><span class="comment">     *  &#125;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    depsMap.set(key, (dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在这里把依赖收集起来</span></span><br><span class="line">  <span class="keyword">if</span> (!dep.has(activeEffect)) &#123;</span><br><span class="line">    dep.add(activeEffect)</span><br><span class="line">    activeEffect.deps.push(dep)</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; activeEffect.options.onTrack) &#123;</span><br><span class="line">      <span class="comment">// onTrack 只在开发的时候可以有效，可以用来追踪依赖收集</span></span><br><span class="line">      activeEffect.options.onTrack(&#123;</span><br><span class="line">        <span class="attr">effect</span>: activeEffect,</span><br><span class="line">        target,</span><br><span class="line">        <span class="keyword">type</span>,</span><br><span class="line">        key</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h2><p><strong>触发依赖，effect 的 <code>scheduler</code> 配置也是在这里被执行的</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发依赖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>target 触发依赖的数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type 触发依赖的类型可以是 set/add/delete/clear</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>key 触发依赖的 key，对应着收集依赖的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>newValue 新值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>oldValue 旧值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>oldTarget 旧的数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  target: <span class="built_in">object</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">type</span>: TriggerOpTypes,</span></span></span><br><span class="line"><span class="params"><span class="function">  key?: unknown,</span></span></span><br><span class="line"><span class="params"><span class="function">  newValue?: unknown,</span></span></span><br><span class="line"><span class="params"><span class="function">  oldValue?: unknown,</span></span></span><br><span class="line"><span class="params"><span class="function">  oldTarget?: <span class="built_in">Map</span>&lt;unknown, unknown&gt; | <span class="built_in">Set</span>&lt;unknown&gt;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// depsMap 获取到 target 对应的 Map 依赖源</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="comment">// 没有需要触发的依赖</span></span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="comment">// never been tracked</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effects = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;ReactiveEffect&gt;()</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">effectsToAdd: <span class="built_in">Set</span>&lt;ReactiveEffect&gt; | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectsToAdd) &#123;</span><br><span class="line">      effectsToAdd.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// allowRecurse 设置为 true 会导致函数被多次触发</span></span><br><span class="line">        <span class="keyword">if</span> (effect !== activeEffect || effect.allowRecurse) &#123;</span><br><span class="line">          <span class="comment">// 把依赖添加到 effects 中</span></span><br><span class="line">          effects.add(effect)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">type</span> === TriggerOpTypes.CLEAR) &#123;</span><br><span class="line">    <span class="comment">// collection being cleared</span></span><br><span class="line">    <span class="comment">// trigger all effects for target</span></span><br><span class="line">    <span class="comment">// 调用了 .clear 方法，触发 target 的所有依赖</span></span><br><span class="line">    depsMap.forEach(add)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&#x27;length&#x27;</span> &amp;&amp; isArray(target)) &#123;</span><br><span class="line">    <span class="comment">// 改变了 数组的 length</span></span><br><span class="line">    <span class="comment">// 要触发 被删除的 元素的 依赖 和 length 的依赖</span></span><br><span class="line">    depsMap.forEach(<span class="function">(<span class="params">dep, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;length&#x27;</span> || key &gt;= (newValue <span class="keyword">as</span> <span class="built_in">number</span>)) &#123;</span><br><span class="line">        add(dep)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// schedule runs for SET | ADD | DELETE</span></span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="built_in">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// depsMap.get(key) 是一个 Set</span></span><br><span class="line">      <span class="comment">// 触发 target 上 相关这个 key 的依赖，最普通的情况</span></span><br><span class="line">      add(depsMap.get(key))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// also run for iteration key on ADD | DELETE | Map.SET</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> TriggerOpTypes.ADD:</span><br><span class="line">        <span class="comment">// 添加事件触发</span></span><br><span class="line">        <span class="keyword">if</span> (!isArray(target)) &#123;</span><br><span class="line">          <span class="comment">// 数组的遍历要触发</span></span><br><span class="line">          add(depsMap.get(ITERATE_KEY))</span><br><span class="line">          <span class="keyword">if</span> (isMap(target)) &#123;</span><br><span class="line">            <span class="comment">// map 的编辑需要触发</span></span><br><span class="line">            add(depsMap.get(MAP_KEY_ITERATE_KEY))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIntegerKey(key)) &#123;</span><br><span class="line">          <span class="comment">// 数组添加一项</span></span><br><span class="line">          <span class="comment">// new index added to array -&gt; length changes</span></span><br><span class="line">          <span class="comment">// 数组长度变化，需要触发 length 的相关依赖</span></span><br><span class="line">          add(depsMap.get(<span class="string">&#x27;length&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> TriggerOpTypes.DELETE:</span><br><span class="line">        <span class="comment">// 删除事件触发</span></span><br><span class="line">        <span class="keyword">if</span> (!isArray(target)) &#123;</span><br><span class="line">          <span class="comment">// 数组遍历事件触发</span></span><br><span class="line">          add(depsMap.get(ITERATE_KEY))</span><br><span class="line">          <span class="keyword">if</span> (isMap(target)) &#123;</span><br><span class="line">            <span class="comment">// map 遍历事件触发</span></span><br><span class="line">            add(depsMap.get(MAP_KEY_ITERATE_KEY))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> TriggerOpTypes.SET:</span><br><span class="line">        <span class="keyword">if</span> (isMap(target)) &#123;</span><br><span class="line">          <span class="comment">// 触发 map 的遍历</span></span><br><span class="line">          add(depsMap.get(ITERATE_KEY))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> run = <span class="function">(<span class="params">effect: ReactiveEffect</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// onTrigger 开发环境可以用</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; effect.options.onTrigger) &#123;</span><br><span class="line">      effect.options.onTrigger(&#123;</span><br><span class="line">        effect,</span><br><span class="line">        target,</span><br><span class="line">        key,</span><br><span class="line">        <span class="keyword">type</span>,</span><br><span class="line">        newValue,</span><br><span class="line">        oldValue,</span><br><span class="line">        oldTarget</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (effect.options.scheduler) &#123;</span><br><span class="line">      <span class="comment">// 如果 effect 中设置了 scheduler，调用这个方法，自定义是否需要触发依赖</span></span><br><span class="line">      <span class="comment">// effect 和 watchEffect 方法可以设置，其他方法（watch）??? TODO</span></span><br><span class="line">      effect.options.scheduler(effect)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用所有依赖添加的函数</span></span><br><span class="line">  effects.forEach(run)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;源码位置： &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts&quot;&gt;https://github.com/vuejs/vue</summary>
      
    
    
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="effect" scheme="https://wukang0718.com/tags/effect/"/>
    
  </entry>
  
  <entry>
    <title>createApp源码</title>
    <link href="https://wukang0718.com/2022/09/02/createApp%E6%BA%90%E7%A0%81/"/>
    <id>https://wukang0718.com/2022/09/02/createApp%E6%BA%90%E7%A0%81/</id>
    <published>2022-09-02T08:52:20.000Z</published>
    <updated>2022-09-02T08:58:32.110Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>源码位置：<a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-dom/src/index.ts">https://github.com/vuejs/vue-next/blob/master/packages/runtime-dom/src/index.ts</a></p></blockquote><blockquote><p>都是源码，比较干。。。</p><p>v 3.0.4</p></blockquote><p>代码实现：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * createApp 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createApp = (<span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> app = ensureRenderer().createApp(...args)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发环境 校验 组件的 name 是不是内置的标签同名</span></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    injectNativeTagCheck(app)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; mount &#125; = app</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 重写了 mount 函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>containerOrSelector </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  app.mount = (containerOrSelector: Element | ShadowRoot | <span class="built_in">string</span>): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// container 是真实的 DOM 元素</span></span><br><span class="line">    <span class="keyword">const</span> container = normalizeContainer(containerOrSelector)</span><br><span class="line">    <span class="keyword">if</span> (!container) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> component = app._component <span class="comment">// 组件的options</span></span><br><span class="line">    <span class="comment">// 默认 组件的 template 是 挂载元素的内容</span></span><br><span class="line">    <span class="keyword">if</span> (!isFunction(component) &amp;&amp; !component.render &amp;&amp; !component.template) &#123;</span><br><span class="line">      component.template = container.innerHTML</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空 容器中的内容</span></span><br><span class="line">    container.innerHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> proxy = mount(container)</span><br><span class="line">    <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">      <span class="comment">// 删除元素上的 v-cloak 指令</span></span><br><span class="line">      container.removeAttribute(<span class="string">&#x27;v-cloak&#x27;</span>)</span><br><span class="line">      container.setAttribute(<span class="string">&#x27;data-v-app&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;) <span class="keyword">as</span> CreateAppFunction&lt;Element&gt;</span><br></pre></td></tr></table></figure><p>调用 <code>ensureRenderer().createApp(...args)</code> 方法，获取到了 <code>app</code> 的实例；然后重写了 <code>app</code> 的 <code>mount</code> 方法，在新的 <code>mount</code> 方法中，先对 <code>container</code> 做了一次处理（如果传的是css选择器，通过 <code> document.querySelector</code> 方法获取到的DOM元素 ），让 <code>container</code> 是一个真实的 <code>DOM元素</code>。</p><p>在组件不是一个函数，并且没有设置 <code>render</code> 函数和 <code>tempalte</code> 参数的时候，默认 <code>container</code> 中的 <code>innerHTML</code> 就是组件的 <code>template</code>。</p><p>调用 <code>app</code> 中返回的 <code>mount</code> 方法，完成 <code>DOM</code> 的挂载</p><h3 id="ensureRenderer"><a href="#ensureRenderer" class="headerlink" title="ensureRenderer"></a>ensureRenderer</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 惰性 创建 renderer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureRenderer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> renderer || (renderer = createRenderer&lt;Node, Element&gt;(rendererOptions))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>惰性创建 <code>renderer</code> 对象，这个对象的创建和运行的平台有关系，在 WEB 平台时，参数 <code>rendererOptions</code> 这个是 <code>DOM</code> 操作的 API</p><h3 id="createRenderer"><a href="#createRenderer" class="headerlink" title="createRenderer"></a>createRenderer</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRenderer</span>&lt;</span></span><br><span class="line"><span class="function">  <span class="title">HostNode</span> = <span class="title">RendererNode</span>,</span></span><br><span class="line"><span class="function">  <span class="title">HostElement</span> = <span class="title">RendererElement</span></span></span><br><span class="line"><span class="function">&gt;(<span class="params">options: RendererOptions&lt;HostNode, HostElement&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> baseCreateRenderer&lt;HostNode, HostElement&gt;(options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法直接返回了 <code>baseCreateRenderer</code> 方法，<code>baseCreateRenderer</code>  方法有几个重载的方法。</p><h3 id="baseCreateRenderer"><a href="#baseCreateRenderer" class="headerlink" title="baseCreateRenderer"></a>baseCreateRenderer</h3><blockquote><p>源码位置： <a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/renderer.ts">https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/renderer.ts</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseCreateRenderer</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  options: RendererOptions,</span></span></span><br><span class="line"><span class="params"><span class="function">  createHydrationFns?: <span class="keyword">typeof</span> createHydrationFunctions</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">// WEB 平台获取到的是操作 DOM 的方法</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">insert</span>: hostInsert,</span><br><span class="line">    <span class="attr">remove</span>: hostRemove,</span><br><span class="line">    <span class="attr">patchProp</span>: hostPatchProp,</span><br><span class="line">    <span class="attr">forcePatchProp</span>: hostForcePatchProp,</span><br><span class="line">    <span class="attr">createElement</span>: hostCreateElement,</span><br><span class="line">    <span class="attr">createText</span>: hostCreateText,</span><br><span class="line">    <span class="attr">createComment</span>: hostCreateComment,</span><br><span class="line">    <span class="attr">setText</span>: hostSetText,</span><br><span class="line">    <span class="attr">setElementText</span>: hostSetElementText,</span><br><span class="line">    <span class="attr">parentNode</span>: hostParentNode,</span><br><span class="line">    <span class="attr">nextSibling</span>: hostNextSibling,</span><br><span class="line">    <span class="attr">setScopeId</span>: hostSetScopeId = NOOP,</span><br><span class="line">    <span class="attr">cloneNode</span>: hostCloneNode,</span><br><span class="line">    <span class="attr">insertStaticContent</span>: hostInsertStaticContent</span><br><span class="line">  &#125; = options</span><br><span class="line">  <span class="keyword">const</span> patch = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> processText = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> processCommentNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> mountStaticNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchStaticNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> moveStaticNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> removeStaticNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> processElement = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> mountElement = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> setScopeId = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> mountChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchElement = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchBlockChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchProps = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> processFragment = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> processComponent = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> mountComponent = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> updateComponent = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> setupRenderEffect = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> updateComponentPreRender = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchUnkeyedChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> patchKeyedChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> move = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> unmount = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> remove = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> removeFragment = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> unmountComponent = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> unmountChildren = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> getNextHostNode = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">const</span> render = <span class="function">() =&gt;</span> &#123;...&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    render,</span><br><span class="line">    hydrate,</span><br><span class="line">    <span class="comment">// createApp 入口</span></span><br><span class="line">    <span class="attr">createApp</span>: createAppAPI(render, hydrate)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>createApp</code> 中调用了 <code>ensureRenderer().createApp(...args)</code> 方法获取 <code>app</code> 的实例，就是 <code>baseCreateRenderer</code> 返回的对象中的 <code>createApp</code> 函数，通过 <code>createAppAPI</code> 函数生成的一个函数</p><h3 id="createAppAPI"><a href="#createAppAPI" class="headerlink" title="createAppAPI"></a>createAppAPI</h3><blockquote><p>源码位置：<a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/apiCreateApp.ts">https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/apiCreateApp.ts</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 app 实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>render </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>hydrate </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createAppAPI</span>&lt;<span class="title">HostElement</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  render: RootRenderFunction,</span></span></span><br><span class="line"><span class="params"><span class="function">  hydrate?: RootHydrateFunction</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">CreateAppFunction</span>&lt;<span class="title">HostElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 接收两个参数</span></span><br><span class="line"><span class="comment">   * rootComponent 根组件</span></span><br><span class="line"><span class="comment">   * rootProps 传递给根组件的 props </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">rootComponent, rootProps = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = createAppContext() <span class="comment">// 返回一个对象</span></span><br><span class="line">    <span class="comment">// 安装的插件</span></span><br><span class="line">    <span class="keyword">const</span> installedPlugins = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="comment">// 是否挂载</span></span><br><span class="line">    <span class="keyword">let</span> isMounted = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> app = (context.app = &#123;</span><br><span class="line">        <span class="attr">_uid</span>: uid++, <span class="comment">// 唯一id</span></span><br><span class="line">        _component: rootComponent <span class="keyword">as</span> ConcreteComponent,</span><br><span class="line">        <span class="attr">_props</span>: rootProps,</span><br><span class="line">        <span class="attr">_container</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">_context</span>: context,</span><br><span class="line"></span><br><span class="line">        version, <span class="comment">// vue 版本</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span> <span class="title">config</span>() &#123; <span class="comment">// config 是一个只读对象，设置 config 在开发环境会报警告</span></span><br><span class="line">            <span class="keyword">return</span> context.config</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">use</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line">        <span class="function"><span class="title">mixin</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line"><span class="function"><span class="title">component</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line">        <span class="function"><span class="title">directive</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line">        <span class="function"><span class="title">mount</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line">        <span class="function"><span class="title">unmount</span>(<span class="params"></span>)</span> &#123;...&#125;,</span><br><span class="line">        <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span> &#123;...&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>runtime-dom</code> 的 <code>createApp</code> 中，重写了 <code>mount</code> 方法，在其中调用了 <code>app.mount</code> 方法。</p><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件挂载</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>rootContainer </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param </span>isHydrate </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">mount(rootContainer: HostElement, isHydrate?: <span class="built_in">boolean</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isMounted) &#123;</span><br><span class="line">        <span class="comment">// 创建 vnode 节点   </span></span><br><span class="line">        <span class="keyword">const</span> vnode = createVNode(</span><br><span class="line">            rootComponent <span class="keyword">as</span> ConcreteComponent,</span><br><span class="line">            rootProps</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 节点的 vnode 挂载 context</span></span><br><span class="line">        vnode.appContext = context</span><br><span class="line">        <span class="comment">// 忽略其他平台的执行，和开发环境的警告</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 执行 render 函数</span></span><br><span class="line">        render(vnode, rootContainer)</span><br><span class="line">        isMounted = <span class="literal">true</span></span><br><span class="line">        app._container = rootContainer</span><br><span class="line">        <span class="comment">// 返回 ???</span></span><br><span class="line">        <span class="keyword">return</span> vnode.component!.proxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>mount</code> 方法中，执行了 <code>createVNode</code> 方法创建了一个 组件的 <code>vnode</code>，然后执行了 <code>render</code> 方法。</p><h3 id="createVNode"><a href="#createVNode" class="headerlink" title="createVNode"></a>createVNode</h3><p>创建 <code>vnode</code> 节点</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createVNode = (__DEV__</span><br><span class="line">  ? createVNodeWithArgsTransform</span><br><span class="line">  : _createVNode) <span class="keyword">as</span> <span class="keyword">typeof</span> _createVNode</span><br></pre></td></tr></table></figure><p>不考虑开发环境的情况，直接看 <code>_createVNode</code> 方法</p><h3 id="createVNode-1"><a href="#createVNode-1" class="headerlink" title="_createVNode"></a>_createVNode</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 vnode 的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>type </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>props </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>children </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>patchFlag </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>dynamicProps </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isBlockNode </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createVNode</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">type</span>: VNodeTypes | ClassComponent | <span class="keyword">typeof</span> NULL_DYNAMIC_COMPONENT,</span></span></span><br><span class="line"><span class="params"><span class="function">  props: (Data &amp; VNodeProps) | <span class="literal">null</span> = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  children: unknown = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  patchFlag: <span class="built_in">number</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  dynamicProps: <span class="built_in">string</span>[] | <span class="literal">null</span> = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  isBlockNode = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isVNode(<span class="keyword">type</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果 type 已经是一个 vnode，返回 clone 的 vnode</span></span><br><span class="line">    <span class="keyword">const</span> cloned = cloneVNode(<span class="keyword">type</span>, props, <span class="literal">true</span> <span class="comment">/* mergeRef: true */</span>)</span><br><span class="line">    <span class="keyword">if</span> (children) &#123;</span><br><span class="line">      normalizeChildren(cloned, children)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloned</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理 class 组件，vue3 中已经取消了 class 组件</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// class &amp; style normalization.</span></span><br><span class="line">  <span class="comment">// 处理 props class 转成 字符串, style 转成 对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// encode the vnode type information into a bitmap</span></span><br><span class="line">  <span class="keyword">const</span> shapeFlag = isString(<span class="keyword">type</span>)</span><br><span class="line">    ? ShapeFlags.ELEMENT</span><br><span class="line">    : __FEATURE_SUSPENSE__ &amp;&amp; isSuspense(<span class="keyword">type</span>)</span><br><span class="line">      ? ShapeFlags.SUSPENSE</span><br><span class="line">      : isTeleport(<span class="keyword">type</span>)</span><br><span class="line">        ? ShapeFlags.TELEPORT</span><br><span class="line">        : isObject(<span class="keyword">type</span>)</span><br><span class="line">          ? ShapeFlags.STATEFUL_COMPONENT</span><br><span class="line">          : isFunction(<span class="keyword">type</span>)</span><br><span class="line">            ? ShapeFlags.FUNCTIONAL_COMPONENT</span><br><span class="line">            : <span class="number">0</span></span><br><span class="line">  <span class="comment">// 新的 vnode 节点</span></span><br><span class="line">  <span class="keyword">const</span> vnode: VNode = &#123;</span><br><span class="line">    <span class="attr">__v_isVNode</span>: <span class="literal">true</span>,</span><br><span class="line">    [ReactiveFlags.SKIP]: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">type</span>,</span><br><span class="line">    props,</span><br><span class="line">    <span class="attr">key</span>: props &amp;&amp; normalizeKey(props),</span><br><span class="line">    <span class="attr">ref</span>: props &amp;&amp; normalizeRef(props),</span><br><span class="line">    <span class="attr">scopeId</span>: currentScopeId,</span><br><span class="line">    <span class="attr">children</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">suspense</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">ssContent</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">ssFallback</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">dirs</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">transition</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">el</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">anchor</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">targetAnchor</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">staticCount</span>: <span class="number">0</span>,</span><br><span class="line">    shapeFlag,</span><br><span class="line">    patchFlag,</span><br><span class="line">    dynamicProps,</span><br><span class="line">    <span class="attr">dynamicChildren</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">appContext</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// validate key 校验 key 不是 NaN</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  normalizeChildren(vnode, children)</span><br><span class="line">  <span class="keyword">if</span> (__FEATURE_SUSPENSE__ &amp;&amp; shapeFlag &amp; ShapeFlags.SUSPENSE) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; content, fallback &#125; = normalizeSuspenseChildren(vnode)</span><br><span class="line">    vnode.ssContent = content</span><br><span class="line">    vnode.ssFallback = fallback</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    shouldTrack &gt; <span class="number">0</span> </span><br><span class="line">    !isBlockNode &amp;&amp;</span><br><span class="line">    currentBlock &amp;&amp;</span><br><span class="line">    (patchFlag &gt; <span class="number">0</span> || shapeFlag &amp; ShapeFlags.COMPONENT) &amp;&amp;</span><br><span class="line">    patchFlag !== PatchFlags.HYDRATE_EVENTS</span><br><span class="line">  ) &#123;</span><br><span class="line">    currentBlock.push(vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回了一个新的 <code>vnode</code>，即使传入的参数已经是一个 <code>vnode</code> 节点，也会 clone 一份新的 <code>vnode</code> 节点，并返回。</p><p>然后看在 <code>mount</code> 中调用的另一个方法 <code>render</code></p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p><code>mount</code>中调用的这个 <code>render</code>  方法是在调用 <code>createAppAPI</code> 方法 的时候，传入的参数。也就是 <code>baseCreateRenderer</code> 方法中定义的 <code>render</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> render: RootRenderFunction = <span class="function">(<span class="params">vnode, container</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// vnode === null 卸载组件</span></span><br><span class="line">    <span class="keyword">if</span> (vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (container._vnode) &#123;</span><br><span class="line">            <span class="comment">// 卸载组件需要执行</span></span><br><span class="line">            unmount(container._vnode, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// patch 更新和或者创建组件</span></span><br><span class="line">        patch(container._vnode || <span class="literal">null</span>, vnode, container)</span><br><span class="line">    &#125;</span><br><span class="line">    flushPostFlushCbs()</span><br><span class="line">    <span class="comment">// 保存组件的 vnode</span></span><br><span class="line">    container._vnode = vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>render</code> 方法中通过 <code>patch</code> 方法，将 <code>vnode</code> 转化成真实的 <code>DOM</code>，并挂载在页面上。</p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> patch: PatchFn = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  n1,</span></span></span><br><span class="line"><span class="params"><span class="function">  n2,</span></span></span><br><span class="line"><span class="params"><span class="function">  container,</span></span></span><br><span class="line"><span class="params"><span class="function">  anchor = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentComponent = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentSuspense = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  isSVG = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  optimized = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 新旧节点类型不同的时候，直接删除旧的节点</span></span><br><span class="line">  <span class="keyword">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) &#123;</span><br><span class="line">    anchor = getNextHostNode(n1)</span><br><span class="line">    unmount(n1, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">    n1 = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="keyword">type</span>, ref, shapeFlag &#125; = n2</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> Text:</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Comment:</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Static:</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> Fragment:</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="comment">// 处理其他类型的节点</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; ShapeFlags.COMPONENT) &#123;</span><br><span class="line">        processComponent( <span class="comment">// 处理component</span></span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理 绑定的 ref</span></span><br><span class="line">  <span class="keyword">if</span> (ref != <span class="literal">null</span> &amp;&amp; parentComponent) &#123;</span><br><span class="line">    setRef(ref, n1 &amp;&amp; n1.ref, parentSuspense, n2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>patch</code> 过程中，会根据 <code>vnode</code> 的 <code>type</code> 不同，调用不同的处理节点的方法，这里主要看处理 <code>component</code> 的方法 <code>processComponent</code>，因为这里会执行 <code>setup</code> 和收集依赖。</p><h4 id="processComponent"><a href="#processComponent" class="headerlink" title="processComponent"></a>processComponent</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> processComponent = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    n1: VNode | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    n2: VNode,</span></span></span><br><span class="line"><span class="params"><span class="function">    container: RendererElement,</span></span></span><br><span class="line"><span class="params"><span class="function">    anchor: RendererNode | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    isSVG: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    optimized: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// 挂载 component</span></span><br><span class="line">        mountComponent(</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 更新组件</span></span><br><span class="line">      updateComponent(n1, n2, optimized)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看出创建组件使用了 <code>mountComponent</code> 方法，更新组件使用了 <code>updateComponent</code>  方法，先看 <code>mountComponent</code>，再看 <code>updateComponent</code>。</p><h4 id="mountComponent"><a href="#mountComponent" class="headerlink" title="mountComponent"></a>mountComponent</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mountComponent: MountComponentFn = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    initialVNode,</span></span></span><br><span class="line"><span class="params"><span class="function">    container,</span></span></span><br><span class="line"><span class="params"><span class="function">    anchor,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentComponent,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">    isSVG,</span></span></span><br><span class="line"><span class="params"><span class="function">    optimized</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// createComponentInstance 会对 instance 做处理, ctx 的不一致，就是在这个方法处理的</span></span><br><span class="line">    <span class="keyword">const</span> instance: ComponentInternalInstance = (initialVNode.component = createComponentInstance(</span><br><span class="line">      initialVNode,</span><br><span class="line">      parentComponent,</span><br><span class="line">      parentSuspense</span><br><span class="line">    ))</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 这里调用 setup 方法，setup 返回的值，会保存在 instance.setupState 中</span></span><br><span class="line">    setupComponent(instance)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (__FEATURE_SUSPENSE__ &amp;&amp; instance.asyncDep) &#123;</span><br><span class="line">      <span class="comment">// 处理 setup 是 promise 的情况，在 promise 的状态 resolve 之后，才执行 setupRenderEffect 函数</span></span><br><span class="line">      parentSuspense &amp;&amp; parentSuspense.registerDep(instance, setupRenderEffect)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setupRenderEffect(</span><br><span class="line">      instance,</span><br><span class="line">      initialVNode,</span><br><span class="line">      container,</span><br><span class="line">      anchor,</span><br><span class="line">      parentSuspense,</span><br><span class="line">      isSVG,</span><br><span class="line">      optimized</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个方法里通过 <code>createComponentInstance</code> 生成了 <code>instance</code> </p><p>这个 <code>instance</code> 是通过 <code>getCurrentInstance</code> 获取到的 <code>instance</code> ，<code>instance</code> 的 <code>ctx</code> 属性，在 <code>dev</code> 环境和 <code>prod</code> 是两个东西，<strong>生产环境中不要使用</strong></p><p>函数最后执行了 <code>setupRenderEffect</code> 方法，在这个方法的执行过程中，会收集 <code>vnode</code> 中使用到的依赖</p><h5 id="createComponentInstance"><a href="#createComponentInstance" class="headerlink" title="createComponentInstance"></a>createComponentInstance</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createComponentInstance</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  vnode: VNode,</span></span></span><br><span class="line"><span class="params"><span class="function">  parent: ComponentInternalInstance | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  suspense: SuspenseBoundary | <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> instance: ComponentInternalInstance = &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 开发环境对 ctx 做的特殊处理</span></span><br><span class="line">  <span class="comment">// 项目开发中不能使用这个 ctx，生产环境不支持</span></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    instance.ctx = createRenderContext(instance)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    instance.ctx = &#123; <span class="attr">_</span>: instance &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  instance.root = parent ? parent.root : instance</span><br><span class="line">  instance.emit = emit.bind(<span class="literal">null</span>, instance)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setupRenderEffect"><a href="#setupRenderEffect" class="headerlink" title="setupRenderEffect"></a>setupRenderEffect</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setupRenderEffect: SetupRenderEffectFn = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  instance,</span></span></span><br><span class="line"><span class="params"><span class="function">  initialVNode,</span></span></span><br><span class="line"><span class="params"><span class="function">  container,</span></span></span><br><span class="line"><span class="params"><span class="function">  anchor,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">  isSVG,</span></span></span><br><span class="line"><span class="params"><span class="function">  optimized</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  instance.update = effect(<span class="function"><span class="keyword">function</span> <span class="title">componentEffect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 新建组件</span></span><br><span class="line">    <span class="keyword">if</span> (!instance.isMounted) &#123;</span><br><span class="line">      <span class="keyword">let</span> vnodeHook: VNodeHook | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">const</span> &#123; el, props &#125; = initialVNode</span><br><span class="line">      <span class="comment">// 对子节点处理  这里会执行 组件的 render 函数</span></span><br><span class="line">      <span class="comment">// render 函数对 ref / reactive 的值的获取，都会把当前函数作为依赖变更需要触发的函数收集</span></span><br><span class="line">      <span class="keyword">const</span> subTree = (instance.subTree = renderComponentRoot(instance))</span><br><span class="line">      patch( <span class="comment">// 这个patch执行会完成DOM的挂载</span></span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          subTree,</span><br><span class="line">          container,</span><br><span class="line">          anchor,</span><br><span class="line">          instance,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG</span><br><span class="line">        )</span><br><span class="line">        initialVNode.el = subTree.el</span><br><span class="line">      instance.isMounted = <span class="literal">true</span></span><br><span class="line">      initialVNode = container = anchor = <span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 更新组件</span></span><br><span class="line">      <span class="keyword">let</span> &#123; next, bu, u, parent, vnode &#125; = instance</span><br><span class="line">      <span class="keyword">let</span> originNext = next</span><br><span class="line">      <span class="keyword">let</span> vnodeHook: VNodeHook | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line">      <span class="keyword">const</span> nextTree = renderComponentRoot(instance)</span><br><span class="line">      <span class="keyword">const</span> prevTree = instance.subTree</span><br><span class="line">      instance.subTree = nextTree</span><br><span class="line">      patch(</span><br><span class="line">        prevTree,</span><br><span class="line">        nextTree,</span><br><span class="line">        <span class="comment">// parent may have changed if it&#x27;s in a teleport</span></span><br><span class="line">        hostParentNode(prevTree.el!)!,</span><br><span class="line">        <span class="comment">// anchor may have changed if it&#x27;s in a fragment</span></span><br><span class="line">        getNextHostNode(prevTree),</span><br><span class="line">        instance,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG</span><br><span class="line">      )</span><br><span class="line">      next.el = nextTree.el</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, __DEV__ ? createDevEffectOptions(instance) : prodEffectOptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setupRenderEffect</code> 函数执行会调用 <code>effect</code> 函数，只有在 <code>effect</code> 中执行的函数，才可以做依赖收集，通过 <code>renderComponentRoot</code> 方法创建组件的子节点，这个方法执行了组件的 <code>render</code> 方法，<code>render</code>方法中对 <code>reactive</code> 类型的值的获取和 <code>ref</code>  / <code>computed</code> 类型的 <code>.value</code> 的获取，都会把这个 <code>effect</code> 函数作为变更的依赖做收集。</p><p>在执行 <code>effect</code> 的时候，传递了第二个参数 <code>prodEffectOptions</code>，这个参数中，有一个 <code>scheduler</code> 方法，这个是依赖更新之后会调用的调度器，这个调度器决定什么时候执行 <code>DOM</code> 更新，而不是每次依赖变化都对 <code>DOM</code> 做修改。</p><p>在这个方法也会执行 <code>beforeMount</code> 的 hooks 函数，之后执行的 <code>renderComponentRoot</code>  结束之后，再次执行一个 <code>patch</code> 方法，这个方法中，完成了组件创建到 <code>DOM</code> 的动作。并且对组件模板中绑定的 <code>ref</code> 做处理。通过 <code>setRef</code> 方法。</p><p>在之后执行了 <code>mounted</code> 的 hooks 函数。</p><p>组件的渲染就结束了！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;源码位置：&lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/runtime-dom/src/index.ts&quot;&gt;https://github.com/vuejs/vue-</summary>
      
    
    
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="createApp" scheme="https://wukang0718.com/tags/createApp/"/>
    
  </entry>
  
  <entry>
    <title>项目升级到vue3之后build执行两遍打包</title>
    <link href="https://wukang0718.com/2022/04/25/%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E5%88%B0vue3%E4%B9%8B%E5%90%8Ebuild%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D%E6%89%93%E5%8C%85/"/>
    <id>https://wukang0718.com/2022/04/25/%E9%A1%B9%E7%9B%AE%E5%8D%87%E7%BA%A7%E5%88%B0vue3%E4%B9%8B%E5%90%8Ebuild%E6%89%A7%E8%A1%8C%E4%B8%A4%E9%81%8D%E6%89%93%E5%8C%85/</id>
    <published>2022-04-25T03:16:31.000Z</published>
    <updated>2022-04-25T03:19:45.869Z</updated>
    
    <content type="html"><![CDATA[<p>vue2 项目升级到vue3之后<code>npm run build</code>执行两遍打包</p><blockquote><p> 实际是在 <code>@vue/cli-service</code>升级到5.0版本之后出现的问题</p></blockquote><h3 id="先说解决方法"><a href="#先说解决方法" class="headerlink" title="先说解决方法"></a>先说解决方法</h3><p>两种办法</p><ol><li>执行 <code>build</code> 的时候加一个 <code>--no-module</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue-cli-service build --no-module</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>browserslist</code>，一般在 <code>package.json</code> 中或者单独的 <code>.browserslistrc</code> 文件中，添加一个 <code>not ie 11</code></li></ol><p>package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;browserslist&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not dead&quot;</span>,</span><br><span class="line">    <span class="string">&quot;not ie 11&quot;</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>.browserslistrc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>%</span><br><span class="line">last <span class="number">2</span> versions</span><br><span class="line">not dead</span><br><span class="line">not ie <span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>通过执行 <code>npm run build</code> 的时候打印的日志可以发现两次打包之前都输出了不一样的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building legacy bundle <span class="keyword">for</span> production...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building module bundle <span class="keyword">for</span> production...</span><br></pre></td></tr></table></figure><p>正常只执行一次的打包只会输出一种日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building <span class="keyword">for</span> production...</span><br></pre></td></tr></table></figure><p>然后我们根据日志输出的关键字在 <code>@vue/cli-service</code> 项目中查找一下，我们执行的是 <code>build</code> 命令，所以先看这个命令的文件 <code>@vue/cli-service/lib/commands/build/index.js</code>，搜索一下关键字 <code>legacy bundle</code> 会查找到第 116 行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.target === <span class="string">&#x27;app&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bundleTag = args.needsDifferentialLoading</span><br><span class="line">      ? args.moduleBuild</span><br><span class="line">        ? <span class="string">`module bundle `</span></span><br><span class="line">        : <span class="string">`legacy bundle `</span></span><br><span class="line">      : <span class="string">``</span></span><br><span class="line">    logWithSpinner(<span class="string">`Building <span class="subst">$&#123;bundleTag&#125;</span>for <span class="subst">$&#123;mode&#125;</span>...`</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>发现当 <code>args.needsDifferentialLoading</code> 为 <code>true</code> 的时候就会出现打包两次所出现的日志，所以基本可以肯定问题出在这个上，继续找一下它的复制，往上查找，在67行发现了赋值语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args.needsDifferentialLoading = needsDifferentialLoading</span><br></pre></td></tr></table></figure><p>继续查找 <code>needsDifferentialLoading</code> 变量声明和赋值的地方，往上看就可以看到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; allProjectTargetsSupportModule &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../util/targets&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> needsDifferentialLoading = args.target === <span class="string">&#x27;app&#x27;</span> &amp;&amp; args.module</span><br><span class="line"><span class="keyword">if</span> (allProjectTargetsSupportModule) &#123;</span><br><span class="line">  log(</span><br><span class="line">    <span class="string">`All browser targets in the browserslist configuration have supported ES module.\n`</span> +</span><br><span class="line">    <span class="string">`Therefore we don&#x27;t build two separate bundles for differential loading.\n`</span></span><br><span class="line">  )</span><br><span class="line">  needsDifferentialLoading = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>needsDifferentialLoading</code> 初始值如果 <code>args.module</code> 是 <code>false</code> 的话就是 <code>false</code> </p><blockquote><p>在正常的项目开发中 <code>arr.target</code> 的值一定是 <code>app</code>，如果开发的是插件的话，那么一般在打包的时候会指定 <code>--target lib</code></p></blockquote><p>还有就是如果 <code>allProjectTargetsSupportModule</code> 这个值是true的话， <code>needsDifferentialLoading</code> 会被手动赋值成 <code>false</code> ，于是我们发现了两个可以让 <code>needsDifferentialLoading</code> 是 <code>false</code> 的方法</p><h4 id="–no-module的原理"><a href="#–no-module的原理" class="headerlink" title="–no-module的原理"></a>–no-module的原理</h4><p>先查找 <code>args.module</code> 的复制，会发现没有直接的赋值，<code>args</code>是整个回调函数的参数，而且在下面还给 <code>args</code>中没有的部分值，附上了默认参数，第23行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">api.registerCommand(<span class="string">&#x27;build&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">description</span>: <span class="string">&#x27;build for production&#x27;</span>,</span><br><span class="line">    <span class="attr">usage</span>: <span class="string">&#x27;vue-cli-service build [options] [entry|pattern]&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="string">&#x27;--no-module&#x27;</span>: <span class="string">`build app without generating &lt;script type=&quot;module&quot;&gt; chunks for modern browsers`</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="keyword">async</span> (args, rawArgs) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> defaults) &#123;</span><br><span class="line">      <span class="keyword">if</span> (args[key] == <span class="literal">null</span>) &#123;</span><br><span class="line">        args[key] = defaults[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// defaults 第一行</span></span><br><span class="line"><span class="keyword">const</span> defaults = &#123;</span><br><span class="line">  <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">  <span class="attr">module</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">formats</span>: <span class="string">&#x27;commonjs,umd,umd-min&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>defaults</code> 中给了 <code>module</code> 一个默认值<code>true</code>， 那怎么让 <code>module</code> 变成 <code>false</code> 呢，其实可以看到 <code>options</code> 中有一项 <code>--no-module</code> 的描述是: 构建应用程序，无需为现代浏览器生成&lt; script type=”module “ &gt;，到这里基本就能猜到了加个 <code>--no-module</code> 就可以把 <code>module</code> 赋值成 <code>false</code> 了，但猜到归猜到了，我们还是看一下具体的实现吧。</p><ol><li><p>从 <code>package.json</code> 中确定程序执行的入口 <code>bin/vue-cli-service.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;bin&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;vue-cli-service&quot;</span>: <span class="string">&quot;bin/vue-cli-service.js&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在 <code>bin/vue-cli-service.js</code> 中通过 <code>minimist</code> 解析了参数，并创建了 <code>Service</code> 的实例，并调用了 <code>run</code> 方法，并传入了解析后的参数</p><blockquote><p><strong><code>minimist</code> 会把参数中以 <code>--no-</code> 开头的参数，解析为 <code>false</code></strong></p></blockquote><p>minimist/index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/^--no-.+/</span>.test(arg)) &#123;</span><br><span class="line">  <span class="keyword">var</span> key = arg.match(<span class="regexp">/^--no-(.+)/</span>)[<span class="number">1</span>];</span><br><span class="line">  setArg(key, <span class="literal">false</span>, arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bin/vue-cli-service.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">&#x27;../lib/Service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> Service(process.env.VUE_CLI_CONTEXT || process.cwd())</span><br><span class="line"><span class="keyword">const</span> rawArgv = process.argv.slice(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> args = <span class="built_in">require</span>(<span class="string">&#x27;minimist&#x27;</span>)(rawArgv, &#123;<span class="comment">/*...*/</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> command = args._[<span class="number">0</span>]</span><br><span class="line">service.run(command, args, rawArgv)</span><br></pre></td></tr></table></figure></li><li><p><code>Service</code> 在实例化的时候，添加了内置的 <code>plugin</code> 其中就包括了 <code>./command/build</code> 命令</p><p>lib/Service.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params">context, &#123; plugins, pkg, inlineOptions, useBuiltIn &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">this</span>.commands = &#123;&#125;</span><br><span class="line">    <span class="built_in">this</span>.plugins = <span class="built_in">this</span>.resolvePlugins(plugins, useBuiltIn)</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="title">resolvePlugins</span>(<span class="params">inlinePlugins, useBuiltIn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> idToPlugin = <span class="function">(<span class="params">id, absolutePath</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">id</span>: id.replace(<span class="regexp">/^.\//</span>, <span class="string">&#x27;built-in:&#x27;</span>),</span><br><span class="line">      <span class="attr">apply</span>: <span class="built_in">require</span>(absolutePath || id)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> plugins</span><br><span class="line">    <span class="keyword">const</span> builtInPlugins = [</span><br><span class="line">      <span class="string">&#x27;./commands/build&#x27;</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ].map(<span class="function">(<span class="params">id</span>) =&gt;</span> idToPlugin(id))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inlinePlugins) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> projectPlugins = <span class="comment">// ...</span></span><br><span class="line">      plugins = builtInPlugins.concat(projectPlugins)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> orderedPlugins = sortPlugins(plugins)</span><br><span class="line">    <span class="keyword">return</span> orderedPlugins</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行了 <code>service.run </code> 方法，<code>run</code> 方法中调用了 <code>init</code> 方法，在 <code>init</code> 方法中初始化好了插件之后，用传入的参数调用对应的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> run (name, args = &#123;&#125;, rawArgv = []) &#123;</span><br><span class="line">  <span class="comment">// load env variables, load user config, apply plugins</span></span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">this</span>.init(mode)</span><br><span class="line">  args._ = args._ || []</span><br><span class="line">  <span class="keyword">let</span> command = <span class="built_in">this</span>.commands[name]</span><br><span class="line">  <span class="keyword">if</span> (!command || args.help || args.h) &#123;</span><br><span class="line">    command = <span class="built_in">this</span>.commands.help</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; fn &#125; = command</span><br><span class="line">  <span class="keyword">return</span> fn(args, rawArgv)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// apply plugins.</span></span><br><span class="line">  <span class="built_in">this</span>.plugins.forEach(<span class="function">(<span class="params">&#123; id, apply &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.pluginsToSkip.has(id)) <span class="keyword">return</span></span><br><span class="line">    apply(<span class="keyword">new</span> PluginAPI(id, <span class="built_in">this</span>), <span class="built_in">this</span>.projectOptions)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为每一个插件创建了一个 <code>PluginAPI</code> 的实例，<code>PluginAPI</code> 提供了 <code>registerCommand</code> 方法，并把回调函数保存在了<code>service.commands</code> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PluginAPI</span> </span>&#123;</span><br><span class="line">   <span class="title">constructor</span> (<span class="params">id, service</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id</span><br><span class="line">    <span class="built_in">this</span>.service = service</span><br><span class="line">  &#125;</span><br><span class="line">  registerCommand (name, opts, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> opts === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      fn = opts</span><br><span class="line">      opts = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.service.commands[name] = &#123; fn, <span class="attr">opts</span>: opts || &#123;&#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>至此 <code>build</code> 的回调函数就收到了解析后的参数 <code>module: false</code></p></li></ol><h4 id="not-ie-11"><a href="#not-ie-11" class="headerlink" title="not ie 11"></a>not ie 11</h4><p>来看第二种解决方案的原理，只要从 <code>../../util/targets</code> 中导入的<code>allProjectTargetsSupportModule</code> 值为 <code>true</code>，就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; allProjectTargetsSupportModule &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../../util/targets&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (allProjectTargetsSupportModule) &#123;</span><br><span class="line">  needsDifferentialLoading = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lib/util/targets.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> projectTargets = getTargets()</span><br><span class="line"><span class="keyword">const</span> allModuleTargets = getTargets(</span><br><span class="line">  &#123; <span class="attr">esmodules</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">ignoreBrowserslistConfig</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> allProjectTargetsSupportModule = doAllTargetsSupportModule(projectTargets)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAllTargetsSupportModule</span> (<span class="params">targets</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browserList = <span class="built_in">Object</span>.keys(targets)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> browserList.every(<span class="function"><span class="params">browserName</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!allModuleTargets[browserName]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> semver.gte(</span><br><span class="line">      semver.coerce(targets[browserName]),</span><br><span class="line">      semver.coerce(allModuleTargets[browserName])</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getTargets</code> 是 <code>babel</code> 提供的方法，如果参数为空，返回 <code>browserlists</code> 查询的默认值，参考：<a href="https://babeljs.io/docs/en/babel-helper-compilation-targets#gettargets">https://babeljs.io/docs/en/babel-helper-compilation-targets#gettargets</a></p><p>传入 <code>esmodules: true</code> ，返回 <a href="https://github.com/babel/babel/blob/v7.13.15/packages/babel-compat-data/data/native-modules.json">https://github.com/babel/babel/blob/v7.13.15/packages/babel-compat-data/data/native-modules.json</a> 这个json文件中查询的结果.</p><p>在 <code>doAllTargetsSupportModule</code> 方法中对 <code>browserList</code> 和 <code>allModuleTargets</code>进行了比较，如果 <code>browserList</code> 中有 <code>allModuleTargets</code> 不存在的属性，就返回 <code>false</code> 或者 <code>browserList</code> 中的版本号，比 <code>allModuleTargets</code> 小，也会返回 <code>false</code></p><p>输出对比一下这两个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// browserList</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">android</span>: <span class="string">&#x27;98.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">chrome</span>: <span class="string">&#x27;97.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">edge</span>: <span class="string">&#x27;98.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">firefox</span>: <span class="string">&#x27;96.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">ie</span>: <span class="string">&#x27;11.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">ios</span>: <span class="string">&#x27;14.5.0&#x27;</span>,</span><br><span class="line">  <span class="attr">opera</span>: <span class="string">&#x27;82.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">safari</span>: <span class="string">&#x27;15.2.0&#x27;</span>,</span><br><span class="line">  <span class="attr">samsung</span>: <span class="string">&#x27;15.0.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// allModuleTargets</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">android</span>: <span class="string">&#x27;61.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">chrome</span>: <span class="string">&#x27;61.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">edge</span>: <span class="string">&#x27;16.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">firefox</span>: <span class="string">&#x27;60.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">ios</span>: <span class="string">&#x27;10.3.0&#x27;</span>,</span><br><span class="line">  <span class="attr">node</span>: <span class="string">&#x27;13.2.0&#x27;</span>,</span><br><span class="line">  <span class="attr">opera</span>: <span class="string">&#x27;48.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">safari</span>: <span class="string">&#x27;10.1.0&#x27;</span>,</span><br><span class="line">  <span class="attr">samsung</span>: <span class="string">&#x27;8.2.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现 <code>browserList</code> 比 <code>allModuleTargets</code> 中多了一个 <code>ie: 11.0.0</code> ，那我们只要配置 <code>browserlists</code> 让他没有 <code>ie</code> 这一项就可以，ie最后的版本就是 11了，所以加一个 <code>not IE 11</code> 就可以了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[1] <a href="https://babeljs.io/docs/en/babel-helper-compilation-targets#gettargets">https://babeljs.io/docs/en/babel-helper-compilation-targets#gettargets</a></p><p>[2] <a href="https://github.com/browserslist/browserslist#query-composition">https://github.com/browserslist/browserslist#query-composition</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue2 项目升级到vue3之后&lt;code&gt;npm run build&lt;/code&gt;执行两遍打包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 实际是在 &lt;code&gt;@vue/cli-service&lt;/code&gt;升级到5.0版本之后出现的问题&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3" scheme="https://wukang0718.com/categories/vue/vue3/"/>
    
    <category term="vue2升级vue3" scheme="https://wukang0718.com/categories/vue/vue3/vue2%E5%8D%87%E7%BA%A7vue3/"/>
    
    
    <category term="vue2升级vue3" scheme="https://wukang0718.com/tags/vue2%E5%8D%87%E7%BA%A7vue3/"/>
    
    <category term="build" scheme="https://wukang0718.com/tags/build/"/>
    
  </entry>
  
  <entry>
    <title>第六篇-项目展示基本框架</title>
    <link href="https://wukang0718.com/2021/09/17/%E7%AC%AC%E5%85%AD%E7%AF%87-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/"/>
    <id>https://wukang0718.com/2021/09/17/%E7%AC%AC%E5%85%AD%E7%AF%87-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/</id>
    <published>2021-09-17T03:37:13.000Z</published>
    <updated>2021-09-17T06:29:58.769Z</updated>
    
    <content type="html"><![CDATA[<p>在后台管理的项目中来说，一般会分 头部、侧边栏、和内容区域三个部分</p><p>在项目根目录下创建 <code>layout</code> 文件夹，完成这个三个部分的组件，并将这些组件组合在一起</p><p>新建 <code>layout/index.vue</code> 文件，搭建项目的基本框架，为了方便查看效果，把 <code>src/App.vue</code> 的 <code>template</code> 只保留 <code>el-config-provider</code> 和 <code>router-view</code>，其他删除，<code>script</code> 也做对应的删除，<code>style</code> 内设置 <code>#app</code> 的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>src/router/index.ts</code> 中把 <code>path: &quot;/&quot;</code> 的路由的 <code>component</code> 改成 <code>Layout</code></p><p>src/router/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&quot;@/layout/index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="layout-–-布局"><a href="#layout-–-布局" class="headerlink" title="layout – 布局"></a>layout – 布局</h3><p>在 <code>src/layout/index.vue</code>  中，使用 <a href="https://element-plus.org/#/zh-CN/component/container">element-plus的Container 布局容器</a></p><p>需要用到的组件有：<code>el-container</code> 、<code>el-header</code> 、<code>el-aside</code>、<code>el-main</code>，在 <code>src/theme/index.ts</code> 中引入这些组件。然后就可以在 <code>src/layout/index.vue</code> 中使用了。</p><p>src/theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="comment">// ... 省略其他导入</span></span><br><span class="line">  ElContainer</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... 省略其他代码</span></span><br><span class="line">  app.use(ElContainer);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/layout/index.vue</code>  中，应该把头部、侧边栏和内容区域的宽高都划分好</p><p>src/layout/index.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: red&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;background: green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">style</span>=<span class="string">&quot;background: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span> <span class="attr">style</span>=<span class="string">&quot;background: yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.layout</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器就可以看到划分好的区域了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210913133626769.png" alt="image-20210913133624904"></p><p>接下来就把头部和侧边栏提取到单独的组件中，内容区域展示的子路由的内容所以要换成 <code>router-view</code></p><p>在 <code>src/layout</code> 下新建 <code>Header.vue</code> 和 <code>Aside.vue</code> </p><p>src/layout/Header.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-header</span>&gt;</span><span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;LayoutHeader&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src/layout/Aside.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;LayoutAside&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>src/layout/index.vue</code> 中引入这两个组件</p><p>src/layout/index.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span> <span class="attr">direction</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout-header</span> <span class="attr">style</span>=<span class="string">&quot;background: green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">layout-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout-aside</span> <span class="attr">style</span>=<span class="string">&quot;background: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">layout-aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> LayoutAside <span class="keyword">from</span> <span class="string">&quot;./Aside.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> LayoutHeader <span class="keyword">from</span> <span class="string">&quot;./Header.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.layout</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Aside-–-侧边栏"><a href="#Aside-–-侧边栏" class="headerlink" title="Aside – 侧边栏"></a>Aside – 侧边栏</h3><p>在侧边栏中需要提供模块菜单，这里需要用到 <code>el-menu</code> 组件，在 <code>src/theme/index.ts</code> 中引入</p><p>src/theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  ElMenu,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  app.use(ElMenu);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>src/layout/aside.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:default-active</span>=<span class="string">&quot;defaultActive&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">open</span>=<span class="string">&quot;handleOpen&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">close</span>=<span class="string">&quot;handleClose&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in menus&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">:index</span>=<span class="string">&quot;`$&#123;index&#125;`&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;item.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;(elItem, elIndex) in item.children&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;elIndex&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:index</span>=<span class="string">&quot;`$&#123;index&#125;-$&#123;elIndex&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;elItem.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            &#123;&#123; elItem.name &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;item.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;LayoutAside&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> menus = [</span></span><br><span class="line"><span class="javascript">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;导航一&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">icon</span>: <span class="string">&quot;el-icon-location&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;导航五&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">icon</span>: <span class="string">&quot;el-icon-document&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;导航六&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">icon</span>: <span class="string">&quot;el-icon-settings&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    ],</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">name</span>: <span class="string">&quot;导航二&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">icon</span>: <span class="string">&quot;el-icon-menu&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;导航三&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">icon</span>: <span class="string">&quot;el-icon-document&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">&quot;导航四&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">icon</span>: <span class="string">&quot;el-icon-settings&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    ],</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> hasChildren = <span class="function">(<span class="params">item: Record&lt;string, any&gt;</span>) =&gt;</span> !!item.children;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getDefaultActive = <span class="function">(<span class="params">list: Record&lt;string, any&gt;[], result = <span class="string">&quot;0&quot;</span></span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> [item] = list;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (hasChildren(item)) &#123;</span></span><br><span class="line"><span class="javascript">    result += <span class="string">&quot;-0&quot;</span>;</span></span><br><span class="line"><span class="javascript">    getDefaultActive(item.children, result);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> defaultActive = computed(<span class="function">() =&gt;</span> getDefaultActive(menus));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后需要在 <code>views </code> 下创建菜单对应的文件夹，在 <code>router</code> 下也要创建对应的文件，每个模块都需要做这样重复的工作，这样的工作，应该让程序自动来做，写一个脚本来完成这样的工作。</p><h3 id="create-module脚本"><a href="#create-module脚本" class="headerlink" title="create-module脚本"></a>create-module脚本</h3><p>在项目根目录下创建一个 <code>scripts</code> 文件夹存放自定义的脚本</p><p>在 <code>scripts</code> 下创建 <code>create-module</code> 文件夹，在文件夹中创建  <code>create-module.js</code>，在这个文件中处理模块，需要知道有哪些模块，所以还需要创建一个 <code>module.json</code> 文件</p><p>在 <code>module.json</code> 文件中，会出现下列字段</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>路由的 <code>path</code> 和 <code>name</code>，子路由的 <code>name </code> 是 父路由子父路由拼接起来的</td></tr><tr><td>title</td><td>string</td><td>左侧菜单展示的名称，页面 <code>title</code></td></tr><tr><td>children</td><td>array</td><td>子路由，子菜单</td></tr><tr><td>show</td><td>boolean</td><td>是否展示在左侧菜单中</td></tr><tr><td>redirect</td><td>string</td><td>重定向的路由</td></tr></tbody></table><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;project&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;项目列表&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;redirect&quot;</span>: <span class="string">&quot;/project/index&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;children&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;项目列表&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;lookTests&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;查看关联项目集&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;show&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需要在脚本中使用 <code>eslint</code> 所以需要安装 <code>eslint</code> 版本 <code>7.0</code> 以上的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add eslint --dev</span><br></pre></td></tr></table></figure><h4 id="生成views下目录和文件"><a href="#生成views下目录和文件" class="headerlink" title="生成views下目录和文件"></a>生成views下目录和文件</h4><ol><li>需要一个方法创建不存在的文件夹</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; ESLint &#125; = <span class="built_in">require</span>(<span class="string">&quot;eslint&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> modules = <span class="built_in">require</span>(<span class="string">&quot;./module.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> viewsPath = path.join(__dirname, <span class="string">&quot;../../src/views/&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> routerPath = path.join(__dirname, <span class="string">&quot;../../src/router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> routesPath = path.join(routerPath, <span class="string">&quot;/routes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂函数，创建以恶搞创建文件夹的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>basePath 创建文件夹的基础路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123; function &#125;</span> </span>返回一个创建文件夹的具体方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getCreateFolder = <span class="function">(<span class="params">basePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (folderName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> folderPath = path.join(basePath, folderName);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fs.promises.stat(folderPath);</span><br><span class="line">      <span class="keyword">if</span> (!res.isDirectory()) &#123;</span><br><span class="line">        <span class="comment">// 不是文件夹的时候，创建文件夹</span></span><br><span class="line">        fs.promises.mkdir(folderPath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 找不到文件或文件夹或报错</span></span><br><span class="line">      fs.promises.mkdir(folderPath, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 views 下的文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createViewFolder = getCreateFolder(viewsPath);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建vue模版</li></ol><p>scripts/create-module/template/vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>#&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&quot;#&#123;name&#125;&quot;</span>,</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>需要一个方法创建不存在的文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂函数返回实际创建文件的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>basePath 创建文件的基本路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>ext 文件后缀名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;function&#125;</span> </span>返回实际创建文件的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getCreateFile = <span class="function">(<span class="params">basePath, ext</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> templatePath = path.join(__dirname, <span class="string">&quot;/template/&quot;</span>, ext.slice(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (fileName) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> filePath = path.join(basePath, <span class="string">`<span class="subst">$&#123;fileName&#125;</span><span class="subst">$&#123;ext&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> name = fileName.replace(<span class="regexp">/\/\w/gi</span>, <span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">      res.slice(<span class="number">1</span>).toUpperCase()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> write = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> templateStr = <span class="keyword">await</span> fs.promises.readFile(templatePath, &#123;</span><br><span class="line">        <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">await</span> fs.promises.writeFile(</span><br><span class="line">        filePath,</span><br><span class="line">        templateStr.replace(<span class="regexp">/#&#123;name&#125;/g</span>, name)</span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fs.promises.stat(filePath);</span><br><span class="line">      <span class="keyword">if</span> (!res.isFile()) &#123;</span><br><span class="line">        <span class="comment">// 不是文件，可以写入内容</span></span><br><span class="line">        write();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 找不到文件或文件夹或报错</span></span><br><span class="line">      write();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createViewFile = getCreateFile(viewsPath, <span class="string">&quot;.vue&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>递归配置的模块创建views下的目录和文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 views 下的文件夹和文件夹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#123;</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  name: &quot;product&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  title: &quot;项目&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  children: []</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> * &#125;</span></span>&#125; views 创建的模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>basePath 基于src/views/的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createViews = <span class="function">(<span class="params">views, basePath = <span class="string">&quot;/&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 要创建的文件/文件夹的路径</span></span><br><span class="line">  <span class="keyword">const</span> isFolder = !!views.children;</span><br><span class="line">  <span class="keyword">if</span> (isFolder) &#123;</span><br><span class="line">    createViewFolder(basePath + views.name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createViewFile(basePath + views.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (views.children) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; views.children.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = views.children[i];</span><br><span class="line">      createViews(element, basePath + views.name + <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="生成router-routes-下的文件"><a href="#生成router-routes-下的文件" class="headerlink" title="生成router/routes 下的文件"></a>生成router/routes 下的文件</h4><ol><li>创建 routes 文件夹</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 router/routes 下的文件夹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createRouteFolder = getCreateFolder(routesPath);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建 routes 下文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼接字符串，从第二个参数开始，首字母大写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">str</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;...string&#125;</span> <span class="variable">arg</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">string</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> joinStr = <span class="function">(<span class="params">str, ...arg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (str ?? <span class="string">&quot;&quot;</span>) + arg.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item[<span class="number">0</span>].toUpperCase() + item.slice(<span class="number">1</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取单个route的配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#123;</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  name: &quot;product&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  title: &quot;项目&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  children: []</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> * &#125;</span></span>&#125; routes 创建的模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>isParent &#123;boolean&#125; 是否是顶级的路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>parentName &#123;string&#125; 父路由的 name/path</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getRouteTmp = <span class="function">(<span class="params">route, isParent, parentName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> path = isParent ? <span class="string">&quot;/&quot;</span> + route.name : route.name;</span><br><span class="line">  <span class="keyword">const</span> name = isParent ? route.name : joinStr(parentName, route.name);</span><br><span class="line">  <span class="keyword">const</span> componentPath = isParent ? route.name : <span class="string">`<span class="subst">$&#123;parentName&#125;</span>/<span class="subst">$&#123;route.name&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> isRedirect = route.redirect;</span><br><span class="line">  <span class="keyword">const</span> component = <span class="string">`component: () =&gt; import(/* webpackName: &quot;<span class="subst">$&#123;name&#125;</span>&quot; */&quot;@/views/<span class="subst">$&#123;componentPath&#125;</span>.vue&quot;),`</span>;</span><br><span class="line">  <span class="keyword">const</span> redirect = <span class="string">`redirect: &quot;<span class="subst">$&#123;isRedirect&#125;</span>&quot;,component: () =&gt; import(/* webpackName: &quot;Layout&quot; */&quot;@/layout/index.vue&quot;),`</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&#123;</span></span><br><span class="line"><span class="string">    path: &quot;<span class="subst">$&#123;path&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">    name: &quot;<span class="subst">$&#123;name&#125;</span>&quot;,</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;isRedirect ? redirect : component&#125;</span></span></span><br><span class="line"><span class="string">    meta: &#123;</span></span><br><span class="line"><span class="string">      title: &quot;<span class="subst">$&#123;route.title&#125;</span>&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      route.children?.length</span></span></span><br><span class="line"><span class="subst"><span class="string">        ? <span class="string">`children: [</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      <span class="subst">$&#123;route.children</span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">        ?.map((item) =&gt; getRouteTmp(item, <span class="literal">false</span>, route.name))</span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="subst"><span class="string">        .join(<span class="string">&quot;,&quot;</span>)&#125;</span></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    ]</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    `</span></span></span></span><br><span class="line"><span class="subst"><span class="string">        : <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 routes 下的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;&#123;</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  name: &quot;product&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  title: &quot;项目&quot;,</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> *  children: []</span></span></span></span><br><span class="line"><span class="type"><span class="doctag"><span class="comment"> * &#125;</span></span>&#125; routes 创建的模块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createRouteFile = <span class="keyword">async</span> (routes) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.join(routesPath, routes.name + <span class="string">&quot;.ts&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`export default <span class="subst">$&#123;getRouteTmp(routes, <span class="literal">true</span>)&#125;</span>;`</span>;</span><br><span class="line">  <span class="keyword">const</span> write = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 先用 eslint 修改一下代码格式</span></span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> eslint.lintText(str);</span><br><span class="line">    <span class="keyword">await</span> fs.promises.writeFile(filePath, results[<span class="number">0</span>].output);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fs.promises.stat(filePath);</span><br><span class="line">    <span class="keyword">if</span> (!res.isFile()) &#123;</span><br><span class="line">      <span class="comment">// 不是文件，可以写入内容</span></span><br><span class="line">      write();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 找不到文件或文件夹或报错</span></span><br><span class="line">    write();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建routes/index.ts 文件</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 routes 下的index.ts 导出所有的路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createRouteIndexFile = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> files = <span class="keyword">await</span> fs.promises.readdir(routesPath);</span><br><span class="line">  files = files</span><br><span class="line">    .filter(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> file !== <span class="string">&quot;index.ts&quot;</span> &amp;&amp; file.endsWith(<span class="string">&quot;.ts&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(<span class="function">(<span class="params">file</span>) =&gt;</span> file.slice(<span class="number">0</span>, -<span class="number">3</span>));</span><br><span class="line">  <span class="keyword">let</span> str = files</span><br><span class="line">    .map(<span class="function">(<span class="params">file</span>) =&gt;</span> <span class="string">`import <span class="subst">$&#123;file&#125;</span>Routes from &quot;./<span class="subst">$&#123;file&#125;</span>&quot;;`</span>)</span><br><span class="line">    .join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  str += <span class="string">`</span></span><br><span class="line"><span class="string">    export default [</span></span><br><span class="line"><span class="string">      <span class="subst">$&#123;files.map((file) =&gt; file + <span class="string">&quot;Routes&quot;</span>).join(<span class="string">&quot;,&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="comment">// 先用 eslint 修改一下代码格式</span></span><br><span class="line">  <span class="keyword">const</span> results = <span class="keyword">await</span> eslint.lintText(str);</span><br><span class="line">  <span class="keyword">await</span> fs.promises.writeFile(</span><br><span class="line">    path.join(routesPath, <span class="string">&quot;./index.ts&quot;</span>),</span><br><span class="line">    results[<span class="number">0</span>].output</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="生成侧边栏的菜单"><a href="#生成侧边栏的菜单" class="headerlink" title="生成侧边栏的菜单"></a>生成侧边栏的菜单</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuPath = path.join(__dirname, <span class="string">&quot;../../src/layout&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> getMenu = <span class="function">(<span class="params">menu, parentMenu = <span class="string">&quot;/&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> children = menu.children?.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.show !== <span class="literal">false</span>) || [];</span><br><span class="line">  <span class="keyword">const</span> route = parentMenu + menu.name;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: menu.title,</span><br><span class="line">    <span class="attr">route</span>: menu.redirect || parentMenu + menu.name,</span><br><span class="line">    <span class="attr">icon</span>: menu.icon,</span><br><span class="line">    <span class="attr">children</span>: children.length</span><br><span class="line">      ? children.map(<span class="function">(<span class="params">item</span>) =&gt;</span> getMenu(item, <span class="string">`<span class="subst">$&#123;route&#125;</span>/`</span>))</span><br><span class="line">      : <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建左侧侧边栏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createMenuFile = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.join(menuPath, <span class="string">&quot;./menu.json&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> menus = modules</span><br><span class="line">    .filter(<span class="function">(<span class="params">menu</span>) =&gt;</span> menu.show !== <span class="literal">false</span>)</span><br><span class="line">    .map(<span class="function">(<span class="params">menu</span>) =&gt;</span> getMenu(menu));</span><br><span class="line">  <span class="keyword">await</span> fs.promises.writeFile(filePath, <span class="built_in">JSON</span>.stringify(menus, <span class="literal">null</span>, <span class="number">4</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="创建一个入口函数"><a href="#创建一个入口函数" class="headerlink" title="创建一个入口函数"></a>创建一个入口函数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> run = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> createRouteFolder(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> modules) &#123;</span><br><span class="line">    createViews(item);</span><br><span class="line">    <span class="keyword">await</span> createRoutes(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">await</span> createRouteIndexFile();</span><br><span class="line">  createMenuFile();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run();</span><br></pre></td></tr></table></figure><p>在 <code>packgae.json</code> 中添加一个 <code>script</code> 命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;create:module&quot;</span>: <span class="string">&quot;node ./scripts/create-module/create-module.js&quot;</span></span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn create:module</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm run create:module</span><br></pre></td></tr></table></figure><p>在 <code>src/router/index.ts</code> 中引入创建的路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Routes <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&quot;../views/About.vue&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  ...Routes,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在 <code>src/layout/Aside.vue</code> 中引入创建的菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> menus <span class="keyword">from</span> <span class="string">&quot;./menu.json&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> hasChildren = <span class="function">(<span class="params">item: Record&lt;string, any&gt;</span>) =&gt;</span> !!item.children;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> getDefaultActive = <span class="function">(<span class="params">list: Record&lt;string, any&gt;[], result = <span class="string">&quot;0&quot;</span></span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> [item] = list;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (hasChildren(item)) &#123;</span></span><br><span class="line"><span class="javascript">    result += <span class="string">&quot;-0&quot;</span>;</span></span><br><span class="line"><span class="javascript">    getDefaultActive(item.children, result);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> defaultActive = computed(<span class="function">() =&gt;</span> getDefaultActive(menus));</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>tsconfig.json</code> 中添加 <code>resolveJsonModule</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以看到页面的菜单了，但是点击菜单没有路由跳转</p><h3 id="添加菜单跳转"><a href="#添加菜单跳转" class="headerlink" title="添加菜单跳转"></a>添加菜单跳转</h3><p>Aside.vue 文件中， <code>el-menu</code> 组件需要添加 <code>router</code> prop，<code>el-menu-item</code> 需要 <code>route</code> prop</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:default-active</span>=<span class="string">&quot;defaultActive&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">router</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in menus&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-sub-menu</span> <span class="attr">:index</span>=<span class="string">&quot;`$&#123;index&#125;`&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;item.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;(elItem, elIndex) in item.children&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;elIndex&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:index</span>=<span class="string">&quot;`$&#123;index&#125;-$&#123;elIndex&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:route</span>=<span class="string">&quot;elItem.route&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;elItem.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            &#123;&#123; elItem.name &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-sub-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-else</span> <span class="attr">:index</span>=<span class="string">&quot;`$&#123;index&#125;`&quot;</span> <span class="attr">:route</span>=<span class="string">&quot;item.route&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-if</span>=<span class="string">&quot;item.icon&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;item.icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置一下路由 <code>/</code> 重定向到 <code>/project/index</code></p><p>src/router/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/project/index&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在后台管理的项目中来说，一般会分 头部、侧边栏、和内容区域三个部分&lt;/p&gt;
&lt;p&gt;在项目根目录下创建 &lt;code&gt;layout&lt;/code&gt; 文件夹，完成这个三个部分的组件，并将这些组件组合在一起&lt;/p&gt;
&lt;p&gt;新建 &lt;code&gt;layout/index.vue&lt;/code</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>第五篇-Vue3项目中集成axios</title>
    <link href="https://wukang0718.com/2021/09/10/%E7%AC%AC%E4%BA%94%E7%AF%87-Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90axios/"/>
    <id>https://wukang0718.com/2021/09/10/%E7%AC%AC%E4%BA%94%E7%AF%87-Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90axios/</id>
    <published>2021-09-10T01:32:53.000Z</published>
    <updated>2021-09-17T03:38:59.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h3><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。开箱即用的工具</p><p>这也是 Vue 官方推荐使用的发送 ajax 请求的工具</p><h3 id="axios有哪些特性"><a href="#axios有哪些特性" class="headerlink" title="axios有哪些特性"></a>axios有哪些特性</h3><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h3 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add axios --save</span><br></pre></td></tr></table></figure><p>在 <code>src/App.vue</code> 中使用一下 <code>axios</code>，添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请求的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; result &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 忽略其他代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 忽略其他代码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> result = ref(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">axios.get(location.href).then(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  result.value = data;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中就可以查看到我们网站的代码了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908202224957.png" alt="image-20210908202223220"></p><p>在日常项目的开发中，通常会有多个后端的服务，而每个服务会有自己的 url 地址、token之类的，通常是使用单独的 <code>axios</code> 的实例处理对应的服务，这就需要我们封装多个 <code>axios</code> 的实例</p><h3 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h3><p>在 <code>src</code> 目录下新建一个 <code>axios</code> 文件夹，在其中新建一个 <code>index.ts</code> 文件，这个文件就是用来导出封装好的 <code>axios</code></p><p>使用 <code>axios.create()</code> 方法就可以创建一个 <code>axios</code> 的实例</p><p><code>axios</code> 可以设置全局默认的配置，这些配置会被每个实例共享，实例可以覆盖这些配置</p><h4 id="设置全局的参数"><a href="#设置全局的参数" class="headerlink" title="设置全局的参数"></a>设置全局的参数</h4><ol><li>设置全局的接口超时时间 <code>timeout</code>，这个时间是对所有实例通用的</li></ol><p>src/axios/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line">axios.defaults.timeout = <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 设置超时时间是1分钟</span></span><br></pre></td></tr></table></figure><h4 id="创建-axios的实例"><a href="#创建-axios的实例" class="headerlink" title="创建 axios的实例"></a>创建 axios的实例</h4><p>假设我们的项目中会用到两个服务(a, b)的接口</p><table><thead><tr><th>接口地址/环境</th><th>development 开发环境</th><th>t 测试环境</th><th>production 生产环境</th></tr></thead><tbody><tr><td>服务a</td><td><a href="http://a.dev.server.com/">http://a.dev.server.com</a></td><td><a href="http://a.test.server.com/">http://a.test.server.com</a></td><td><a href="http://a.prod.server.com/">http://a.prod.server.com</a></td></tr><tr><td>服务b</td><td><a href="http://b.dev.server.com/">http://b.dev.server.com</a></td><td><a href="http://b.test.server.com/">http://b.test.server.com</a></td><td><a href="http://b.prod.server.com/">http://b.prod.server.com</a></td></tr></tbody></table><p>同一个服务根据不同的运行环境需要使用不同的接口地址，这种情况最好是把接口地址写在环境文件中</p><p>.env.development 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_A_BASE_URL=http://a.dev.server.com</span><br><span class="line">VUE_APP_B_BASE_URL=http://b.dev.server.com</span><br></pre></td></tr></table></figure><p>.env.t 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_A_BASE_URL=http://a.test.server.com</span><br><span class="line">VUE_APP_B_BASE_URL=http://b.test.server.com</span><br></pre></td></tr></table></figure><p>.env.production 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_A_BASE_URL=http://a.prod.server.com</span><br><span class="line">VUE_APP_B_BASE_URL=http://b.prod.server.com</span><br></pre></td></tr></table></figure><p>在 <code>src/axios/index.ts</code> 文件中就可以通过 <code>process.env.VUE_APP_A_BASE_URL</code> 和 <code>process.env.VUE_APP_B_BASE_URL</code> 取到对应的服务地址</p><p>src/axios/index.ts 添加</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建并导出的两个 axios 的服务分别用来处理对应的两个后端服务的接口</p><h4 id="设置请求拦截器"><a href="#设置请求拦截器" class="headerlink" title="设置请求拦截器"></a>设置请求拦截器</h4><h5 id="请求拦截器可以处理哪些问题"><a href="#请求拦截器可以处理哪些问题" class="headerlink" title="请求拦截器可以处理哪些问题"></a>请求拦截器可以处理哪些问题</h5><ol><li>在请求发送之前需要处理的事情，都可以在请求拦截器中处理</li></ol><p>例如每个请求都要在请求头中添加 <code>token</code> </p><ol start="2"><li>在请求发送之前遇到的错误都可以在请求拦截器中被处理</li></ol><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p><code>axios</code> 设置请求拦截器的语法，要为实例添加拦截器只要把 <code>axios</code> 替换成对应的实例就可以了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><ul><li><code>onFulfilled</code> 函数，接收一个 config  的参数，可以对 config 进行修改，最后返回这个 config</li><li><code>onRejected</code> 函数，处理在请求发送之前的错误</li></ul><blockquote><p>请求拦截器的执行顺序是先添加的后执行</p></blockquote><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>在 <code>src/axios</code> 下新建文件夹 <code>interceptors</code> 再 <code>interceptors</code> 新建一个 <code>request</code> 文件夹，这个文件夹中保存所有请求拦截器</p><ol><li>请求错误处理的拦截器</li></ol><p>把错误拦截器作为第一个拦截器，可以拦截到所有请求发出之前的错误，在这个也可以给服务器上报错误日志</p><blockquote><p>同一个拦截器中的 <code>onRejected</code> 函数处理不到 <code>onFulfilled</code> 中的异常，所以最后一个请求拦截器的 <code>onRejected</code> 函数是不会被执行的</p></blockquote><p>在 <code>src/axios/interceptors/request</code> 文件夹下新建 <code>error.ts</code> 文件，这个文件中做对请求开始之前的错误处理</p><p>src/axios/interceptors/request/error.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequestError</span>(<span class="params">error: <span class="built_in">any</span></span>): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 可以给服务器上报错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>eslint 提示 Unexpected any. Specify a different type. 在项目根目录下的 <code>.eslintrc.js</code> 文件中 <code>rules</code> 中添加一行 <code>&quot;@typescript-eslint/no-explicit-any&quot;: &quot;off&quot;,</code> </p></blockquote><blockquote><p>eslint  提示 Argument ‘error’ should be typed with a non-any type. 在项目根目录下的 <code>.eslintrc.js</code> 文件中 <code>rules</code> 中添加一行 <code>&quot;@typescript-eslint/explicit-module-boundary-types&quot;: &quot;off&quot;,</code> </p></blockquote><p>在 <code>src/axios/interceptors/request</code> 文件夹下新建 <code>index.ts</code> 文件，这个文件提供两个添加请求拦截器的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosInstance, AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> handleRequestError <span class="keyword">from</span> <span class="string">&quot;./error&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给axios的实例添加拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>axiosService axios 的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>requestInterceptorArray 需要添加在实例上的拦截器 二维数组[[拦截器的onFulfilled, 拦截器的onRejected],[...]]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>返回传入的axios的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useBaseRequestInterceptor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  axiosService: AxiosInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">  requestInterceptorArray: [</span></span></span><br><span class="line"><span class="params"><span class="function">    (config: AxiosRequestConfig) =&gt; AxiosRequestConfig,</span></span></span><br><span class="line"><span class="params"><span class="function">    ((error: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>) | <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="params"><span class="function">  ][]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">AxiosInstance</span> </span>&#123;</span><br><span class="line">  requestInterceptorArray.forEach(<span class="function">(<span class="params">interceptor</span>) =&gt;</span></span><br><span class="line">    axiosService.interceptors.request.use(...interceptor)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> axiosService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给axios的实例添加拦截器</span></span><br><span class="line"><span class="comment"> * 在所有拦截器之前会添加一个错误拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>axiosService axios 的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>requestInterceptorArray 需要添加在实例上的拦截器 一维数组，只处理onFulfilled函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>返回传入的axios的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useRequestInterceptor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  axiosService: AxiosInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">  requestInterceptorArray: <span class="built_in">Array</span>&lt;</span></span></span><br><span class="line"><span class="params"><span class="function">    (config: AxiosRequestConfig) =&gt; AxiosRequestConfig</span></span></span><br><span class="line"><span class="params"><span class="function">  &gt; = []</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> interceptors: [</span><br><span class="line">    <span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> AxiosRequestConfig,</span><br><span class="line">    <span class="literal">undefined</span></span><br><span class="line">  ][] = requestInterceptorArray.map(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> [interceptor, <span class="literal">undefined</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useBaseRequestInterceptor(axiosService, [</span><br><span class="line">    [<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> config, handleRequestError],</span><br><span class="line">    ...interceptors,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 <code>aService</code> 和 <code>bService</code> 添加拦截器</p><p>src/axios/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useRequestInterceptor <span class="keyword">from</span> <span class="string">&quot;./interceptors/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>headers</code> 中添加 <code>token</code> 的请求拦截器</li></ol><p>在 <code>src/axios/interceptors/request</code> 文件夹下新建 <code>token.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 a 服务的token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>config 请求的axios参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>处理后的请求的axios参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">handleAServiceRequestToken</span>(<span class="params">config: AxiosRequestConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="string">&quot;a-service-token&quot;</span>; <span class="comment">// 这里要根据项目获取真实的token，从vuex或者本地存储中获取</span></span><br><span class="line">  config.headers[<span class="string">&quot;token&quot;</span>] = token;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 b 服务的token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>config 请求的axios参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>处理后的请求的axios参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">handleBServiceRequestToken</span>(<span class="params">config: AxiosRequestConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> token = <span class="string">&quot;b-service-token&quot;</span>; <span class="comment">// 这里要根据项目获取真实的token，从vuex或者本地存储中获取</span></span><br><span class="line">  config.headers[<span class="string">&quot;token&quot;</span>] = token;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 <code>aService</code> 和 <code>bService</code> 添加 <code>token</code> 拦截器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  handleAServiceRequestToken,</span><br><span class="line">  handleBServiceRequestToken,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./interceptors/request/token&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">  &#125;),</span><br><span class="line">  [handleAServiceRequestToken]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">  &#125;),</span><br><span class="line">  [handleBServiceRequestToken]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>还有其他需要在请求拦截器做的，都可以按照这种方式添加</p><h4 id="设置响应拦截器"><a href="#设置响应拦截器" class="headerlink" title="设置响应拦截器"></a>设置响应拦截器</h4><h5 id="响应拦截器可以处理哪些问题"><a href="#响应拦截器可以处理哪些问题" class="headerlink" title="响应拦截器可以处理哪些问题"></a>响应拦截器可以处理哪些问题</h5><p>响应拦截器会在请求成功或失败之后调用</p><ol><li><p>请求的错误</p></li><li><p>在这里判断服务器返回的数据是否有效，无效数据可以当作异常处理</p></li><li><p>如果接口返回的是文件可以在这里完成文件的下载</p></li><li><p>等等。。。</p></li></ol><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p><code>axios</code> 设置响应拦截器的语法，要为实例添加拦截器只要把 <code>axios</code> 替换成对应的实例就可以了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><ul><li><code>onFulfilled</code> 函数，接收一个 <code>AxiosResponse</code>  的返回结果，可以对处理返回的接口进行修改，最后返回一个结果</li><li><code>onRejected</code> 函数，处理请求异常的错误</li></ul><blockquote><p>响应拦截器的执行顺序是先添加的先执行</p></blockquote><blockquote><h5 id="建议在拦截器中返回-result-，方便后续插拔拦截器的处理，可以考虑在错误拦截器之前的最后一个拦截器中返回-result-data"><a href="#建议在拦截器中返回-result-，方便后续插拔拦截器的处理，可以考虑在错误拦截器之前的最后一个拦截器中返回-result-data" class="headerlink" title="建议在拦截器中返回 result ，方便后续插拔拦截器的处理，可以考虑在错误拦截器之前的最后一个拦截器中返回 result.data"></a>建议在拦截器中返回 <code>result</code> ，方便后续插拔拦截器的处理，可以考虑在错误拦截器之前的最后一个拦截器中返回 <code>result.data</code></h5></blockquote><h5 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h5><p>在 <code>src/axios/interceptors</code> 下新建一个 <code>response</code> 文件夹，这个文件夹中保存所有响应拦截器</p><blockquote><p>同一个拦截器中的 <code>onRejected</code> 函数处理不到 <code>onFulfilled</code> 中的异常，所以第一个响应拦截器的 <code>onRejected</code> 函数是不会被执行的</p></blockquote><ol><li>响应错误处理的拦截器</li></ol><p>在 <code>src/axios/interceptors/response</code> 文件夹下新建 <code>error.ts</code> 文件，这个文件中做对请求响应之后的错误拦截</p><p>把错误拦截器作为最后一个拦截器，可以拦截到所有响应拦截器中的错误</p><p>src/axios/interceptors/response/error.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 axios 实例的响应错误</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>error 响应错误消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>rejected 状态的promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleResponseError</span>(<span class="params">error: <span class="built_in">any</span></span>): <span class="title">Promise</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 给服务器上传错误日志</span></span><br><span class="line">  ElMessage.error(error);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>src/axios/interceptors/response</code> 文件夹下新建 <code>index.ts</code> 文件，这个文件提供两个添加响应拦截器的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosInstance, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> handleResponseError <span class="keyword">from</span> <span class="string">&quot;./error&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给axios的实例添加拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>axiosService axios 的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>responseInterceptorArray 需要添加在实例上的拦截器 二维数组[[拦截器的onFulfilled, 拦截器的onRejected],[...]]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>返回传入的axios的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useBaseResponseInterceptor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  axiosService: AxiosInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">  responseInterceptorArray: [</span></span></span><br><span class="line"><span class="params"><span class="function">    (result: AxiosResponse) =&gt; <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    ((error: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>) | <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="params"><span class="function">  ][]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">AxiosInstance</span> </span>&#123;</span><br><span class="line">  responseInterceptorArray.forEach(<span class="function">(<span class="params">interceptor</span>) =&gt;</span></span><br><span class="line">    axiosService.interceptors.response.use(...interceptor)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> axiosService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给axios的实例添加拦截器</span></span><br><span class="line"><span class="comment"> * 在所有拦截器之前会添加一个错误拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>axiosService axios 的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>responseInterceptorArray 需要添加在实例上的拦截器 一维数组，只处理onFulfilled函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>返回传入的axios的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useResponseInterceptor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  axiosService: AxiosInstance,</span></span></span><br><span class="line"><span class="params"><span class="function">  responseInterceptorArray: <span class="built_in">Array</span>&lt;(result: AxiosResponse) =&gt; <span class="built_in">any</span>&gt; = []</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> interceptors: [<span class="function">(<span class="params">result: AxiosResponse</span>) =&gt;</span> <span class="built_in">any</span>, <span class="literal">undefined</span>][] =</span><br><span class="line">    responseInterceptorArray.map(<span class="function">(<span class="params">interceptor</span>) =&gt;</span> [interceptor, <span class="literal">undefined</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useBaseResponseInterceptor(axiosService, [</span><br><span class="line">    ...interceptors,</span><br><span class="line">    [<span class="function">(<span class="params">res: AxiosResponse</span>) =&gt;</span> res, handleResponseError],</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给 <code>aService</code> 和 <code>bService</code> 添加响应拦截器</p><p>src/axios/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useResponseInterceptor <span class="keyword">from</span> <span class="string">&quot;./interceptors/response&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    []</span><br><span class="line">  ),</span><br><span class="line">  [handleAServiceRequestToken]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    []</span><br><span class="line">  ),</span><br><span class="line">  [handleBServiceRequestToken]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="2"><li>处理后端返回的数据，假设后端返回的 json 中有 code 字段，且只有 200 表示成功，其他的全部按照异常处理，如果异常的话会有 message 字段返回异常信息，在 <code>src/axios/interceptors/response</code> 下新建 <code>filterResponse.ts</code> 文件</li></ol><p>src/axios/interceptors/response/filterResponse.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对服务端返回的数据处理</span></span><br><span class="line"><span class="comment"> * code !== 200 的都是有异常的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>response axios 响应消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleResponseFilter</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  response: AxiosResponse</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">AxiosResponse</span> | <span class="title">Promise</span>&lt;<span class="title">AxiosResponse</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = response;</span><br><span class="line">  <span class="keyword">if</span> (data.code !== <span class="number">200</span>) &#123;</span><br><span class="line">    ElMessage.error(data.message);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/axios/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> handleResponseFilter <span class="keyword">from</span> <span class="string">&quot;./interceptors/response/filterResponse&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleAServiceRequestToken]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleBServiceRequestToken]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其他响应拦截器也可以使用这种方式添加</p><h4 id="接口请求中展示loading"><a href="#接口请求中展示loading" class="headerlink" title="接口请求中展示loading"></a>接口请求中展示loading</h4><blockquote><p>根据具体项目看要不要添加这个拦截器，这里用来做演示</p></blockquote><p>在请求发出后 500ms 内如果收到了响应就不展示 loading，如果超过 500ms 就展示 loading，在接口响应之后关闭 loading。</p><p>在 <code>src/axios</code> 下创建一个 <code>utils</code> 文件夹，在其中新建一个<code>loading.ts</code> 文件，用来显示和关闭 loading</p><p>src/axios/utils/loading.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ElLoading, ILoadingInstance &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loadingCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> loading: ILoadingInstance | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 500ms 之后展示loading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">showLoading</span>(<span class="params"></span>): <span class="title">NodeJS</span>.<span class="title">Timeout</span> </span>&#123;</span><br><span class="line">  loadingCount++;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!loading &amp;&amp; loadingCount) &#123;</span><br><span class="line">      loading = ElLoading.service();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果没有loading中的接口，就关闭loading</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hideLoading</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  loadingCount--;</span><br><span class="line">  <span class="keyword">if</span> (loadingCount === <span class="number">0</span> &amp;&amp; loading) &#123;</span><br><span class="line">    loading.close();</span><br><span class="line">    loading = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>src/axios/interceptors/request</code> 和  <code>src/axios/interceptors/response</code>  文件夹下新建 <code>loading.ts</code> 文件，在 <code>src/axios/utils</code> 下新建 <code>constants.ts</code> 文件，用来存放常量</p><p>src/axios/utils/constants.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> HEADER_NO_LOADING = <span class="string">&quot;NO-LOADING&quot;</span>; <span class="comment">// 请求头中添加请求不展示loading的字段</span></span><br></pre></td></tr></table></figure><p>src/axios/interceptors/request/loading.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosRequestConfig &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; showLoading &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/loading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HEADER_NO_LOADING &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 请求时展示 loading 的拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">config</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequestLoading</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  config: AxiosRequestConfig</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">AxiosRequestConfig</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; headers &#125; = config;</span><br><span class="line">  <span class="comment">// 如果 headers 中有 &quot;NO-LOADING&quot;: true 就不展示loading</span></span><br><span class="line">  <span class="keyword">if</span> (!headers[HEADER_NO_LOADING]) &#123;</span><br><span class="line">    showLoading();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/axios/interceptors/response/loading.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hideLoading &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/loading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HEADER_NO_LOADING &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理响应成功之后关闭loading的拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">result</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleResponseLoading</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  result: AxiosResponse</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">AxiosResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="attr">config</span>: &#123; headers &#125;,</span><br><span class="line">  &#125; = result;</span><br><span class="line">  <span class="comment">// 如果 headers 中有 &quot;NO-LOADING&quot;: true 就不处理loading</span></span><br><span class="line">  <span class="keyword">if</span> (!headers[HEADER_NO_LOADING]) &#123;</span><br><span class="line">    hideLoading();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果带有loading的请求出现了异常，要在 <code>error</code> 拦截器中关闭 loading</p><p>src/axios/interceptors/response/error.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AxiosError &#125; <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElMessage &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; hideLoading &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/loading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HEADER_NO_LOADING &#125; <span class="keyword">from</span> <span class="string">&quot;@/axios/utils/constants&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理 axios 实例的响应错误</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>error 响应错误消息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>rejected 状态的promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">handleResponseError</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  error: AxiosError</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Promise</span>&lt;<span class="title">AxiosError</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!error.config.headers[HEADER_NO_LOADING]) &#123;</span><br><span class="line">    hideLoading();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 给服务器上传错误日志</span></span><br><span class="line">  ElMessage.error(error.message);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>src/axios/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> handleRequestLoading <span class="keyword">from</span> <span class="string">&quot;./interceptors/request/loading&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> handleResponseLoading <span class="keyword">from</span> <span class="string">&quot;./interceptors/response/loading&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给a服务器发送请求的axios实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseLoading, handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleAServiceRequestToken, handleRequestLoading]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给b服务器发送请求的axios实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseLoading, handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleBServiceRequestToken, handleRequestLoading]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>loading的拦截器就加完了，其他的项目中需要的拦截器也可以按照这种方式加入</p><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>如果项目开发中，后端的接口提供了跨域请求的支持，那这一步就可以不做了。</p><p>但是通常在项目开发中，后端的接口不会提供跨域请求的支持，这个时候就需要我们对请求做一个反向代理，<code>webpack</code>  通过 <code>devServer.proxy</code> 内置了这样的服务。 </p><p>在根目录的 <code>vue.config.js</code> 文件中添加配置即可</p><p>例：给 a、b  服务配置代理 / 代理到 <code>http://localhost:8082</code> （本地的服务启动的是多少就代理到多少）</p><p>首先把 a、b 两个服务的 <code>axios</code> 实例创建时的 <code>baseURL</code> 改成唯一的前缀</p><p>src/axios.index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给a服务器发送请求的axios实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> aService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">&quot;/aServer&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseLoading, handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleAServiceRequestToken, handleRequestLoading]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给b服务器发送请求的axios实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bService = useRequestInterceptor(</span><br><span class="line">  useResponseInterceptor(</span><br><span class="line">    axios.create(&#123;</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">&quot;/bServer&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    [handleResponseLoading, handleResponseFilter]</span><br><span class="line">  ),</span><br><span class="line">  [handleBServiceRequestToken, handleRequestLoading]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后在 <code>vue.config.js</code> 中配置对应的代理</p><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/aServer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: process.env.VUE_APP_A_BASE_URL,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;/aServer&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/bServer&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: process.env.VUE_APP_B_BASE_URL,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;/bServer&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在启动开发环境的时候，就对我们的请求做了反向代理，避免了跨域问题的产生</p><blockquote><p>在项目上线的时候，一般会用一个静态资源服务器做前端入口，比如 nginx，那就可以在 nginx 上做反向代理</p></blockquote><h3 id="上线时候的反向代理"><a href="#上线时候的反向代理" class="headerlink" title="上线时候的反向代理"></a>上线时候的反向代理</h3><p>用 <code>nginx</code> 做反向代理，一般会在项目根目录有一个 <code>deployment</code> 的文件夹，会存放一项目上线用到的配置文件，比如 nginx 的配置文件</p><p>在项目根目录下新建 <code>deployment</code> 文件夹，并在其中新建 <code>test</code> 和 <code>prod</code> 两个文件夹，在建立一个 <code>nginx.conf.tmp</code> 文件，这个文件作为我们生成 <code>nginx.conf</code> 的模版文件，需要根据自己项目的部署情况修改参数。</p><p>deployment/nginx.conf.tmp</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span>  /usr/share/nginx/html/dist; <span class="comment"># 上线服务器存放的位置</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 默认请求</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> $uri $uri/ /index.html; <span class="comment"># 解决history路由刷新404的问题</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ .*\.(js|css)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">30d</span>; <span class="comment"># 静态资源设置强缓存</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># proxy_pass placeholder</span></span><br><span class="line">  <span class="comment"># 禁止访问 .htxxx 文件</span></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ /.ht</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新建一个 <code>genNginxConf.js</code> 这个文件可以根据第一个参数创建对应环境的 <code>default.conf</code> 文件，这是部署项目用到的 <code>nginx</code> 的配置文件</p><p>deployment/genNginxConf.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable @typescript-eslint/no-var-requires */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">&quot;dotenv&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dotenvExpand = <span class="built_in">require</span>(<span class="string">&quot;dotenv-expand&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configFile = path.join(__dirname, <span class="string">&quot;../vue.config.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> nginxFileName = <span class="string">&quot;default.conf&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> configBaseFile = path.join(__dirname, <span class="string">&quot;./nginx.conf.tmp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mode = process.argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filePath;</span><br><span class="line"><span class="keyword">let</span> envPath;</span><br><span class="line"><span class="keyword">if</span> (mode === <span class="string">&quot;t&quot;</span> || mode === <span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">  filePath = path.join(__dirname, <span class="string">&quot;test&quot;</span>, nginxFileName);</span><br><span class="line">  envPath = path.join(__dirname, <span class="string">&quot;../.env.t&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode === <span class="string">&quot;prod&quot;</span>) &#123;</span><br><span class="line">  filePath = path.join(__dirname, <span class="string">&quot;prod&quot;</span>, nginxFileName);</span><br><span class="line">  envPath = path.join(__dirname, <span class="string">&quot;../.env.production&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`没有对应的模式：<span class="subst">$&#123;mode&#125;</span>`</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载环境变量</span></span><br><span class="line"><span class="keyword">const</span> env = dotenv.config(&#123; <span class="attr">path</span>: envPath &#125;);</span><br><span class="line">dotenvExpand(env);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyPass = <span class="string">`</span></span><br><span class="line"><span class="string">  # 配置反向代理`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fs.statSync(configFile).isFile()) &#123;</span><br><span class="line">  <span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(configFile);</span><br><span class="line">  <span class="keyword">const</span> proxy = webpackConfig?.devServer?.proxy;</span><br><span class="line">  <span class="keyword">if</span> (proxy) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [k, &#123; target, pathRewrite &#125;] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(proxy)) &#123;</span><br><span class="line">      <span class="keyword">let</span> metaPath = k;</span><br><span class="line">      <span class="keyword">if</span> (pathRewrite) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(pathRewrite).forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">          metaPath = metaPath.replace(p, pathRewrite[p]);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      proxyPass += <span class="string">`</span></span><br><span class="line"><span class="string">  location <span class="subst">$&#123;k&#125;</span> &#123;</span></span><br><span class="line"><span class="string">    proxy_pass <span class="subst">$&#123;target&#125;</span><span class="subst">$&#123;metaPath&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">      `</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;没有配置 devServer.proxy，不需要设置代理&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;没有 vue.config.js 文件，不需要设置代理&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tmpStr = fs.readFileSync(configBaseFile, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf8&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">fs.writeFileSync(</span><br><span class="line">  filePath,</span><br><span class="line">  tmpStr.replace(<span class="string">&quot;# proxy_pass placeholder&quot;</span>, proxyPass)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;nginx 配置文件生成&quot;</span>);</span><br></pre></td></tr></table></figure><p>命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./deployment/genNginxConf.js t</span><br></pre></td></tr></table></figure><p>就可以看到 <code>deployment/test/default.conf</code> 文件被创建出来</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210909230517869.png" alt="image-20210909230515354"></p><p>把刚才的命令添加到 <code>package.json</code> 中的 <code>scripts</code> 中，方便之后的执行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;gennginx:t&quot;</span>: <span class="string">&quot;node ./deployment/genNginxConf.js t&quot;</span>,</span><br><span class="line"><span class="string">&quot;gennginx:prod&quot;</span>: <span class="string">&quot;node ./deployment/genNginxConf.js prod&quot;</span></span><br></pre></td></tr></table></figure><p>执行一下下面的命令，在 <code>deployment/prod</code> 下也会生层 <code>default.conf</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run gennginx:prod</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn gennginx:prod</span><br></pre></td></tr></table></figure><p>修改一下 <code>build</code> 和 <code>build:t</code> 命令，在执行这个命令的时候，可以同时生成新的 <code>nginx</code> 配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build &amp;&amp; npm run gennginx:prod&quot;</span>,</span><br><span class="line"><span class="string">&quot;build:t&quot;</span>: <span class="string">&quot;vue-cli-service build --mode t &amp;&amp; npm run gennginx:t&quot;</span>,</span><br></pre></td></tr></table></figure><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/17/%E7%AC%AC%E5%85%AD%E7%AF%87-%E9%A1%B9%E7%9B%AE%E5%B1%95%E7%A4%BA%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/">页面基本框架</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是-axios？&quot;&gt;&lt;a href=&quot;#什么是-axios？&quot; class=&quot;headerlink&quot; title=&quot;什么是 axios？&quot;&gt;&lt;/a&gt;什么是 axios？&lt;/h3&gt;&lt;p&gt;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 </summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>第四篇-添加工具规范 git commit message</title>
    <link href="https://wukang0718.com/2021/09/08/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%B7%BB%E5%8A%A0%E5%B7%A5%E5%85%B7%E8%A7%84%E8%8C%83-git-commit-message/"/>
    <id>https://wukang0718.com/2021/09/08/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%B7%BB%E5%8A%A0%E5%B7%A5%E5%85%B7%E8%A7%84%E8%8C%83-git-commit-message/</id>
    <published>2021-09-08T10:05:13.000Z</published>
    <updated>2021-09-10T01:35:04.948Z</updated>
    
    <content type="html"><![CDATA[<p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。</p><p>一般来说，commit message 应该清晰明了，说明本次提交的目的，是新增了一个功能或者修复了一个bug 之类的，但是随着项目组人员增多，仅靠口头的约束有时候还是会出错的，所以我们需要通过工具来帮助规范团队的 commit message。</p><h3 id="规范的-commit-message"><a href="#规范的-commit-message" class="headerlink" title="规范的 commit message"></a>规范的 commit message</h3><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header部分只有一行，包括三个字段：<code>type</code>（必需）、<code>scope</code>（可选）和<code>subject</code>（必需）。</p><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p><code>type</code>用于说明 commit 的类别，可以使用以下标识</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">feat：新功能（feature）</span><br><span class="line">fix：修补bug</span><br><span class="line">docs：文档（documentation）</span><br><span class="line">style： 格式（不影响代码运行的变动）</span><br><span class="line">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class="line">perf：优化相关，比如提升性能、体验</span><br><span class="line">test：增加测试</span><br><span class="line">build：构建</span><br><span class="line">ci：更改ci configuration</span><br><span class="line">chore：构建过程或辅助工具的变动</span><br><span class="line">revert：撤销commit/回滚版本</span><br></pre></td></tr></table></figure><p>如果 <code>type</code> 为 <code>feat</code> 和 <code>fix</code>，则该 commit 将肯定出现在 Change log 之中。其他情况默认不加入，可以修改，建议不要。</p><h5 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h5><p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h5 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h5><p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。有以下限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以动词开头，使用第一人称现在时，比如change，而不是changed或changes</span><br><span class="line">第一个字母小写</span><br><span class="line">结尾不加句号（.）</span><br></pre></td></tr></table></figure><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Body 部分是对本次 commit 的详细描述，可以分成多行。使用 <code>git commit</code> 会弹出多行编辑器</p><p>有两个注意点。</p><ol><li> 使用第一人称现在时，比如使用<code>change</code>而不是<code>changed</code>或<code>changes</code>。</li><li>应该说明代码变动的动机，以及与以前行为的对比。</li></ol><h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>Footer 部分只用于两种情况。</p><h5 id="不兼容变动"><a href="#不兼容变动" class="headerlink" title="不兼容变动"></a>不兼容变动</h5><p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><h5 id="关闭-Issue"><a href="#关闭-Issue" class="headerlink" title="关闭 Issue"></a>关闭 Issue</h5><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fix #1</span><br><span class="line"># 关闭多个</span><br><span class="line">fix #1, #2</span><br></pre></td></tr></table></figure><h3 id="validate-commit-msg"><a href="#validate-commit-msg" class="headerlink" title="validate-commit-msg"></a>validate-commit-msg</h3><h5 id="validate-commit-msg-是什么"><a href="#validate-commit-msg-是什么" class="headerlink" title="validate-commit-msg 是什么?"></a><code>validate-commit-msg</code> 是什么?</h5><p>一个可以校验 commit message 的二进制文件</p><h5 id="安装-validate-commit-msg"><a href="#安装-validate-commit-msg" class="headerlink" title="安装 validate-commit-msg"></a>安装 validate-commit-msg</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install validate-commit-msg --save-dev</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn add validate-commit-msg --dev</span><br></pre></td></tr></table></figure><p><code>validate-commit-msg</code> 的配置可以通过项目根目录下的 <code>.vcmrc</code> 文件，或者在 <code>package.json</code> 中修改</p><blockquote><p>.vcmrc 文件内容是一个正确的 json 格式</p></blockquote><p><code>validate-commit-msg</code> 提供了默认配置，一般项目开发不需要修改这个</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;feat&quot;</span>, <span class="string">&quot;fix&quot;</span>, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;style&quot;</span>, <span class="string">&quot;refactor&quot;</span>, <span class="string">&quot;perf&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;build&quot;</span>, <span class="string">&quot;ci&quot;</span>, <span class="string">&quot;chore&quot;</span>, <span class="string">&quot;revert&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;allowed&quot;</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;validate&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;multiple&quot;</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;warnOnFail&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;maxSubjectLength&quot;</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">&quot;subjectPattern&quot;</span>: <span class="string">&quot;.+&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;subjectPatternErrorMsg&quot;</span>: <span class="string">&quot;subject does not match subject pattern!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;helpMessage&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;autoFix&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中修改配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;validate-commit-msg&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">/* 这里写配置的参数 */</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <code>.vcmrc</code> 文件的优先级更高，如果 <code>.vcmrc</code> 文件不存在，才会从 <code>package.json</code> 中读取</p></blockquote><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><h5 id="husky是什么？"><a href="#husky是什么？" class="headerlink" title="husky是什么？"></a>husky是什么？</h5><p>husky 是一个 Git Hook 工具。husky 其实就是一个为 git 客户端增加 hook 的工具。将其安装到所在仓库的过程中它会自动在 <code>.git/</code> 目录下增加相应的钩子实现在<code>pre-commit</code>阶段就执行一系列流程保证每一个<code>commit</code> 的正确性。</p><h5 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a>安装 <code>husky</code></h5><p>不同的包管理工具使用不一样的安装方法：<a href="https://typicode.github.io/husky/#/?id=automatic-recommended">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx husky-init &amp;&amp; npm install       <span class="comment"># npm</span></span><br><span class="line">npx husky-init &amp;&amp; yarn              <span class="comment"># Yarn 1</span></span><br><span class="line">yarn dlx husky-init --yarn2 &amp;&amp; yarn <span class="comment"># Yarn 2</span></span><br></pre></td></tr></table></figure><p>执行之后会在项目根目录生成 <code>.husky</code> 目录，目录下会有一个 <code>pre-commit</code> 文件，把文件中的 <code>npm test</code> 修改为 <code>npm run lint</code>，如果你的项目中没有使用 <code>eslint</code>，可以把这个文件直接改名成 <code>commit-msg</code>，把文件中的 <code>npm test</code> 修改为 <code>npx validate-commit-msg</code>。</p><p>将 <code>pre-commit</code> 文件复制两份命名为 <code>commit-msg</code> 和 <code>pre-push</code> </p><p><code>commit-msg</code> 文件中的 <code>npm run lint</code> 修改为 <code>npx validate-commit-msg</code></p><p><code>pre-push</code>  文件中的 <code>npm run lint</code> 修改为 <code>npm run test:unit</code>，如果你的项目没有使用单元测试可以不需要这个文件</p><ul><li>pre-commit    会在输入提交信息之前调用，校验 eslint</li><li>commit-msg  输入了提交信息，如果校验出错，放弃提交</li><li>pre-push        git push 执行的时候 更新了远程引用但尚未推送到远程时被调用</li></ul><p>测试一下 <code>validate-commit-msg</code> 和 <code>husky</code> 是否生效</p><p>回到项目根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;随便提交点&quot;</span></span><br></pre></td></tr></table></figure><p>出现以下信息代表 <code>commit-msg</code> 钩子中执行的 <code>validate-commit-msg</code> 生效了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AINVALID COMMIT MSG: does not match &quot;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&quot; !</span><br><span class="line">随便提交点</span><br><span class="line">husky - commit-msg hook exited with code 1 (error)</span><br></pre></td></tr></table></figure><p>做一次正确的提交，commit msg 应该必须包含 <code>type</code> <code>:</code> 和 <code>subject</code>，<code>scope</code> 是可选的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;chore: 添加husky和validate-commit-msg校验commit msg&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908164354523.png" alt="image-20210908164353225"></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908164324605.png" alt="image-20210908164322923"></p><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><h5 id="Commitizen-是什么"><a href="#Commitizen-是什么" class="headerlink" title="Commitizen 是什么?"></a>Commitizen 是什么?</h5><p>Commitizen 是一个撰写合格 Commit message 的工具。</p><h5 id="安装-Commitizen"><a href="#安装-Commitizen" class="headerlink" title="安装 Commitizen"></a>安装 Commitizen</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen --save-dev</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn add commitizen --dev</span><br></pre></td></tr></table></figure><p>初始化项目中使用 cz-conventional-changelog 适配器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 包管理工具执行</span></span><br><span class="line">npx commitizen init cz-conventional-changelog --save-dev --save-exact</span><br><span class="line"><span class="comment"># yarn 包管理工具执行</span></span><br><span class="line">npx commitizen init cz-conventional-changelog --yarn --dev --exact</span><br></pre></td></tr></table></figure><p><code>package.json</code> 文件中会自动添加 <code>commitizen</code> 配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后，凡是用到<code>git commit</code>命令，一律改为使用 <code>cz</code>。这时，就会出现选项，用来生成符合格式的 Commit message。</p><p>测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">npx cz</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908172551371.png" alt="image-20210908172549706"></p><p>使用 <code>git log</code> 可以查看刚才的 commit message</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908172700188.png" alt="image-20210908172658898"></p><p>还可以在 <code>package.json</code> 中添加更加方便的执行命令，在 <code>package.json</code> 的 <code>scripts</code> 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;cz&quot;</span>: <span class="string">&quot;cz&quot;</span>,</span><br><span class="line"><span class="string">&quot;commit&quot;</span>: <span class="string">&quot;git add . &amp;&amp; cz&quot;</span></span><br></pre></td></tr></table></figure><p>之后在提交代码，就可以在项目根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run commit</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn commit</span><br></pre></td></tr></table></figure><h3 id="生成-changelog"><a href="#生成-changelog" class="headerlink" title="生成 changelog"></a>生成 changelog</h3><p>如果项目中所有的 commit 都是按照上述格式提交的，那么 <code>change log</code>，就可以用脚本自动生成。</p><p>生成的文档包括以下三个部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New features</span><br><span class="line">Bug fixes</span><br><span class="line">Breaking changes</span><br></pre></td></tr></table></figure><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p><a href="https://github.com/ajoslin/conventional-changelog">conventional-changelog</a> 就是生成 Change log 的工具</p><h5 id="安装-conventional-changelog"><a href="#安装-conventional-changelog" class="headerlink" title="安装 conventional-changelog"></a>安装 conventional-changelog</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install conventional-changelog-cli --save-dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">yarn add conventional-changelog-cli --dev</span><br></pre></td></tr></table></figure><p>命令行执行以下命令就会在项目根目录下生成 <code>CHANGELOG.md</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx conventional-changelog -p angular -i CHANGELOG.md -s</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908174529056.png" alt="image-20210908174527422"></p><p>之后在发布新的版本的时候都可以使用这个命令，往 <code>CHANGELOG.md</code> 文件中，添加新版本的log</p><p>可以把这个命令添加到 <code>package.json</code> 中的 <code>scripts</code> 下，方便之后的使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;changelog&quot;</span>: <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s&quot;</span></span><br></pre></td></tr></table></figure><p>之后就可以使用以下命令往 <code>CHANGELOG.md</code> 文件中，添加新版本的log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run changelog</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">yarn changelog</span><br></pre></td></tr></table></figure><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><p><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">阮一峰  Commit message 和 Change log 编写指南</a></p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/10/%E7%AC%AC%E4%BA%94%E7%AF%87-Vue3%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90axios/">集成axios</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。&lt;/p&gt;
&lt;p&gt;一般来说，commit message 应该清晰明了，说明本次提交的目的，是新增了一个功能或者修复了一个bug 之类的，但是随着项目组人员增多，仅靠口头的约束有时候还是</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>第三篇-vue3 项目中配置模式和环境变量</title>
    <link href="https://wukang0718.com/2021/09/08/%E7%AC%AC%E4%B8%89%E7%AF%87-vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://wukang0718.com/2021/09/08/%E7%AC%AC%E4%B8%89%E7%AF%87-vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</id>
    <published>2021-09-08T03:15:47.000Z</published>
    <updated>2021-09-08T10:07:19.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue内置的模式"><a href="#Vue内置的模式" class="headerlink" title="Vue内置的模式"></a>Vue内置的模式</h3><p><code>Vue CLI </code> 内置了三种模式</p><ul><li><p><code>developement</code>  模式，使用 <code>vue-cli-service serve</code> 命令的时候，启动的开发环境就是这个模式，这个模式下运行的 <code>webpack</code> 会启动热更新，不会对资源进行 hash 也不会打出 vendor bundles，目的是为了在开发的时候能够快速重新构建。</p></li><li><p><code>test</code> 模式，使用 <code>vue-cli-service test:unit</code> 命令的时候，启动的单元测试的环境就是这个模式，这个模式下的 <code>webpack</code> 不会处理图片以及一些对单元测试非必需的其他资源。</p></li><li><p><code>production</code> 模式，<code>vue-cli-service build</code> 命令的时候，运用的就是这个模式，这个模式的 <code>webpack</code>  会运行 <code>mode=production</code> 的配置</p></li></ul><h4 id="自定义运行模式"><a href="#自定义运行模式" class="headerlink" title="自定义运行模式"></a>自定义运行模式</h4><p>在执行 <code>vue-cli-service</code> 的命令的时候，可以通过 <code>--mode</code> 指定想要运行的模式，这将会覆盖默认的模式</p><p>例如在公司开发中，都会有一个测试环境，那么这个测试环境会有一些和开发/生产环境都不一样的东西，比如说我们后端服务的url，那么我们就可以给这个测试环境的打包指定一个模式，这样在打包的时候，会从指定模式的环境文件中加载环境变量，在 <code>package.json</code> 中添加一个 <code>script</code> 命令 <code>&quot;build:t&quot;: &quot;vue-cli-service build --mode t&quot;</code>，</p><blockquote><p>注意：尽量不要和默认的模式冲突</p></blockquote><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:t&quot;</span>: <span class="string">&quot;vue-cli-service build --mode t&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:unit&quot;</span>: <span class="string">&quot;vue-cli-service test:unit&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test:e2e&quot;</span>: <span class="string">&quot;vue-cli-service test:e2e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>npm run build:t</code> 的时候会运行 <code>t</code>  模式，会从 <code>.env</code> / <code>.env.local</code> / <code>.env.t</code> / <code>.env.t.local</code> 这些文件中加载环境变量，稍后来创建环境文件</p><h3 id="Vue内置的环境变量"><a href="#Vue内置的环境变量" class="headerlink" title="Vue内置的环境变量"></a>Vue内置的环境变量</h3><p><code>Vue CLI </code> 内置了两个环境变量</p><table><thead><tr><th>环境变量/模式</th><th>development</th><th>test</th><th>production</th></tr></thead><tbody><tr><td>NODE_ENV</td><td>development</td><td>test</td><td>production</td></tr><tr><td>BASE_URL（就是vue.config.js<code>中的</code>publicPath ，默认是 <code>/</code>）</td><td>/</td><td>/</td><td>/</td></tr></tbody></table><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><blockquote><p>当运行 <code>vue-cli-service</code> 命令时，所有的环境变量都从对应的<strong>环境文件</strong>中载入，这就给我们提供了自定义环境变量的方式</p></blockquote><h4 id="什么是环境文件"><a href="#什么是环境文件" class="headerlink" title="什么是环境文件"></a>什么是环境文件</h4><p>在项目根目录下可以创建四种形式的环境文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env                # 在所有的环境中被载入</span><br><span class="line">.env.local          # 在所有的环境中被载入，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定的模式中被载入</span><br><span class="line">.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略</span><br></pre></td></tr></table></figure><p>环境文件只包含环境变量的“键=值”对：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_BASE_URL=<span class="string">&quot;http://dev.server.com&quot;</span> <span class="comment">// 后端服务的url</span></span><br></pre></td></tr></table></figure><h4 id="环境文件的优先级"><a href="#环境文件的优先级" class="headerlink" title="环境文件的优先级"></a>环境文件的优先级</h4><ol><li>Vue CLI 启动时已经存在的环境变量拥有最高优先级，不会被 <code>.env</code> 文件覆盖，但是可以被 <code>.env.[mode]</code> 文件覆盖</li><li>为一个特定模式准备的环境文件 (例如 <code>.env.t</code>) 将会比一般的环境文件 (例如 <code>.env</code>) 拥有更高的优先级。</li></ol><blockquote><p>环境文件是通过运行 <code>vue-cli-service</code> 命令载入的，因此环境文件发生变化，你需要重启服务。</p></blockquote><h4 id="动态计算环境变量"><a href="#动态计算环境变量" class="headerlink" title="动态计算环境变量"></a>动态计算环境变量</h4><p>在 <code>vue.config.js</code> 文件中计算环境变量。它们仍然需要以 <code>VUE_APP_</code> 前缀开头。</p><p>例如计算每次编译的版本和时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable @typescript-eslint/no-var-requires */</span></span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">&quot;./package.json&quot;</span>);</span><br><span class="line">process.env.VUE_APP_VERSION = pkg.version;</span><br><span class="line">process.env.VUE_APP_DATE_TIME = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString();</span><br></pre></td></tr></table></figure><h3 id="环境变量的运用"><a href="#环境变量的运用" class="headerlink" title="环境变量的运用"></a>环境变量的运用</h3><p><strong>只有 <code>NODE_ENV</code>，<code>BASE_URL</code> 和以 <code>VUE_APP_</code> 开头的变量将通过 <code>webpack.DefinePlugin</code> 静态地嵌入到代码中</strong></p><p>例如上面提到的 <code>VUE_APP_BASE_URL</code> 就是已 <code>VUE_APP</code> 开头的</p><blockquote><p>建议不要在任何文件修改 <code>BASE_URL</code> 的值，在执行 <code>vue-cli-service build</code> 命令的模式环境文件里都建议把 <code>NODE_ENV</code> 改成 <code>production</code></p></blockquote><p>先来配置一下环境变量看一下环境变量的用法</p><p>在根目录新建以下文件</p><ul><li>.env.development  指定开发环境使用的环境变量</li><li>.env.production 指定生产环境使用的环境变量</li><li>.env.t 指定测试环境使用的环境变量</li></ul><p>就简单配置一个用来区分运行环境的环境变量 <code>VUE_APP_ENV</code> ，这个变量可以任意取，只要求已 <code>VUE_APP</code> 开头，并且应该在所有的环境文件都包含这个环境变量</p><p>.env.development</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_ENV=dev</span><br></pre></td></tr></table></figure><p>.env.production</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_ENV=prod</span><br></pre></td></tr></table></figure><p>.env.t</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_ENV=t</span><br></pre></td></tr></table></figure><h4 id="在项目中使用环境变量"><a href="#在项目中使用环境变量" class="headerlink" title="在项目中使用环境变量"></a>在项目中使用环境变量</h4><p>通过 <code>process.env.[环境变量]</code> 的方式获取到运行模式的环境文件配置的环境变量的值</p><p>在 <code>src/App.vue</code> 中使用一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 忽略其他代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span>&#123;&#123; env &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Ref, ref &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/reactivity&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> env: Ref = ref(process.env.VUE_APP_ENV); <span class="comment">// 启动项目这个值是dev</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908102247092.png" alt="20210908102247092"></p><p>运行其他模式看一下结果，命令行执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn serve --mode t</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">npm run serve --mode t</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908102424926.png" alt="image-20210908102424279"></p><p>运行 <code>production</code> 模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn serve --mode production</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">npm run serve --mode production</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908102613566.png" alt="image-20210908102612902"></p><blockquote><p>环境变量不只是在 <code>src </code> 下的文件可以使用，在根目录下的 <code>babel.config.js</code> / <code>vue.config.js</code> 等文件中也可以使用.</p></blockquote><h4 id="在-public-index-html-中使用环境变量"><a href="#在-public-index-html-中使用环境变量" class="headerlink" title="在 public/index.html 中使用环境变量"></a>在 public/index.html 中使用环境变量</h4><p>所有解析出来的环境变量都可以在 <code>public/index.html</code> 中以 **<a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#%E6%8F%92%E5%80%BC">HTML 插值</a>**中介绍的方式使用。</p><p>因为 index 文件被用作模板，所以你可以使用 <a href="https://lodash.com/docs/4.17.10#template">lodash template</a> 语法插入内容：</p><ul><li><code>&lt;%= VALUE %&gt;</code> 用来做不转义插值；</li><li><code>&lt;%- VALUE %&gt;</code> 用来做 HTML 转义插值；</li><li><code>&lt;% expression %&gt;</code> 用来描述 JavaScript 流程控制。</li></ul><p>例如在 <code>index.html</code> 使用一个 <code>meta</code> 标签标记我们项目的模式、版本和打包的时间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= VUE_APP_ENV %&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= VUE_APP_VERSION %&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;&lt;%= VUE_APP_DATE_TIME %&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行打包命令看 <code>dist</code>  目录输出的html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn build --mode development</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">npm run build --mode development</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908110355526.png" alt="image-20210908110354110"></p><p>运行 <code>t</code> 模式的打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn build:t</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">npm run build:t</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908110453866.png" alt="image-20210908110452360"></p><p>运行 <code>production</code> 模式的打包，<code>build </code> 的默认模式就是 <code>production</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908110603341.png" alt="image-20210908110602026"></p><h3 id="实际开发中还需要的运行环境"><a href="#实际开发中还需要的运行环境" class="headerlink" title="实际开发中还需要的运行环境"></a>实际开发中还需要的运行环境</h3><p>经过刚才的打包发现，在指定 <code>--mode t</code>  的时候，打包后的文件没有被压缩</p><p>这是因为没有指定 <code>t</code> 模式的 <code>NODE_ENV=production</code> ，所以使用的是 <code>development</code> 的 <code>webpack</code> 配置</p><p>所以要在环境文件中指定 <code>NODE_ENV</code> 的值</p><p>.env.development</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=development</span><br></pre></td></tr></table></figure><p>.env.t</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production</span><br></pre></td></tr></table></figure><p>.env.production</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=production</span><br></pre></td></tr></table></figure><p>再次执行 <code>yarn build:t</code> 或 <code>npm run build:t</code>，<code>dist</code> 目录下的文件就已经是压缩过的了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908111156675.png" alt="image-20210908111155342"></p><p>还有其他实际开发中需要配置的环境变量，比如后端接口的地址，具体看自己项目吧</p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/08/%E7%AC%AC%E5%9B%9B%E7%AF%87-%E6%B7%BB%E5%8A%A0%E5%B7%A5%E5%85%B7%E8%A7%84%E8%8C%83-git-commit-message/">添加工具规范 git commit message</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue内置的模式&quot;&gt;&lt;a href=&quot;#Vue内置的模式&quot; class=&quot;headerlink&quot; title=&quot;Vue内置的模式&quot;&gt;&lt;/a&gt;Vue内置的模式&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Vue CLI &lt;/code&gt; 内置了三种模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>第二篇-Vue3 项目中集成 element-plus</title>
    <link href="https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/"/>
    <id>https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/</id>
    <published>2021-09-07T11:06:07.000Z</published>
    <updated>2021-09-13T05:30:32.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于上次使用 cli 搭建的 vue3 的项目来添加 element-plus <a href="https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%94%A8vue-cli%20%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/">cli搭建vue3项目</a></p></blockquote><h3 id="安装element-plus"><a href="#安装element-plus" class="headerlink" title="安装element-plus"></a>安装element-plus</h3><p>在项目所在目录打开命令行工具，执行以下命令安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add element-plus</span><br></pre></td></tr></table></figure><p>我这里安装的最新版本是 <code>1.1.0-beta.9</code></p><h3 id="升级sass、sass-loader"><a href="#升级sass、sass-loader" class="headerlink" title="升级sass、sass-loader"></a>升级sass、sass-loader</h3><p>为什么要升级 <code>sass</code>、 <code>sass-loader</code>?</p><p>使用脚手架安装的 <code>sass</code> 的版本是 <code>1.26.5</code> ， <code>sass-loader</code> 的版本是 <code>8.0.2</code>，而 <code>element-plus@1.1.0-beta.9</code> 版本的源码中使用的 <code>sass</code> 的版本是 <code>1.39.0</code>, <code>sass-loader</code> 的版本是 <code>10.1.1</code></p><p>那我们就需要安装一下这两个版本，命令行执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install sass@1.39.0 sass-loader@10.1.1 --save-dev</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add sass@1.39.0 sass-loader@10.1.1 --dev</span><br></pre></td></tr></table></figure><h3 id="使用按需引入"><a href="#使用按需引入" class="headerlink" title="使用按需引入"></a>使用按需引入</h3><p>为什么要使用按需引入?</p><p><code>element-plus</code> 的组件比较多，而我们的项目开发中并不一定会用到所有的组件，如果我们直接引入所有的组件，那么项目打包之后的文件体积较大，会导致浏览器的加载时间长，从而导致一些白屏时间长等的问题。</p><p>使用按需引入之后，在项目打包的时候，只会把我们引入的组件进行打包，其他我们没有引入使用的组件，不会打包我们的项目中，减少我们项目的体积，加快浏览器的加载效率。</p><h4 id="配置按需引入"><a href="#配置按需引入" class="headerlink" title="配置按需引入"></a>配置按需引入</h4><ol><li>首先需要下载一个 babel 的插件 <code>babel-plugin-import</code>，命令行执行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn add babel-plugin-import --dev</span><br></pre></td></tr></table></figure><ol start="2"><li>找到项目根目录下的 <code>babel.config.js</code> 文件</li></ol><p>添加 <code>babel.config.js</code> 配置，将文件内容修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&quot;@vue/cli-plugin-babel/preset&quot;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;import&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&quot;element-plus&quot;</span>,</span><br><span class="line">        <span class="comment">// 引入组件</span></span><br><span class="line">        <span class="attr">customName</span>: <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">          name = name.slice(<span class="number">3</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">`element-plus/lib/components/<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 不引入样式，因为之后会做主题定制，所以需要引入所有样式的scss文件</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="测试按需引入是否正确"><a href="#测试按需引入是否正确" class="headerlink" title="测试按需引入是否正确"></a>测试按需引入是否正确</h4><p>在 <code>src/main.ts</code> 中，引入 <code>element-plus</code> 的样式文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;element-plus/dist/index.css&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/App.vue</code> 中，添加 <code>script</code> 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>template</code> 中添加一个 <code>el-button</code> 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  // ... 省略css代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行项目，浏览器访问</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906220507547.png" alt="image-20210906220500007"></p><p><code>el-button</code> 组件就很好的显示在了页面上</p><h4 id="把按需引入提取到单独的目录"><a href="#把按需引入提取到单独的目录" class="headerlink" title="把按需引入提取到单独的目录"></a>把按需引入提取到单独的目录</h4><p>为什么要提取到单独的目录来，有一个好处就是只需要在这里引入一次，并注册成全局的组件之后，就不需要在每个需要用到 element-plus 的组件里面再次引入了。</p><p>我一般会在 <code>src</code> 目录下，创建一个 <code>theme</code> 文件夹，专门做按需加载和主题定制</p><p>创建一个 <code>theme</code> 文件夹，并在目录下创建一个 <code>index.ts</code> 的文件</p><p>将刚才引入 <code>el-button</code> 的代码放到这个文件中，并将组件注册为全局的组件，在这里文件里，我们将导出一个函数，这个函数会作为 <code>Vue</code> 的一个插件，在 <code>main.ts</code> 中通过 <code>app.use()</code> 的方式注册到全局</p><p>index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">&quot;./theme&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(store);</span><br><span class="line">app.use(router);</span><br><span class="line">app.use(Element);</span><br><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试一下我们的提取的按需引入是否正确</p><p>删掉刚才在 <code>App.vue</code> 中添加的 <code>script</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新浏览器，发现 <code>el-button</code> 的组件渲染的和之前一样，没有问题</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906221753197.png" alt="image-20210906221751777"></p><h4 id="配置-element-plus-的全局属性"><a href="#配置-element-plus-的全局属性" class="headerlink" title="配置 element-plus 的全局属性"></a>配置 element-plus 的全局属性</h4><p><code>element-plus</code> 还为我们提供了两个可以全局配置的属性， <code>size</code> 和 <code>zIndex</code>，还是在我们的 <code>theme/index.ts</code> 文件中配置，修改导出的函数，给 <code>app.config.globalProperties.$ELEMENT</code> 属性赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后打开浏览器，可以发现 <code>el-button</code> 的按钮，比刚才小了很多了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906222203900.png" alt="image-20210906222202680"></p><h4 id="配置-i18n"><a href="#配置-i18n" class="headerlink" title="配置 i18n"></a>配置 i18n</h4><p>ElementPlus 组件内部默认使用英语，如果我们希望我们的项目中默认使用中文，就需要对 <code>element-plus</code> 配置 <code>i18n</code>，先来看一个默认英文的例子</p><p>在 <code>theme/index.ts</code> 文件中引入 <code>ElCalendar</code> 组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>src/App.vue</code> 中使用 <code>ElCalendar</code> 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-calendar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器会发现日历的头部和按钮都是显示的英文</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906222946766.png" alt="image-20210906222945434"></p><p>接下来我们配置 <code>i18n</code>，还是在我们的 <code>theme/index.ts</code> 文件中，引入 <code>ElConfigProvider</code> 组件，并在 <code>src/App.vue</code> 中使用</p><p>theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar, ElConfigProvider &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">  app.use(ElConfigProvider);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>测试按需引入<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-calendar</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&quot;element-plus/lib/locale/lang/zh-cn&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line">  // ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次打开浏览器，就可以看到日历的按钮已经变成中文了，但是日历的头部还是英文的展示，这是因为 <code>element-plus</code> 的中的时间和日期相关的组件，都使用了 <code>dayjs</code> 格式化，所以我们这里想把日历的头部 改成中文还需要引入一下 <code>dayjs</code> 的中文包</p><p>在 <code>theme/index.ts</code>  中添加引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;dayjs/locale/zh-cn&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="配置主题定制"><a href="#配置主题定制" class="headerlink" title="配置主题定制"></a>配置主题定制</h3><p>element-plus 给我们提供了一套默认的主题，同时给我们提供了四种方法，可以进行不同程度的样式自定义。这里只说其中的一种，其他的方式，感兴趣的可以前往<a href="https://element-plus.org/#/zh-CN/component/custom-theme">官网查阅</a></p><h4 id="通过修改scss变量的方式，替换主题的样式"><a href="#通过修改scss变量的方式，替换主题的样式" class="headerlink" title="通过修改scss变量的方式，替换主题的样式"></a>通过修改scss变量的方式，替换主题的样式</h4><p>在我们的 <code>src/theme</code> 目录下新建一个 <code>element-variables.scss</code> 的文件，之后我们需要定制的 <code>element-plus</code> 主题的 <code>scss</code> 变量都会在这个文件重写。</p><blockquote><p>不要使用官网推荐的 <code>element-theme</code> 工具，已经很久没有人维护了，在最新版本的node环境下使用会报错。</p></blockquote><p>在我们项目的根目录下找到 <code>node_modules/element-plus/theme-chalk/src/common/var.scss</code> 这个文件，这里面所有后面带有 <code>!default</code> 的就是我们可以修改的所有的 <code>scss</code> 的变量了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907132211742.png" alt="image-20210907132210264"></p><p>比如说我们想要修改一下 <code>primary</code> 的样式，我们查找 <code>var.scss</code> 文件发现，关于 <code>primary</code> 颜色的定义就在第 21 行，<code>$--colors</code> 的初始值就是带有 <code>!default</code> 的， 我们在 <code>element-variables.scss</code> 文件中对 <code>$--colors</code> 重新赋值就可以修改 <code>primary</code> 的颜色</p><p>src/theme/element-variables.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$--colors</span>: (</span><br><span class="line">  <span class="string">&#x27;primary&#x27;</span>: (</span><br><span class="line">    <span class="string">&#x27;base&#x27;</span>: <span class="number">#000</span>,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>注意：要通过修改scss变量的方式自定义主题，必须重新设置 font 文件路径</p><p>引入 element-plus/packages/theme-chalk/src/index.scss 之后，就可以修改 scss 的变量了</p></blockquote><p>所以我们在 <code>src/theme </code>  文件夹下在新建一个 <code>index.scss</code> 文件，用来引入自定义的主题并处理 font 路径和 <code>element-plus </code> 的 scss 文件</p><p>src/theme/index.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./element-variables.scss&quot;</span>;</span><br><span class="line"><span class="variable">$--font-path</span>: <span class="string">&quot;~element-plus/theme-chalk/fonts&quot;</span>; </span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;~element-plus/packages/theme-chalk/src/index&quot;</span>;</span><br></pre></td></tr></table></figure><p>在 <code>src/theme/index.ts</code> 文件中引入这个文件 <code>import &quot;./index.scss&quot;;</code></p><p>src/theme/index.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; App &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dayjs/locale/zh-cn&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ElButton, ElCalendar, ElConfigProvider &#125; <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (app: App): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  app.config.globalProperties.$ELEMENT = &#123; <span class="attr">size</span>: <span class="string">&quot;small&quot;</span> &#125;;</span><br><span class="line">  app.use(ElButton);</span><br><span class="line">  app.use(ElCalendar);</span><br><span class="line">  app.use(ElConfigProvider);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>删除 <code>src.main.ts</code> 中引入样式的代码 <code>import &quot;element-plus/dist/index.css&quot;;</code></p><p>刷新浏览器就可以看到我们修改的主题的样式了</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907174923042.png" alt="image-20210907174921543"></p><h3 id="配置-scss-全局变量文件"><a href="#配置-scss-全局变量文件" class="headerlink" title="配置 scss 全局变量文件"></a>配置 scss 全局变量文件</h3><p>在我们的项目开发过程中，不可能只使用 <code>element-plus</code> 的组件和样式，所以我们会需要维护一套我们自己的 <code>scss</code> ，为了样式的统一和以后的好维护，我们应该使用和 <code>element-plus</code> 类似的这种全局变量的方式，定义我们的统一的颜色、边框等等</p><p>在 <code>src/assets</code> 目录下新建一个 <code>scss</code> 文件夹，在其中新建以下文件</p><ul><li>var.scss 定义全局的变量</li><li>mixin.scss 定义全局的混入</li><li>fun.scss 定义全局的函数</li><li>common.scss 全局的样式，这个文件会定义一些具体的选择器的样式，上面的其他文件中定义都是不会被直接编译出 css 代码的</li></ul><h4 id="在-sass-loader中配置成全局scss文件"><a href="#在-sass-loader中配置成全局scss文件" class="headerlink" title="在 sass-loader中配置成全局scss文件"></a>在 sass-loader中配置成全局scss文件</h4><p>在项目根目录下创建 <code>vue.config.js</code> 文件，并添加 <code>css</code> 配置</p><p>vue.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  <span class="attr">css</span>: &#123;    <span class="attr">loaderOptions</span>: &#123;      <span class="attr">scss</span>: &#123;        <span class="attr">additionalData</span>: <span class="string">`          @import &quot;~@/assets/scss/var.scss&quot;;          @import &quot;~@/assets/scss/mixin.scss&quot;;          @import &quot;~@/assets/scss/fun.scss&quot;;        `</span>,      &#125;,    &#125;,  &#125;,&#125;;</span><br></pre></td></tr></table></figure><p>验证一下全局的 scss 文件是否配置成功</p><p>在 <code>src/assets/scss/var.sass</code> 中添加变量 <code>$primary-color: red;</code>，把刚才修改的 <code>src/theme/element-variables</code>  文件中的 <code>primary</code> 的颜色设置成 <code>$primary-color</code></p><p>src/assets/scss/var.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-color</span>: red;</span><br></pre></td></tr></table></figure><p>src/theme/element-variables.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$--colors</span>: (  <span class="string">&#x27;primary&#x27;</span>: (    <span class="string">&#x27;base&#x27;</span>: <span class="variable">$primary-color</span>,  ),);</span><br></pre></td></tr></table></figure><p>在 <code>src/assets/scss/fun.scss</code> 文件中添加一个 <code>toRem</code> 函数，在 <code>src/App.vue</code> 中调用这个函数</p><p>在 <code>src/App.vue</code> 中添加一个标签 <code>&lt;div class=&quot;bg-red&quot;&gt;&lt;/div&gt;</code>，在 <code>style</code> 标签里给 div 定义一个样式，使用 <code>$primary-color </code> 变量和 <code>toRem</code> 函数</p><p>src/assets/scss/fun.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> toRem(<span class="variable">$px</span>) &#123;  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="number">75px</span> * <span class="number">1rem</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际开发中，如果有需要 px 转 rem 的操作，建议可以使用 <code>postcss</code> 的插件 <code>pxtorem</code> ，可以不用每次都要都要写 toRem()，这里只是用来做一下演示</p></blockquote><p>src/App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-config-provider</span> <span class="attr">:locale</span>=<span class="string">&quot;zhCn&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略其余代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-config-provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// ... 省略js代码</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.bg-red</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="built_in">toRem</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="built_in">toRem</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: $primary-color;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目编译的时候给出了以下警告，使用 <code>/</code> 表示除法已经被废弃，应该使用 <code>math.div</code> 方法</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210908102742349.png" alt="image-20210908102741714"></p><p>修改一下 <code>src/assets/scss/fun.scss</code> 文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&quot;sass:math&quot;</span>;</span><br><span class="line"><span class="keyword">@function</span> toRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> math.div(<span class="variable">$px</span>, <span class="number">75px</span>) * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开浏览器可以看到红色的按钮，和 div 的样式，宽高已经是 <code>rem</code> 的单位，并且背景也红色</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210907185539501.png" alt="image-20210907185538057"></p><p>最后，在 <code>src/main.ts</code> 中引入 <code>common.scss</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/scss/common.scss&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="添加-reset-scss-文件"><a href="#添加-reset-scss-文件" class="headerlink" title="添加 reset.scss 文件"></a>添加 reset.scss 文件</h3><p>在项目开发中，为了减少浏览器在默认行高、页边距和标题字体大小等方面的不一致，需要重置样式表</p><p>在 <code>src/assets/scss</code> 下新建 <code>reset.scss</code> 文件</p><p>src/assets/scss/reset.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, applet, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, pre,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, acronym, <span class="selector-tag">address</span>, big, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, s, <span class="selector-tag">samp</span>,</span><br><span class="line">small, strike, <span class="selector-tag">strong</span>, sub, <span class="selector-tag">sup</span>, tt, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, u, <span class="selector-tag">i</span>, center,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, embed, </span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, </span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, output, ruby, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">font</span>: inherit;</span><br><span class="line"><span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>, </span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span> &#123;</span><br><span class="line"><span class="attribute">quotes</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">blockquote</span>:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">content: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">content</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br><span class="line"><span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>src/main.ts</code> 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/assets/scss/reset.scss&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="完结"><a href="#完结" class="headerlink" title="### 完结"></a>### 完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/08/%E7%AC%AC%E4%B8%89%E7%AF%87-vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/">配置运行环境</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基于上次使用 cli 搭建的 vue3 的项目来添加 element-plus &lt;a href=&quot;https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>第一篇-使用vue-cli 创建Vue3项目</title>
    <link href="https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%94%A8vue-cli%20%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/"/>
    <id>https://wukang0718.com/2021/09/06/%E7%AC%AC%E4%B8%80%E7%AF%87-%E4%BD%BF%E7%94%A8vue-cli%20%E5%88%9B%E5%BB%BAVue3%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-09-06T06:24:36.000Z</published>
    <updated>2021-09-08T10:07:39.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步：安装-nodejs"><a href="#第一步：安装-nodejs" class="headerlink" title="第一步：安装 nodejs"></a>第一步：安装 <code>nodejs</code></h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>已经安装可以跳过到 <a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%AE%89%E8%A3%85vue-cli">下一步</a></p><p><code>nodejs</code> 官网地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906093128780.png" alt="image-20210906093127268"></p><p>长期维护版（即稳定版）下选择对应的操作系统点击即可下载，之后一直点击下一步，即可完成安装</p><h4 id="安装完成后检查是否安装成功"><a href="#安装完成后检查是否安装成功" class="headerlink" title="安装完成后检查是否安装成功"></a>安装完成后检查是否安装成功</h4><p>打开命令行窗口</p><ul><li>windows系统使用<code>win+R</code>，之后输入 <code>cmd</code></li><li>mac 用户，打开 <code>terminal</code> / <code>终端</code></li></ul><p>输入 <code>node -v</code> 查看 <code>nodejs</code> 版本，输入 <code>npm -v</code> 查看 <code>npm</code> 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment"># v14.17.4</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># 7.21.1</span></span><br></pre></td></tr></table></figure><p>显示对应的版本就表示安装成功</p><h3 id="第二步：安装vue-cli"><a href="#第二步：安装vue-cli" class="headerlink" title="第二步：安装vue-cli"></a>第二步：安装vue-cli</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>已经安装可以跳过到 <a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE">下一步</a></p><p><code>vue-cli</code> 官网：<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a></p><p>建议全局安装</p><p>在命令行执行以下命令，mac用户需要 <code>sudo</code> 执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h4 id="安装完成后检查是否安装成功-1"><a href="#安装完成后检查是否安装成功-1" class="headerlink" title="安装完成后检查是否安装成功"></a>安装完成后检查是否安装成功</h4><p>命令行执行 <code>vue --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line"><span class="comment"># @vue/cli 4.5.13</span></span><br></pre></td></tr></table></figure><p>看到正确的版本号，表示安装成功</p><h3 id="第三步：使用脚手架创建项目"><a href="#第三步：使用脚手架创建项目" class="headerlink" title="第三步：使用脚手架创建项目"></a>第三步：使用脚手架创建项目</h3><p>在命令行执行 <code>vue create &lt;app-name&gt;</code> 命令创建项目，例如，我现在创建一个名叫 <code>cli-create-project</code> 的项目，在命令执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create cli-create-project</span><br></pre></td></tr></table></figure><ol><li>选择 preset</li></ol><p>命令行窗口会提示请选择一个 preset，建议选择第三个 <code>Manually select features</code>，选择第一个或者第二个，创建的项目会比较简陋，只有 <code>babel</code> 和 <code>eslint</code> ，项目中必备的 <code>vue-router</code> 等的不会被创建，选择第三项（手动选择功能）,按上下键选择，回车键确认，进入下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906131902143.png" alt="image-20210906131900957"></p><ol start="2"><li><p>选择功能</p><p>回车之后，命令行窗口就到了选择功能，按上下键切换功能，空格选中和取消选中，回车会进入到下一步。</p></li></ol><ul><li><p>Choose Vue version  必选，之后会选择使用Vue2还是Vue3</p></li><li><p>Babel   必选</p></li><li><p>TypeScript  选中之后，项目会安装typescript的依赖，建议是Vue2的话，就不用选了，Vue3的还是可以使用TypeScript的</p></li><li><p>Progressive Web App (PWA) Support 可选可不选，在项目中添加pwa支持， 会在项目中添加  <code>Service Workers</code></p></li><li><p>Router  必选，在项目中安装 <code>vue-router</code></p></li><li><p>Vuex 按照项目的需求来，会在项目中安装 <code>vuex</code>，一般不是很小的项目的话，都会用到的</p></li><li><p>CSS Pre-processors 一般都选，安装css的预处理器</p></li><li><p>Linter / Formatter 必选，安装 <code>eslint</code>  和一个格式化代码的工具会校验和格式化代码</p></li><li><p>Unit Testing  集成单元测试，看自己情况安装吧</p></li><li><p>E2E Testing   集成端到端测试，也是看自己情况安装吧</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906132942128.png" alt="image-20210906132940985"></p></li></ul><p>回车进入下一步</p><ol start="3"><li><p>选择 vue 版本，这里选择3.x</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133106123.png" alt="image-20210906133105077"></p></li></ol><p>回车进入下一步</p><ol start="4"><li><p>选择是否使用类组件语法，Vue3的话就使用不了，输入 n 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133257131.png" alt="image-20210906133256064"></p></li><li><p>选择是否使用Babel与TypeScript一起用于自动检测的填充，使用，输入 Y 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133500237.png" alt="image-20210906133459216"></p></li><li><p>选择是否使用 history 模式的路由，是否都是可以的，我就选择使用，输入 Y 回车</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906133606102.png" alt="image-20210906133604983"></p></li><li><p>选择一个 css 的预处理器，这里按照个人的喜好选择吧，我后续要添加 element-plus 的UI框架，所以就选择 <code>Sass/SCSS (with dart-sass)</code>，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134122504.png" alt="image-20210906134121436"></p></li><li><p>选择一个 lint 和 一个格式化代码的工具，我比较喜欢用 <code>ESLint + Prettier</code> ，就选择这个了,回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134326954.png" alt="image-20210906134325968"></p></li><li><p>选择 lint 执行的时机，在保存时执行，或者是在代码提交的时候，需要自动修复，我不需要自动修复，就选择 <code>Lint on save</code> 了，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134617867.png" alt="image-20210906134616771"></p></li><li><p>选择一个单元测试的工具，我用 <code>Jest</code> 比较多，这里就选择 jest，如果在第二步的时候，没有选择 <code>Unit Testing </code>，就没有这一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906134836641.png" alt="image-20210906134800340"></p></li><li><p>选择一个端到端的测试框架，同样我用 <code>Cypress</code>，比较多，我就选择这个了，同样的，如果在第二步的时候，没有选择 <code>E2E Testing</code>，就没有这一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135110221.png" alt="image-20210906135025225"></p></li><li><p>选择一个存放插件（eslint、postcss、babel…）配置文件的位置</p></li></ol><ul><li>In dedicated config files  存放在单独的配置文件中，会在项目目录下生成 <code>babel.config.js</code> 之类的文件</li><li>In package.json    把插件的配置都写在 packgae.json 文件中</li></ul><p>个人喜欢单独文件存放，就选择 <code>In dedicated config files</code> 了，回车到下一步</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135354389.png" alt="image-20210906135353240"></p><ol start="13"><li>是否要把这些配置保存为一个将来可复用的 preset。</li></ol><p>选择 Y 的话，会把 preset 保存在用户的 home 目录下一个名为 <code>.vuerc</code> 的 JSON 文件里。如果你想要修改被保存的 preset / 选项，可以编辑这个文件。</p><p>不想保存的话就输入n，回车开始下载项目模版并安装依赖</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906135728121.png" alt="image-20210906135726969"></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140107612.png" alt="image-20210906140106508"></p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140551585.png" alt="image-20210906140547185"></p><ol start="14"><li><p>安装完成，进入项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cli- create-project</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906140802792.png" alt="image-20210906140801601"></p></li></ol><p>这里默认安装的 <code>vue</code>、<code>vue-router</code> 、<code>vuex</code> 的版本都比较低，先升级一下版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@next vue-router@next vuex@next --save</span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">yarn add vue@next vue-router@next vuex@next --save</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141300225.png" alt="image-20210906141259069"></p><ol start="15"><li>升级完版本之后，运行项目看一下是否可以成功运行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>启动成功</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141416410.png" alt="image-20210906141415245"></p><p>在浏览器访问</p><p><img src="https://gitee.com/wu_kang0718/image/raw/master//20210906141514808.png" alt="image-20210906141513680"></p><p>使用 <code>vue-cli</code> 创建 vue3 项目就成功了</p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p>项目已经上传到 github 和 gitee</p><p>GitHub: <a href="https://github.com/wukang0718/cli-create-project">https://github.com/wukang0718/cli-create-project</a></p><p>Gitee: <a href="https://gitee.com/wu_kang0718/cli-create-project">https://gitee.com/wu_kang0718/cli-create-project</a></p><p>下一篇：<a href="https://wukang0718.com/2021/09/07/%E7%AC%AC%E4%BA%8C%E7%AF%87-Vue3-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%9B%86%E6%88%90-element-plus/">在项目中添加 element-plus</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一步：安装-nodejs&quot;&gt;&lt;a href=&quot;#第一步：安装-nodejs&quot; class=&quot;headerlink&quot; title=&quot;第一步：安装 nodejs&quot;&gt;&lt;/a&gt;第一步：安装 &lt;code&gt;nodejs&lt;/code&gt;&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="vue" scheme="https://wukang0718.com/categories/vue/"/>
    
    <category term="vue3项目" scheme="https://wukang0718.com/categories/vue/vue3%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="vue3" scheme="https://wukang0718.com/tags/vue3/"/>
    
    <category term="vue-cli" scheme="https://wukang0718.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>vue-router中query参数做自动加密、解密</title>
    <link href="https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/"/>
    <id>https://wukang0718.com/2021/09/04/vue-router%E4%B8%ADquery%E5%8F%82%E6%95%B0%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86/</id>
    <published>2021-09-04T10:46:27.000Z</published>
    <updated>2021-09-07T12:50:21.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router-插件，对vue-router使用中query参数做自动加密、解密"><a href="#vue-router-插件，对vue-router使用中query参数做自动加密、解密" class="headerlink" title="vue-router 插件，对vue-router使用中query参数做自动加密、解密"></a>vue-router 插件，对vue-router使用中query参数做自动加密、解密</h2><h3 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a>仓库地址</h3><p>​    github: <a href="https://github.com/wukang0718/vueRouterEncryption">https://github.com/wukang0718/vueRouterEncryption</a></p><p>​    gitee: <a href="https://gitee.com/wu_kang0718/vueRouterEncryption">https://gitee.com/wu_kang0718/vueRouterEncryption</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol><li>加密需要依赖 <code>crypto-js</code> 库，安装：</li></ol><p>npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js --save</span><br></pre></td></tr></table></figure><p>yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add crypto-js</span><br></pre></td></tr></table></figure><ol start="2"><li><p>将<code>utils</code>文件夹放入项目 <strong>（最好是放在router目录下 ）</strong> 中，在router的初始化文件中，引入<code>utils/query.js</code>的<code>stringifyQuery</code>和<code>parseQuery</code>方法，在<code>new VueRouter</code>是时候传递参数，</p></li><li><p>修改<code>utils/encryption.js</code>中的<code>baseCryptoCode</code>设置每个项目唯一的值</p></li></ol><p>例：（参考<a href="https://github.com/wukang0718/vueRouterEncryption/blob/master/index.js">index.js</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import VueRouter from &quot;vue-router&quot;;</span><br><span class="line">import &#123; stringifyQuery, parseQuery &#125; from &quot;./utils/query&quot;;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">const routes = [];</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  stringifyQuery: stringifyQuery, // 序列化query参数</span><br><span class="line">  parseQuery: parseQuery, // 反序列化query参数</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul><li><p>utils/encryption.js</p><p>文件提供加密和解密算法（默认在index.html中已经引入了crypto-js.js）</p><ul><li>getEncrypt 加密 对应的解密方法（getDecrypt）</li><li>getEncryptToBase64 加密后转base64 对应的解密方法（getDecryptByBase64）</li><li>getDecrypt 解密 对应的加密方法（getEncrypt）</li><li>getDecryptByBase64 对base64数据解密 先解析base64，在做解密 对应的加密方法（getEncryptToBase64）</li></ul></li><li><p>utils/query.js</p><p>文件提供了序列化和反序列化的方法</p><ul><li>stringifyQuery 序列化对象并 加密</li><li>parseQuery 解密 反序列化对象</li></ul></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>在创建路由的时候，添加两个方法</p></blockquote><ul><li><p>stringifyQuery: 序列化传入的query参数，方法可以接收一个对象参数</p><p>在<code>new Router</code>的时候传递这个属性，在序列化<code>query</code>参数的就执行这个方法，不会执行默认的方法，序列化后在地址栏显示序列化之后的参数</p></li><li><p>parseQuery: 解析地址栏参数，方法接收一个字符串参数</p><p>在<code>new Router</code>的时候传递这个属性，在解析<code>query</code>参数的时候，回执行这个方法，不会在执行默认的方法，</p><p><strong>注：</strong> 这个方法只解析<code>path</code>中的参数，或者浏览器刷新的时候的地址栏的参数，不会对在<code>query</code>参数对处理，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;foo?a=123&quot;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="number">345</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在执行这段代码的时候，<code>parseQuery</code>方法不会对<code>query:&#123;b: 345&#125;</code>进行解析,会解析<code>path:&quot;foo?a=123&quot;</code>中的<code>a=123</code>的字符串</p></li><li><p>序列化</p><p>vue-router在执行<code>createRoute</code>的时候，获取<code>fullPath</code>会执行<code>getFullPath</code>方法</p><p>createRouter 方法 会获取在 <code>new VueRouter</code>的时候传递的<code>stringifyQuery</code>方法，如果没有这个方法，就会在<code>getFullPath</code>的时候，使用默认的方法</p><p><strong>源码位置：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/route.js">“/vue-router/src/utils/route.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    record: ?RouteRecord,</span></span></span><br><span class="line"><span class="params"><span class="function">    location: Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    redirectedFrom?: ?Location,</span></span></span><br><span class="line"><span class="params"><span class="function">    router?: VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringifyQuery = router &amp;&amp; router.options.stringifyQuery</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> query: any = location.query || &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        query = clone(query)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">        <span class="attr">name</span>: location.name || (record &amp;&amp; record.name),</span><br><span class="line">        <span class="attr">meta</span>: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">        <span class="attr">path</span>: location.path || <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">hash</span>: location.hash || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        query,</span><br><span class="line">        <span class="attr">params</span>: location.params || &#123;&#125;,</span><br><span class="line">        <span class="attr">fullPath</span>: getFullPath(location, stringifyQuery),</span><br><span class="line">        <span class="attr">matched</span>: record ? formatMatch(record) : []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (redirectedFrom) &#123;</span><br><span class="line">        route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(route)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getFullPath 方法接收两个参数（路由对象， 序列化query的方法） 源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullPath</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">&#123; path, query = &#123;&#125;, hash = <span class="string">&#x27;&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">   _stringifyQuery</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stringify = _stringifyQuery || stringifyQuery</span><br><span class="line">    <span class="keyword">return</span> (path || <span class="string">&#x27;/&#x27;</span>) + stringify(query) + hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反序列化</p><p>在调用<code>push</code>的时候，会执行<code>this.router.match</code>方法，<code>match</code>方法会执行<code>normalizeLocation</code></p><p><code>normalizeLocation</code>通过<code>resolveQuery</code>方法解析path中的query，传入的三个参数（path中的?之后的参数数据字符串，使用push或replace方法传递的query参数，反序列化参数的方法）</p><p>反序列化方法会通过<code>router &amp;&amp; router.options.parseQuery</code>获取，如果在<code>new VueRouter</code>的时候传递了<code>parseQuery</code>方法，就是用该方法，如果没有就在<code>resolveQuery</code>方法中使用默认的方法</p><p><strong>源码地址：<a href="https://github.com/vuejs/vue-router/blob/dev/src/util/location.js">“/vue-router/src/utils/location.js”</a></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeLocation</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  raw: RawLocation,</span></span></span><br><span class="line"><span class="params"><span class="function">  current: ?Route,</span></span></span><br><span class="line"><span class="params"><span class="function">  append: ?boolean,</span></span></span><br><span class="line"><span class="params"><span class="function">  router: ?VueRouter</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> next: Location = <span class="keyword">typeof</span> raw === <span class="string">&#x27;string&#x27;</span> ? &#123; <span class="attr">path</span>: raw &#125; : raw</span><br><span class="line">  <span class="comment">// named target</span></span><br><span class="line">  <span class="keyword">if</span> (next._normalized) &#123;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next.name) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, raw)</span><br><span class="line">    <span class="keyword">const</span> params = next.params</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; <span class="keyword">typeof</span> params === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      next.params = extend(&#123;&#125;, params)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative params</span></span><br><span class="line">  <span class="keyword">if</span> (!next.path &amp;&amp; next.params &amp;&amp; current) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, next)</span><br><span class="line">    next._normalized = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> params: any = extend(extend(&#123;&#125;, current.params), next.params)</span><br><span class="line">    <span class="keyword">if</span> (current.name) &#123;</span><br><span class="line">      next.name = current.name</span><br><span class="line">      next.params = params</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.matched.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> rawPath = current.matched[current.matched.length - <span class="number">1</span>].path</span><br><span class="line">      next.path = fillParams(rawPath, params, <span class="string">`path <span class="subst">$&#123;current.path&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`relative params navigation requires a current route.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedPath = parsePath(next.path || <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> basePath = (current &amp;&amp; current.path) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> path = parsedPath.path</span><br><span class="line">  ? resolvePath(parsedPath.path, basePath, append || next.append)</span><br><span class="line">  : basePath</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> query = resolveQuery(</span><br><span class="line">    parsedPath.query,</span><br><span class="line">    next.query,</span><br><span class="line">    router &amp;&amp; router.options.parseQuery</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hash = next.hash || parsedPath.hash</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.charAt(<span class="number">0</span>) !== <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    hash = <span class="string">`#<span class="subst">$&#123;hash&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">_normalized</span>: <span class="literal">true</span>,</span><br><span class="line">    path,</span><br><span class="line">    query,</span><br><span class="line">    hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot;&gt;&lt;a href=&quot;#vue-router-插件，对vue-router使用中query参数做自动加密、解密&quot; class=&quot;headerlink&quot; title=&quot;vue-ro</summary>
      
    
    
    
    <category term="Vue插件" scheme="https://wukang0718.com/categories/Vue%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="vue" scheme="https://wukang0718.com/tags/vue/"/>
    
    <category term="vue-router" scheme="https://wukang0718.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>为什么微任务比宏任务执行快</title>
    <link href="https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/"/>
    <id>https://wukang0718.com/2021/09/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%AF%94%E5%AE%8F%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%BF%AB/</id>
    <published>2021-09-04T07:49:41.000Z</published>
    <updated>2021-09-07T12:50:13.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么微任务比宏任务执行快"><a href="#为什么微任务比宏任务执行快" class="headerlink" title="为什么微任务比宏任务执行快"></a>为什么微任务比宏任务执行快</h2><ol><li>微任务叫 <code>microtask</code> 称为 <code>jobs</code>，是由JavaScript自身发起的</li><li>宏任务叫 <code>macrotask</code> 称为 <code>task</code>，是由宿主环境发起的</li></ol><blockquote><p>Event Loop中，每一次循环称为tick</p></blockquote><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table><thead><tr><th></th><th>宏任务（macrotask）</th><th>微任务（microtask）</th></tr></thead><tbody><tr><td>谁发起的</td><td>Nodejs/浏览器</td><td>JavaScript自身</td></tr><tr><td>具体事件</td><td>script 标签<br />setTimeout/setInterval<br />UiRendering<br />postMessage/messageChannel<br />setImmediate/IO</td><td>Promise<br />MutationObserver<br />process.nextTick</td></tr><tr><td>谁先执行</td><td>后执行</td><td>先执行</td></tr><tr><td>会触发新一轮的tick吗</td><td>会</td><td>不会</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;a href=&quot;#为什么微任务比宏任务执行快&quot; class=&quot;headerlink&quot; title=&quot;为什么微任务比宏任务执行快&quot;&gt;&lt;/a&gt;为什么微任务比宏任务执行快&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;微任务叫 &lt;code&gt;microtask</summary>
      
    
    
    
    <category term="面试题" scheme="https://wukang0718.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="EventLoop" scheme="https://wukang0718.com/tags/EventLoop/"/>
    
    <category term="微任务" scheme="https://wukang0718.com/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="宏任务" scheme="https://wukang0718.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
